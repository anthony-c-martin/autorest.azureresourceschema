// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_EventHub_2017_04_01
    {
        private const string ProviderNamespace = "Microsoft.EventHub";
        private const string ApiVersion = "2017-04-01";
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_authorizationRules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "authorizationRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_networkRuleSets = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "networkRuleSets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_disasterRecoveryConfigs = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "disasterRecoveryConfigs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_eventhubs = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "eventhubs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_eventhubs_authorizationRules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "eventhubs", "authorizationRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_eventhubs_consumergroups = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "eventhubs", "consumergroups"}, ApiVersion);
        private static Lazy<Microsoft_EventHub_2017_04_01> InstanceLazy = new Lazy<Microsoft_EventHub_2017_04_01>(() => new Microsoft_EventHub_2017_04_01());
        private Microsoft_EventHub_2017_04_01()
        {
            AuthorizationRuleProperties = new NamedObjectType("AuthorizationRuleProperties", new ITypeProperty[]{new TypeProperty("rights", new TypedArrayType(UnionType.Create(new StringLiteralType("'Manage'"), new StringLiteralType("'Send'"), new StringLiteralType("'Listen'"))), TypePropertyFlags.Required)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.Required), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            EHNamespaceProperties = new NamedObjectType("EHNamespaceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("serviceBusEndpoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metricId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("isAutoInflateEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("maximumThroughputUnits", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("kafkaEnabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            NetworkRuleSetProperties = new NamedObjectType("NetworkRuleSetProperties", new ITypeProperty[]{new TypeProperty("defaultAction", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkRules", () => new TypedArrayType(NWRuleSetVirtualNetworkRules), TypePropertyFlags.None), new LazyTypeProperty("ipRules", () => new TypedArrayType(NWRuleSetIpRules), TypePropertyFlags.None)}, null);
            NWRuleSetVirtualNetworkRules = new NamedObjectType("NWRuleSetVirtualNetworkRules", new ITypeProperty[]{new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("ignoreMissingVnetServiceEndpoint", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            NWRuleSetIpRules = new NamedObjectType("NWRuleSetIpRules", new ITypeProperty[]{new TypeProperty("ipMask", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("action", new StringLiteralType("'Allow'"), TypePropertyFlags.None)}, null);
            ArmDisasterRecoveryProperties = new NamedObjectType("ArmDisasterRecoveryProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Accepted'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("partnerNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("alternateName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("role", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'PrimaryNotReplicating'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly), new TypeProperty("pendingReplicationOperationsCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            EventhubProperties = new NamedObjectType("EventhubProperties", new ITypeProperty[]{new TypeProperty("partitionIds", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("messageRetentionInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("partitionCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Active'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'SendDisabled'"), new StringLiteralType("'ReceiveDisabled'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Renaming'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.None), new LazyTypeProperty("captureDescription", () => CaptureDescription, TypePropertyFlags.None)}, null);
            CaptureDescription = new NamedObjectType("CaptureDescription", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("encoding", UnionType.Create(new StringLiteralType("'Avro'"), new StringLiteralType("'AvroDeflate'")), TypePropertyFlags.None), new TypeProperty("intervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sizeLimitInBytes", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("destination", () => Destination, TypePropertyFlags.None), new TypeProperty("skipEmptyArchives", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            Destination = new NamedObjectType("Destination", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DestinationProperties, TypePropertyFlags.None)}, null);
            DestinationProperties = new NamedObjectType("DestinationProperties", new ITypeProperty[]{new TypeProperty("storageAccountResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("blobContainer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("archiveNameFormat", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ConsumerGroupProperties = new NamedObjectType("ConsumerGroupProperties", new ITypeProperty[]{new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("userMetadata", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_namespaces = new ResourceType("Microsoft.EventHub/namespaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => EHNamespaceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces);
            ResourceType_namespaces_authorizationRules = new ResourceType("Microsoft.EventHub/namespaces/authorizationRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/authorizationRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AuthorizationRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_authorizationRules);
            ResourceType_namespaces_networkRuleSets = new ResourceType("Microsoft.EventHub/namespaces/networkRuleSets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/networkRuleSets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => NetworkRuleSetProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_networkRuleSets);
            ResourceType_namespaces_disasterRecoveryConfigs = new ResourceType("Microsoft.EventHub/namespaces/disasterRecoveryConfigs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/disasterRecoveryConfigs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ArmDisasterRecoveryProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_disasterRecoveryConfigs);
            ResourceType_namespaces_eventhubs = new ResourceType("Microsoft.EventHub/namespaces/eventhubs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/eventhubs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => EventhubProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_eventhubs);
            ResourceType_namespaces_eventhubs_authorizationRules = new ResourceType("Microsoft.EventHub/namespaces/eventhubs/authorizationRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/eventhubs/authorizationRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AuthorizationRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_eventhubs_authorizationRules);
            ResourceType_namespaces_eventhubs_consumergroups = new ResourceType("Microsoft.EventHub/namespaces/eventhubs/consumergroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.EventHub/namespaces/eventhubs/consumergroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ConsumerGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_eventhubs_consumergroups);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_namespaces, () => InstanceLazy.Value.ResourceType_namespaces);
            registrar.RegisterType(ResourceTypeReference_namespaces_authorizationRules, () => InstanceLazy.Value.ResourceType_namespaces_authorizationRules);
            registrar.RegisterType(ResourceTypeReference_namespaces_networkRuleSets, () => InstanceLazy.Value.ResourceType_namespaces_networkRuleSets);
            registrar.RegisterType(ResourceTypeReference_namespaces_disasterRecoveryConfigs, () => InstanceLazy.Value.ResourceType_namespaces_disasterRecoveryConfigs);
            registrar.RegisterType(ResourceTypeReference_namespaces_eventhubs, () => InstanceLazy.Value.ResourceType_namespaces_eventhubs);
            registrar.RegisterType(ResourceTypeReference_namespaces_eventhubs_authorizationRules, () => InstanceLazy.Value.ResourceType_namespaces_eventhubs_authorizationRules);
            registrar.RegisterType(ResourceTypeReference_namespaces_eventhubs_consumergroups, () => InstanceLazy.Value.ResourceType_namespaces_eventhubs_consumergroups);
        }
        private readonly ResourceType ResourceType_namespaces;
        private readonly ResourceType ResourceType_namespaces_authorizationRules;
        private readonly ResourceType ResourceType_namespaces_networkRuleSets;
        private readonly ResourceType ResourceType_namespaces_disasterRecoveryConfigs;
        private readonly ResourceType ResourceType_namespaces_eventhubs;
        private readonly ResourceType ResourceType_namespaces_eventhubs_authorizationRules;
        private readonly ResourceType ResourceType_namespaces_eventhubs_consumergroups;
        private readonly TypeSymbol AuthorizationRuleProperties;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol EHNamespaceProperties;
        private readonly TypeSymbol NetworkRuleSetProperties;
        private readonly TypeSymbol NWRuleSetVirtualNetworkRules;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol NWRuleSetIpRules;
        private readonly TypeSymbol ArmDisasterRecoveryProperties;
        private readonly TypeSymbol EventhubProperties;
        private readonly TypeSymbol CaptureDescription;
        private readonly TypeSymbol Destination;
        private readonly TypeSymbol DestinationProperties;
        private readonly TypeSymbol ConsumerGroupProperties;
    }
}
