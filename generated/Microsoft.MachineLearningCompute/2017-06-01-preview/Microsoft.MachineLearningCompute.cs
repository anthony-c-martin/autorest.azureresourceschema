// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_MachineLearningCompute_2017_06_01_preview
    {
        private const string ProviderNamespace = "Microsoft.MachineLearningCompute";
        private const string ApiVersion = "2017-06-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_operationalizationClusters = new ResourceTypeReference(ProviderNamespace, new[]{"operationalizationClusters"}, ApiVersion);
        private static Lazy<Microsoft_MachineLearningCompute_2017_06_01_preview> InstanceLazy = new Lazy<Microsoft_MachineLearningCompute_2017_06_01_preview>(() => new Microsoft_MachineLearningCompute_2017_06_01_preview());
        private Microsoft_MachineLearningCompute_2017_06_01_preview()
        {
            OperationalizationClusterProperties = new NamedObjectType("OperationalizationClusterProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdOn", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("modifiedOn", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("clusterType", new StringLiteralType("'ACS'"), TypePropertyFlags.Required), new LazyTypeProperty("storageAccount", () => StorageAccountProperties, TypePropertyFlags.None), new LazyTypeProperty("containerRegistry", () => ContainerRegistryProperties, TypePropertyFlags.None), new LazyTypeProperty("containerService", () => AcsClusterProperties, TypePropertyFlags.Required), new LazyTypeProperty("appInsights", () => AppInsightsCredentials, TypePropertyFlags.None), new LazyTypeProperty("globalServiceConfiguration", () => GlobalServiceConfiguration, TypePropertyFlags.None)}, null);
            StorageAccountProperties = new NamedObjectType("StorageAccountProperties", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerRegistryProperties = new NamedObjectType("ContainerRegistryProperties", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AcsClusterProperties = new NamedObjectType("AcsClusterProperties", new ITypeProperty[]{new TypeProperty("clusterFqdn", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("orchestratorType", new StringLiteralType("'Kubernetes'"), TypePropertyFlags.Required), new LazyTypeProperty("orchestratorProperties", () => KubernetesClusterProperties, TypePropertyFlags.Required), new TypeProperty("systemServices", new TypedArrayType(UnionType.Create(new StringLiteralType("'Scoring'"), new StringLiteralType("'Batch'"))), TypePropertyFlags.None), new TypeProperty("agentCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("agentVmSize", UnionType.Create(new StringLiteralType("'Standard_A0'"), new StringLiteralType("'Standard_A1'"), new StringLiteralType("'Standard_A2'"), new StringLiteralType("'Standard_A3'"), new StringLiteralType("'Standard_A4'"), new StringLiteralType("'Standard_A5'"), new StringLiteralType("'Standard_A6'"), new StringLiteralType("'Standard_A7'"), new StringLiteralType("'Standard_A8'"), new StringLiteralType("'Standard_A9'"), new StringLiteralType("'Standard_A10'"), new StringLiteralType("'Standard_A11'"), new StringLiteralType("'Standard_D1'"), new StringLiteralType("'Standard_D2'"), new StringLiteralType("'Standard_D3'"), new StringLiteralType("'Standard_D4'"), new StringLiteralType("'Standard_D11'"), new StringLiteralType("'Standard_D12'"), new StringLiteralType("'Standard_D13'"), new StringLiteralType("'Standard_D14'"), new StringLiteralType("'Standard_D1_v2'"), new StringLiteralType("'Standard_D2_v2'"), new StringLiteralType("'Standard_D3_v2'"), new StringLiteralType("'Standard_D4_v2'"), new StringLiteralType("'Standard_D5_v2'"), new StringLiteralType("'Standard_D11_v2'"), new StringLiteralType("'Standard_D12_v2'"), new StringLiteralType("'Standard_D13_v2'"), new StringLiteralType("'Standard_D14_v2'"), new StringLiteralType("'Standard_G1'"), new StringLiteralType("'Standard_G2'"), new StringLiteralType("'Standard_G3'"), new StringLiteralType("'Standard_G4'"), new StringLiteralType("'Standard_G5'"), new StringLiteralType("'Standard_DS1'"), new StringLiteralType("'Standard_DS2'"), new StringLiteralType("'Standard_DS3'"), new StringLiteralType("'Standard_DS4'"), new StringLiteralType("'Standard_DS11'"), new StringLiteralType("'Standard_DS12'"), new StringLiteralType("'Standard_DS13'"), new StringLiteralType("'Standard_DS14'"), new StringLiteralType("'Standard_GS1'"), new StringLiteralType("'Standard_GS2'"), new StringLiteralType("'Standard_GS3'"), new StringLiteralType("'Standard_GS4'"), new StringLiteralType("'Standard_GS5'")), TypePropertyFlags.None)}, null);
            KubernetesClusterProperties = new NamedObjectType("KubernetesClusterProperties", new ITypeProperty[]{new LazyTypeProperty("servicePrincipal", () => ServicePrincipalProperties, TypePropertyFlags.Required)}, null);
            ServicePrincipalProperties = new NamedObjectType("ServicePrincipalProperties", new ITypeProperty[]{new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("secret", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            AppInsightsCredentials = new NamedObjectType("AppInsightsCredentials", new ITypeProperty[]{new TypeProperty("appId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiKey", LanguageConstants.String, TypePropertyFlags.None)}, null);
            GlobalServiceConfiguration = new NamedObjectType("GlobalServiceConfiguration", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("ssl", () => SslConfiguration, TypePropertyFlags.None), new LazyTypeProperty("serviceAuth", () => ServiceAuthConfiguration, TypePropertyFlags.None), new LazyTypeProperty("autoScale", () => AutoScaleConfiguration, TypePropertyFlags.None)}, null);
            SslConfiguration = new NamedObjectType("SslConfiguration", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("cert", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("key", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServiceAuthConfiguration = new NamedObjectType("ServiceAuthConfiguration", new ITypeProperty[]{new TypeProperty("primaryAuthKeyHash", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("secondaryAuthKeyHash", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            AutoScaleConfiguration = new NamedObjectType("AutoScaleConfiguration", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("minReplicas", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxReplicas", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("targetUtilization", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("refreshPeriodInSeconds", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceType_operationalizationClusters = new ResourceType("Microsoft.MachineLearningCompute/operationalizationClusters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.MachineLearningCompute/operationalizationClusters'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => OperationalizationClusterProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_operationalizationClusters);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_operationalizationClusters, () => InstanceLazy.Value.ResourceType_operationalizationClusters);
        }
        private readonly ResourceType ResourceType_operationalizationClusters;
        private readonly TypeSymbol OperationalizationClusterProperties;
        private readonly TypeSymbol StorageAccountProperties;
        private readonly TypeSymbol ContainerRegistryProperties;
        private readonly TypeSymbol AcsClusterProperties;
        private readonly TypeSymbol KubernetesClusterProperties;
        private readonly TypeSymbol ServicePrincipalProperties;
        private readonly TypeSymbol AppInsightsCredentials;
        private readonly TypeSymbol GlobalServiceConfiguration;
        private readonly TypeSymbol SslConfiguration;
        private readonly TypeSymbol ServiceAuthConfiguration;
        private readonly TypeSymbol AutoScaleConfiguration;
    }
}
