// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DataFactory_2017_09_01_preview
    {
        private const string ProviderNamespace = "Microsoft.DataFactory";
        private const string ApiVersion = "2017-09-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_factories = new ResourceTypeReference(ProviderNamespace, new[]{"factories"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_integrationRuntimes = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "integrationRuntimes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_linkedservices = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "linkedservices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_datasets = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "datasets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_pipelines = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "pipelines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_triggers = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "triggers"}, ApiVersion);
        private static Lazy<Microsoft_DataFactory_2017_09_01_preview> InstanceLazy = new Lazy<Microsoft_DataFactory_2017_09_01_preview>(() => new Microsoft_DataFactory_2017_09_01_preview());
        private Microsoft_DataFactory_2017_09_01_preview()
        {
            FactoryIdentity = new NamedObjectType("FactoryIdentity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FactoryProperties = new NamedObjectType("FactoryProperties", new ITypeProperty[]{new LazyTypeProperty("vstsConfiguration", () => FactoryVSTSConfiguration, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FactoryVSTSConfiguration = new NamedObjectType("FactoryVSTSConfiguration", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("projectName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("repositoryName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("collaborationBranch", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("rootFolder", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastCommitId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntime = new NamedObjectType("IntegrationRuntime", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ManagedIntegrationRuntime = new NamedObjectType("ManagedIntegrationRuntime", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ManagedIntegrationRuntimeTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ManagedIntegrationRuntimeTypeProperties = new NamedObjectType("ManagedIntegrationRuntimeTypeProperties", new ITypeProperty[]{new LazyTypeProperty("computeProperties", () => IntegrationRuntimeComputeProperties, TypePropertyFlags.None), new LazyTypeProperty("ssisProperties", () => IntegrationRuntimeSsisProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeComputeProperties = new NamedObjectType("IntegrationRuntimeComputeProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nodeSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("numberOfNodes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxParallelExecutionsPerNode", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("vNetProperties", () => IntegrationRuntimeVNetProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeVNetProperties = new NamedObjectType("IntegrationRuntimeVNetProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("vNetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnet", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeSsisProperties = new NamedObjectType("IntegrationRuntimeSsisProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("catalogInfo", () => IntegrationRuntimeSsisCatalogInfo, TypePropertyFlags.None), new TypeProperty("licenseType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("customSetupScriptProperties", () => IntegrationRuntimeCustomSetupScriptProperties, TypePropertyFlags.None), new LazyTypeProperty("dataProxyProperties", () => IntegrationRuntimeDataProxyProperties, TypePropertyFlags.None), new TypeProperty("edition", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeSsisCatalogInfo = new NamedObjectType("IntegrationRuntimeSsisCatalogInfo", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("catalogServerEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("catalogAdminUserName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("catalogAdminPassword", () => SecureString, TypePropertyFlags.None), new TypeProperty("catalogPricingTier", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SecureString = new NamedObjectType("SecureString", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            IntegrationRuntimeCustomSetupScriptProperties = new NamedObjectType("IntegrationRuntimeCustomSetupScriptProperties", new ITypeProperty[]{new TypeProperty("blobContainerUri", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sasToken", () => SecureString, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeDataProxyProperties = new NamedObjectType("IntegrationRuntimeDataProxyProperties", new ITypeProperty[]{new LazyTypeProperty("connectVia", () => EntityReference, TypePropertyFlags.None), new LazyTypeProperty("stagingLinkedService", () => EntityReference, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            EntityReference = new NamedObjectType("EntityReference", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SelfHostedIntegrationRuntime = new NamedObjectType("SelfHostedIntegrationRuntime", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => LinkedIntegrationRuntimeTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            LinkedIntegrationRuntimeTypeProperties = new NamedObjectType("LinkedIntegrationRuntimeTypeProperties", new ITypeProperty[]{new LazyTypeProperty("linkedInfo", () => LinkedIntegrationRuntimeProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            LinkedIntegrationRuntimeProperties = new NamedObjectType("LinkedIntegrationRuntimeProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None);
            LinkedIntegrationRuntimeKey = new NamedObjectType("LinkedIntegrationRuntimeKey", new ITypeProperty[]{new LazyTypeProperty("key", () => SecureString, TypePropertyFlags.Required), new TypeProperty("authorizationType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            LinkedIntegrationRuntimeRbac = new NamedObjectType("LinkedIntegrationRuntimeRbac", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("authorizationType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            LinkedService = new NamedObjectType("LinkedService", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(new NamedObjectType("annotations", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IntegrationRuntimeReference = new NamedObjectType("IntegrationRuntimeReference", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ParameterSpecification = new NamedObjectType("ParameterSpecification", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("defaultValue", new NamedObjectType("defaultValue", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureStorageLinkedService = new NamedObjectType("AzureStorageLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureStorageLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureStorageLinkedServiceTypeProperties = new NamedObjectType("AzureStorageLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("sasUri", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SecretBase = new NamedObjectType("SecretBase", new ITypeProperty[]{}, null, TypePropertyFlags.None);
            AzureKeyVaultSecretReference = new NamedObjectType("AzureKeyVaultSecretReference", new ITypeProperty[]{new LazyTypeProperty("store", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("secretName", new NamedObjectType("secretName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("secretVersion", new NamedObjectType("secretVersion", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            LinkedServiceReference = new NamedObjectType("LinkedServiceReference", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureSqlDWLinkedService = new NamedObjectType("AzureSqlDWLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDWLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlDWLinkedServiceTypeProperties = new NamedObjectType("AzureSqlDWLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlServerLinkedService = new NamedObjectType("SqlServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SqlServerLinkedServiceTypeProperties = new NamedObjectType("SqlServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureSqlDatabaseLinkedService = new NamedObjectType("AzureSqlDatabaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDatabaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlDatabaseLinkedServiceTypeProperties = new NamedObjectType("AzureSqlDatabaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureBatchLinkedService = new NamedObjectType("AzureBatchLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureBatchLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureBatchLinkedServiceTypeProperties = new NamedObjectType("AzureBatchLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accountName", new NamedObjectType("accountName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("accessKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("batchUri", new NamedObjectType("batchUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("poolName", new NamedObjectType("poolName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureKeyVaultLinkedService = new NamedObjectType("AzureKeyVaultLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureKeyVaultLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureKeyVaultLinkedServiceTypeProperties = new NamedObjectType("AzureKeyVaultLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("baseUrl", new NamedObjectType("baseUrl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CosmosDbLinkedService = new NamedObjectType("CosmosDbLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CosmosDbLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CosmosDbLinkedServiceTypeProperties = new NamedObjectType("CosmosDbLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DynamicsLinkedService = new NamedObjectType("DynamicsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DynamicsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DynamicsLinkedServiceTypeProperties = new NamedObjectType("DynamicsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("deploymentType", new NamedObjectType("deploymentType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("hostName", new NamedObjectType("hostName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("serviceUri", new NamedObjectType("serviceUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("organizationName", new NamedObjectType("organizationName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", new NamedObjectType("authenticationType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightLinkedService = new NamedObjectType("HDInsightLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightLinkedServiceTypeProperties = new NamedObjectType("HDInsightLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clusterUri", new NamedObjectType("clusterUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("hcatalogLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FileServerLinkedService = new NamedObjectType("FileServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FileServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FileServerLinkedServiceTypeProperties = new NamedObjectType("FileServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userId", new NamedObjectType("userId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            OracleLinkedService = new NamedObjectType("OracleLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OracleLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            OracleLinkedServiceTypeProperties = new NamedObjectType("OracleLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureMySqlLinkedService = new NamedObjectType("AzureMySqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMySqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMySqlLinkedServiceTypeProperties = new NamedObjectType("AzureMySqlLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MySqlLinkedService = new NamedObjectType("MySqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MySqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MySqlLinkedServiceTypeProperties = new NamedObjectType("MySqlLinkedServiceTypeProperties", new ITypeProperty[]{new LazyTypeProperty("connectionString", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PostgreSqlLinkedService = new NamedObjectType("PostgreSqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PostgreSqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PostgreSqlLinkedServiceTypeProperties = new NamedObjectType("PostgreSqlLinkedServiceTypeProperties", new ITypeProperty[]{new LazyTypeProperty("connectionString", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SybaseLinkedService = new NamedObjectType("SybaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SybaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SybaseLinkedServiceTypeProperties = new NamedObjectType("SybaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("database", new NamedObjectType("database", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("schema", new NamedObjectType("schema", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Db2LinkedService = new NamedObjectType("Db2LinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => Db2LinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            Db2LinkedServiceTypeProperties = new NamedObjectType("Db2LinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("database", new NamedObjectType("database", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            TeradataLinkedService = new NamedObjectType("TeradataLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => TeradataLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            TeradataLinkedServiceTypeProperties = new NamedObjectType("TeradataLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureMLLinkedService = new NamedObjectType("AzureMLLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMLLinkedServiceTypeProperties = new NamedObjectType("AzureMLLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("mlEndpoint", new NamedObjectType("mlEndpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("apiKey", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("updateResourceEndpoint", new NamedObjectType("updateResourceEndpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            OdbcLinkedService = new NamedObjectType("OdbcLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OdbcLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            OdbcLinkedServiceTypeProperties = new NamedObjectType("OdbcLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", new NamedObjectType("authenticationType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("credential", () => SecretBase, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HdfsLinkedService = new NamedObjectType("HdfsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HdfsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HdfsLinkedServiceTypeProperties = new NamedObjectType("HdfsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", new NamedObjectType("authenticationType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ODataLinkedService = new NamedObjectType("ODataLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ODataLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ODataLinkedServiceTypeProperties = new NamedObjectType("ODataLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WebLinkedService = new NamedObjectType("WebLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebLinkedServiceTypeProperties = new NamedObjectType("WebLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebAnonymousAuthentication = new NamedObjectType("WebAnonymousAuthentication", new ITypeProperty[]{new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebBasicAuthentication = new NamedObjectType("WebBasicAuthentication", new ITypeProperty[]{new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebClientCertificateAuthentication = new NamedObjectType("WebClientCertificateAuthentication", new ITypeProperty[]{new LazyTypeProperty("pfx", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CassandraLinkedService = new NamedObjectType("CassandraLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CassandraLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CassandraLinkedServiceTypeProperties = new NamedObjectType("CassandraLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", new NamedObjectType("authenticationType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MongoDbLinkedService = new NamedObjectType("MongoDbLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MongoDbLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MongoDbLinkedServiceTypeProperties = new NamedObjectType("MongoDbLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("databaseName", new NamedObjectType("databaseName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("authSource", new NamedObjectType("authSource", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureDataLakeStoreLinkedService = new NamedObjectType("AzureDataLakeStoreLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeStoreLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureDataLakeStoreLinkedServiceTypeProperties = new NamedObjectType("AzureDataLakeStoreLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("dataLakeStoreUri", new NamedObjectType("dataLakeStoreUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("accountName", new NamedObjectType("accountName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("subscriptionId", new NamedObjectType("subscriptionId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("resourceGroupName", new NamedObjectType("resourceGroupName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SalesforceLinkedService = new NamedObjectType("SalesforceLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SalesforceLinkedServiceTypeProperties = new NamedObjectType("SalesforceLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("environmentUrl", new NamedObjectType("environmentUrl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("securityToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SapCloudForCustomerLinkedService = new NamedObjectType("SapCloudForCustomerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapCloudForCustomerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapCloudForCustomerLinkedServiceTypeProperties = new NamedObjectType("SapCloudForCustomerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SapEccLinkedService = new NamedObjectType("SapEccLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapEccLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapEccLinkedServiceTypeProperties = new NamedObjectType("SapEccLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AmazonS3LinkedService = new NamedObjectType("AmazonS3LinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonS3LinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AmazonS3LinkedServiceTypeProperties = new NamedObjectType("AmazonS3LinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accessKeyId", new NamedObjectType("accessKeyId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("secretAccessKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AmazonRedshiftLinkedService = new NamedObjectType("AmazonRedshiftLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonRedshiftLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AmazonRedshiftLinkedServiceTypeProperties = new NamedObjectType("AmazonRedshiftLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("database", new NamedObjectType("database", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CustomDataSourceLinkedService = new NamedObjectType("CustomDataSourceLinkedService", new ITypeProperty[]{new TypeProperty("typeProperties", new NamedObjectType("typeProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSearchLinkedService = new NamedObjectType("AzureSearchLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSearchLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSearchLinkedServiceTypeProperties = new NamedObjectType("AzureSearchLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("key", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HttpLinkedService = new NamedObjectType("HttpLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HttpLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HttpLinkedServiceTypeProperties = new NamedObjectType("HttpLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("embeddedCertData", new NamedObjectType("embeddedCertData", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("certThumbprint", new NamedObjectType("certThumbprint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableServerCertificateValidation", new NamedObjectType("enableServerCertificateValidation", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FtpServerLinkedService = new NamedObjectType("FtpServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FtpServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FtpServerLinkedServiceTypeProperties = new NamedObjectType("FtpServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableServerCertificateValidation", new NamedObjectType("enableServerCertificateValidation", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SftpServerLinkedService = new NamedObjectType("SftpServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SftpServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SftpServerLinkedServiceTypeProperties = new NamedObjectType("SftpServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("privateKeyPath", new NamedObjectType("privateKeyPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("privateKeyContent", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("passPhrase", () => SecretBase, TypePropertyFlags.None), new TypeProperty("skipHostKeyValidation", new NamedObjectType("skipHostKeyValidation", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("hostKeyFingerprint", new NamedObjectType("hostKeyFingerprint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SapBWLinkedService = new NamedObjectType("SapBWLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapBWLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapBWLinkedServiceTypeProperties = new NamedObjectType("SapBWLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("systemNumber", new NamedObjectType("systemNumber", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SapHanaLinkedService = new NamedObjectType("SapHanaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapHanaLinkedServiceProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapHanaLinkedServiceProperties = new NamedObjectType("SapHanaLinkedServiceProperties", new ITypeProperty[]{new TypeProperty("server", new NamedObjectType("server", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AmazonMWSLinkedService = new NamedObjectType("AmazonMWSLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonMWSLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AmazonMWSLinkedServiceTypeProperties = new NamedObjectType("AmazonMWSLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("marketplaceID", new NamedObjectType("marketplaceID", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("sellerID", new NamedObjectType("sellerID", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("mwsAuthToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("accessKeyId", new NamedObjectType("accessKeyId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("secretKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzurePostgreSqlLinkedService = new NamedObjectType("AzurePostgreSqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzurePostgreSqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzurePostgreSqlLinkedServiceTypeProperties = new NamedObjectType("AzurePostgreSqlLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ConcurLinkedService = new NamedObjectType("ConcurLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ConcurLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ConcurLinkedServiceTypeProperties = new NamedObjectType("ConcurLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CouchbaseLinkedService = new NamedObjectType("CouchbaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CouchbaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CouchbaseLinkedServiceTypeProperties = new NamedObjectType("CouchbaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DrillLinkedService = new NamedObjectType("DrillLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DrillLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DrillLinkedServiceTypeProperties = new NamedObjectType("DrillLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            EloquaLinkedService = new NamedObjectType("EloquaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => EloquaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            EloquaLinkedServiceTypeProperties = new NamedObjectType("EloquaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            GoogleBigQueryLinkedService = new NamedObjectType("GoogleBigQueryLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GoogleBigQueryLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GoogleBigQueryLinkedServiceTypeProperties = new NamedObjectType("GoogleBigQueryLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("project", new NamedObjectType("project", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("additionalProjects", new NamedObjectType("additionalProjects", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("requestGoogleDriveScope", new NamedObjectType("requestGoogleDriveScope", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("refreshToken", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("clientId", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("email", new NamedObjectType("email", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("keyFilePath", new NamedObjectType("keyFilePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            GreenplumLinkedService = new NamedObjectType("GreenplumLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GreenplumLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GreenplumLinkedServiceTypeProperties = new NamedObjectType("GreenplumLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HBaseLinkedService = new NamedObjectType("HBaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HBaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HBaseLinkedServiceTypeProperties = new NamedObjectType("HBaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("httpPath", new NamedObjectType("httpPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HiveLinkedService = new NamedObjectType("HiveLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HiveLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HiveLinkedServiceTypeProperties = new NamedObjectType("HiveLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("serverType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thriftTransportProtocol", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("serviceDiscoveryMode", new NamedObjectType("serviceDiscoveryMode", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("zooKeeperNameSpace", new NamedObjectType("zooKeeperNameSpace", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useNativeQuery", new NamedObjectType("useNativeQuery", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("httpPath", new NamedObjectType("httpPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HubspotLinkedService = new NamedObjectType("HubspotLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HubspotLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HubspotLinkedServiceTypeProperties = new NamedObjectType("HubspotLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("refreshToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ImpalaLinkedService = new NamedObjectType("ImpalaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ImpalaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ImpalaLinkedServiceTypeProperties = new NamedObjectType("ImpalaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            JiraLinkedService = new NamedObjectType("JiraLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => JiraLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            JiraLinkedServiceTypeProperties = new NamedObjectType("JiraLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MagentoLinkedService = new NamedObjectType("MagentoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MagentoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MagentoLinkedServiceTypeProperties = new NamedObjectType("MagentoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MariaDBLinkedService = new NamedObjectType("MariaDBLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MariaDBLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MariaDBLinkedServiceTypeProperties = new NamedObjectType("MariaDBLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MarketoLinkedService = new NamedObjectType("MarketoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MarketoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MarketoLinkedServiceTypeProperties = new NamedObjectType("MarketoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PaypalLinkedService = new NamedObjectType("PaypalLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PaypalLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PaypalLinkedServiceTypeProperties = new NamedObjectType("PaypalLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PhoenixLinkedService = new NamedObjectType("PhoenixLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PhoenixLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PhoenixLinkedServiceTypeProperties = new NamedObjectType("PhoenixLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("httpPath", new NamedObjectType("httpPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PrestoLinkedService = new NamedObjectType("PrestoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PrestoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PrestoLinkedServiceTypeProperties = new NamedObjectType("PrestoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("serverVersion", new NamedObjectType("serverVersion", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("catalog", new NamedObjectType("catalog", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("timeZoneID", new NamedObjectType("timeZoneID", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            QuickBooksLinkedService = new NamedObjectType("QuickBooksLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => QuickBooksLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            QuickBooksLinkedServiceTypeProperties = new NamedObjectType("QuickBooksLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("companyId", new NamedObjectType("companyId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("consumerKey", new NamedObjectType("consumerKey", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("consumerSecret", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("accessTokenSecret", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ServiceNowLinkedService = new NamedObjectType("ServiceNowLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ServiceNowLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ServiceNowLinkedServiceTypeProperties = new NamedObjectType("ServiceNowLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ShopifyLinkedService = new NamedObjectType("ShopifyLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ShopifyLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ShopifyLinkedServiceTypeProperties = new NamedObjectType("ShopifyLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SparkLinkedService = new NamedObjectType("SparkLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SparkLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SparkLinkedServiceTypeProperties = new NamedObjectType("SparkLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("port", new NamedObjectType("port", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("serverType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thriftTransportProtocol", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", new NamedObjectType("username", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("httpPath", new NamedObjectType("httpPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableSsl", new NamedObjectType("enableSsl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("trustedCertPath", new NamedObjectType("trustedCertPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", new NamedObjectType("useSystemTrustStore", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", new NamedObjectType("allowHostNameCNMismatch", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", new NamedObjectType("allowSelfSignedServerCert", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SquareLinkedService = new NamedObjectType("SquareLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SquareLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SquareLinkedServiceTypeProperties = new NamedObjectType("SquareLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("redirectUri", new NamedObjectType("redirectUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            XeroLinkedService = new NamedObjectType("XeroLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => XeroLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            XeroLinkedServiceTypeProperties = new NamedObjectType("XeroLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", new NamedObjectType("host", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("consumerKey", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("privateKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ZohoLinkedService = new NamedObjectType("ZohoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ZohoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ZohoLinkedServiceTypeProperties = new NamedObjectType("ZohoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VerticaLinkedService = new NamedObjectType("VerticaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => VerticaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            VerticaLinkedServiceTypeProperties = new NamedObjectType("VerticaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NetezzaLinkedService = new NamedObjectType("NetezzaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => NetezzaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            NetezzaLinkedServiceTypeProperties = new NamedObjectType("NetezzaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", new NamedObjectType("connectionString", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SalesforceMarketingCloudLinkedService = new NamedObjectType("SalesforceMarketingCloudLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceMarketingCloudLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SalesforceMarketingCloudLinkedServiceTypeProperties = new NamedObjectType("SalesforceMarketingCloudLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightOnDemandLinkedService = new NamedObjectType("HDInsightOnDemandLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightOnDemandLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightOnDemandLinkedServiceTypeProperties = new NamedObjectType("HDInsightOnDemandLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clusterSize", new NamedObjectType("clusterSize", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("timeToLive", new NamedObjectType("timeToLive", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("version", new NamedObjectType("version", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("hostSubscriptionId", new NamedObjectType("hostSubscriptionId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clusterResourceGroup", new NamedObjectType("clusterResourceGroup", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clusterNamePrefix", new NamedObjectType("clusterNamePrefix", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("clusterUserName", new NamedObjectType("clusterUserName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("clusterPassword", () => SecretBase, TypePropertyFlags.None), new TypeProperty("clusterSshUserName", new NamedObjectType("clusterSshUserName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("clusterSshPassword", () => SecretBase, TypePropertyFlags.None), new TypeProperty("additionalLinkedServiceNames", new TypedArrayType(new NamedObjectType("additionalLinkedServiceNames", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("hcatalogLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("clusterType", new NamedObjectType("clusterType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sparkVersion", new NamedObjectType("sparkVersion", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("coreConfiguration", new NamedObjectType("coreConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("hBaseConfiguration", new NamedObjectType("hBaseConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("hdfsConfiguration", new NamedObjectType("hdfsConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("hiveConfiguration", new NamedObjectType("hiveConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("mapReduceConfiguration", new NamedObjectType("mapReduceConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("oozieConfiguration", new NamedObjectType("oozieConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("stormConfiguration", new NamedObjectType("stormConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("yarnConfiguration", new NamedObjectType("yarnConfiguration", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("headNodeSize", new NamedObjectType("headNodeSize", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("dataNodeSize", new NamedObjectType("dataNodeSize", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("zookeeperNodeSize", new NamedObjectType("zookeeperNodeSize", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureDataLakeAnalyticsLinkedService = new NamedObjectType("AzureDataLakeAnalyticsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeAnalyticsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureDataLakeAnalyticsLinkedServiceTypeProperties = new NamedObjectType("AzureDataLakeAnalyticsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accountName", new NamedObjectType("accountName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", new NamedObjectType("servicePrincipalId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", new NamedObjectType("tenant", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("subscriptionId", new NamedObjectType("subscriptionId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("resourceGroupName", new NamedObjectType("resourceGroupName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("dataLakeAnalyticsUri", new NamedObjectType("dataLakeAnalyticsUri", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureDatabricksLinkedService = new NamedObjectType("AzureDatabricksLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDatabricksLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureDatabricksLinkedServiceTypeProperties = new NamedObjectType("AzureDatabricksLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("domain", new NamedObjectType("domain", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("existingClusterId", new NamedObjectType("existingClusterId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("newClusterVersion", new NamedObjectType("newClusterVersion", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("newClusterNumOfWorker", new NamedObjectType("newClusterNumOfWorker", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("newClusterNodeType", new NamedObjectType("newClusterNodeType", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("newClusterSparkConf", new NamedObjectType("newClusterSparkConf", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResponsysLinkedService = new NamedObjectType("ResponsysLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ResponsysLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ResponsysLinkedServiceTypeProperties = new NamedObjectType("ResponsysLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", new NamedObjectType("endpoint", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("clientId", new NamedObjectType("clientId", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", new NamedObjectType("useEncryptedEndpoints", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("useHostVerification", new NamedObjectType("useHostVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("usePeerVerification", new NamedObjectType("usePeerVerification", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("encryptedCredential", new NamedObjectType("encryptedCredential", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Dataset = new NamedObjectType("Dataset", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", new NamedObjectType("structure", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(new NamedObjectType("annotations", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AmazonS3Dataset = new NamedObjectType("AmazonS3Dataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonS3DatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AmazonS3DatasetTypeProperties = new NamedObjectType("AmazonS3DatasetTypeProperties", new ITypeProperty[]{new TypeProperty("bucketName", new NamedObjectType("bucketName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("key", new NamedObjectType("key", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("prefix", new NamedObjectType("prefix", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("version", new NamedObjectType("version", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatasetStorageFormat = new NamedObjectType("DatasetStorageFormat", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("serializer", new NamedObjectType("serializer", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("deserializer", new NamedObjectType("deserializer", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatasetCompression = new NamedObjectType("DatasetCompression", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatasetBZip2Compression = new NamedObjectType("DatasetBZip2Compression", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DatasetGZipCompression = new NamedObjectType("DatasetGZipCompression", new ITypeProperty[]{new TypeProperty("level", new NamedObjectType("level", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DatasetDeflateCompression = new NamedObjectType("DatasetDeflateCompression", new ITypeProperty[]{new TypeProperty("level", new NamedObjectType("level", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DatasetZipDeflateCompression = new NamedObjectType("DatasetZipDeflateCompression", new ITypeProperty[]{new TypeProperty("level", new NamedObjectType("level", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureBlobDataset = new NamedObjectType("AzureBlobDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureBlobDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureBlobDatasetTypeProperties = new NamedObjectType("AzureBlobDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", new NamedObjectType("folderPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("tableRootLocation", new NamedObjectType("tableRootLocation", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("fileName", new NamedObjectType("fileName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureTableDataset = new NamedObjectType("AzureTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureTableDatasetTypeProperties = new NamedObjectType("AzureTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlTableDataset = new NamedObjectType("AzureSqlTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlTableDatasetTypeProperties = new NamedObjectType("AzureSqlTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlDWTableDataset = new NamedObjectType("AzureSqlDWTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDWTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSqlDWTableDatasetTypeProperties = new NamedObjectType("AzureSqlDWTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CassandraTableDataset = new NamedObjectType("CassandraTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CassandraTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CassandraTableDatasetTypeProperties = new NamedObjectType("CassandraTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("keyspace", new NamedObjectType("keyspace", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DocumentDbCollectionDataset = new NamedObjectType("DocumentDbCollectionDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DocumentDbCollectionDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DocumentDbCollectionDatasetTypeProperties = new NamedObjectType("DocumentDbCollectionDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("collectionName", new NamedObjectType("collectionName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DynamicsEntityDataset = new NamedObjectType("DynamicsEntityDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DynamicsEntityDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DynamicsEntityDatasetTypeProperties = new NamedObjectType("DynamicsEntityDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("entityName", new NamedObjectType("entityName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureDataLakeStoreDataset = new NamedObjectType("AzureDataLakeStoreDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeStoreDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureDataLakeStoreDatasetTypeProperties = new NamedObjectType("AzureDataLakeStoreDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", new NamedObjectType("folderPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("fileName", new NamedObjectType("fileName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FileShareDataset = new NamedObjectType("FileShareDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FileShareDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FileShareDatasetTypeProperties = new NamedObjectType("FileShareDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", new NamedObjectType("folderPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("fileName", new NamedObjectType("fileName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new TypeProperty("fileFilter", new NamedObjectType("fileFilter", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MongoDbCollectionDataset = new NamedObjectType("MongoDbCollectionDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MongoDbCollectionDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MongoDbCollectionDatasetTypeProperties = new NamedObjectType("MongoDbCollectionDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("collectionName", new NamedObjectType("collectionName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ODataResourceDataset = new NamedObjectType("ODataResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ODataResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ODataResourceDatasetTypeProperties = new NamedObjectType("ODataResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            OracleTableDataset = new NamedObjectType("OracleTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OracleTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            OracleTableDatasetTypeProperties = new NamedObjectType("OracleTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMySqlTableDataset = new NamedObjectType("AzureMySqlTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMySqlTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMySqlTableDatasetTypeProperties = new NamedObjectType("AzureMySqlTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RelationalTableDataset = new NamedObjectType("RelationalTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => RelationalTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            RelationalTableDatasetTypeProperties = new NamedObjectType("RelationalTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SalesforceObjectDataset = new NamedObjectType("SalesforceObjectDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceObjectDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SalesforceObjectDatasetTypeProperties = new NamedObjectType("SalesforceObjectDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("objectApiName", new NamedObjectType("objectApiName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SapCloudForCustomerResourceDataset = new NamedObjectType("SapCloudForCustomerResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapCloudForCustomerResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapCloudForCustomerResourceDatasetTypeProperties = new NamedObjectType("SapCloudForCustomerResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapEccResourceDataset = new NamedObjectType("SapEccResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapEccResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SapEccResourceDatasetTypeProperties = new NamedObjectType("SapEccResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SqlServerTableDataset = new NamedObjectType("SqlServerTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SqlServerTableDatasetTypeProperties = new NamedObjectType("SqlServerTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", new NamedObjectType("tableName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebTableDataset = new NamedObjectType("WebTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebTableDatasetTypeProperties = new NamedObjectType("WebTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("index", new NamedObjectType("index", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureSearchIndexDataset = new NamedObjectType("AzureSearchIndexDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSearchIndexDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureSearchIndexDatasetTypeProperties = new NamedObjectType("AzureSearchIndexDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("indexName", new NamedObjectType("indexName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HttpDataset = new NamedObjectType("HttpDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HttpDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HttpDatasetTypeProperties = new NamedObjectType("HttpDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("relativeUrl", new NamedObjectType("relativeUrl", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("requestMethod", new NamedObjectType("requestMethod", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("requestBody", new NamedObjectType("requestBody", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("additionalHeaders", new NamedObjectType("additionalHeaders", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AmazonMWSObjectDataset = new NamedObjectType("AmazonMWSObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzurePostgreSqlTableDataset = new NamedObjectType("AzurePostgreSqlTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ConcurObjectDataset = new NamedObjectType("ConcurObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CouchbaseTableDataset = new NamedObjectType("CouchbaseTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DrillTableDataset = new NamedObjectType("DrillTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            EloquaObjectDataset = new NamedObjectType("EloquaObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GoogleBigQueryObjectDataset = new NamedObjectType("GoogleBigQueryObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GreenplumTableDataset = new NamedObjectType("GreenplumTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HBaseObjectDataset = new NamedObjectType("HBaseObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HiveObjectDataset = new NamedObjectType("HiveObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HubspotObjectDataset = new NamedObjectType("HubspotObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ImpalaObjectDataset = new NamedObjectType("ImpalaObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            JiraObjectDataset = new NamedObjectType("JiraObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MagentoObjectDataset = new NamedObjectType("MagentoObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MariaDBTableDataset = new NamedObjectType("MariaDBTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            MarketoObjectDataset = new NamedObjectType("MarketoObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PaypalObjectDataset = new NamedObjectType("PaypalObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PhoenixObjectDataset = new NamedObjectType("PhoenixObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            PrestoObjectDataset = new NamedObjectType("PrestoObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            QuickBooksObjectDataset = new NamedObjectType("QuickBooksObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ServiceNowObjectDataset = new NamedObjectType("ServiceNowObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ShopifyObjectDataset = new NamedObjectType("ShopifyObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SparkObjectDataset = new NamedObjectType("SparkObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SquareObjectDataset = new NamedObjectType("SquareObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            XeroObjectDataset = new NamedObjectType("XeroObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ZohoObjectDataset = new NamedObjectType("ZohoObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            NetezzaTableDataset = new NamedObjectType("NetezzaTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            VerticaTableDataset = new NamedObjectType("VerticaTableDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SalesforceMarketingCloudObjectDataset = new NamedObjectType("SalesforceMarketingCloudObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ResponsysObjectDataset = new NamedObjectType("ResponsysObjectDataset", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            Pipeline = new NamedObjectType("Pipeline", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("activities", new TypedArrayType(new NamedObjectType("activities", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("concurrency", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(new NamedObjectType("annotations", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Activity = new NamedObjectType("Activity", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dependsOn", new TypedArrayType(new NamedObjectType("dependsOn", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ActivityDependency = new NamedObjectType("ActivityDependency", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("activity", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("dependencyConditions", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ControlActivity = new NamedObjectType("ControlActivity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ExecutePipelineActivity = new NamedObjectType("ExecutePipelineActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ExecutePipelineActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ExecutePipelineActivityTypeProperties = new NamedObjectType("ExecutePipelineActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("pipeline", () => PipelineReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("waitOnCompletion", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PipelineReference = new NamedObjectType("PipelineReference", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IfConditionActivity = new NamedObjectType("IfConditionActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => IfConditionActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            IfConditionActivityTypeProperties = new NamedObjectType("IfConditionActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("expression", () => Expression, TypePropertyFlags.Required), new TypeProperty("ifTrueActivities", new TypedArrayType(new NamedObjectType("ifTrueActivities", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("ifFalseActivities", new TypedArrayType(new NamedObjectType("ifFalseActivities", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Expression = new NamedObjectType("Expression", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ForEachActivity = new NamedObjectType("ForEachActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ForEachActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ForEachActivityTypeProperties = new NamedObjectType("ForEachActivityTypeProperties", new ITypeProperty[]{new TypeProperty("isSequential", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("batchCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("items", () => Expression, TypePropertyFlags.Required), new TypeProperty("activities", new TypedArrayType(new NamedObjectType("activities", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WaitActivity = new NamedObjectType("WaitActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WaitActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WaitActivityTypeProperties = new NamedObjectType("WaitActivityTypeProperties", new ITypeProperty[]{new TypeProperty("waitTimeInSeconds", LanguageConstants.Int, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            UntilActivity = new NamedObjectType("UntilActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => UntilActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            UntilActivityTypeProperties = new NamedObjectType("UntilActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("expression", () => Expression, TypePropertyFlags.Required), new TypeProperty("timeout", new NamedObjectType("timeout", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("activities", new TypedArrayType(new NamedObjectType("activities", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FilterActivity = new NamedObjectType("FilterActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FilterActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            FilterActivityTypeProperties = new NamedObjectType("FilterActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("items", () => Expression, TypePropertyFlags.Required), new LazyTypeProperty("condition", () => Expression, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ExecutionActivity = new NamedObjectType("ExecutionActivity", new ITypeProperty[]{new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ActivityPolicy = new NamedObjectType("ActivityPolicy", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("timeout", new NamedObjectType("timeout", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("retry", new NamedObjectType("retry", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("retryIntervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secureOutput", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CopyActivity = new NamedObjectType("CopyActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CopyActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("inputs", new TypedArrayType(new NamedObjectType("inputs", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("outputs", new TypedArrayType(new NamedObjectType("outputs", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CopyActivityTypeProperties = new NamedObjectType("CopyActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("source", () => CopySource, TypePropertyFlags.Required), new LazyTypeProperty("sink", () => CopySink, TypePropertyFlags.Required), new TypeProperty("translator", new NamedObjectType("translator", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableStaging", new NamedObjectType("enableStaging", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("stagingSettings", () => StagingSettings, TypePropertyFlags.None), new TypeProperty("parallelCopies", new NamedObjectType("parallelCopies", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("cloudDataMovementUnits", new NamedObjectType("cloudDataMovementUnits", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableSkipIncompatibleRow", new NamedObjectType("enableSkipIncompatibleRow", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("redirectIncompatibleRowSettings", () => RedirectIncompatibleRowSettings, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CopySource = new NamedObjectType("CopySource", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sourceRetryCount", new NamedObjectType("sourceRetryCount", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sourceRetryWait", new NamedObjectType("sourceRetryWait", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CopySink = new NamedObjectType("CopySink", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("writeBatchSize", new NamedObjectType("writeBatchSize", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("writeBatchTimeout", new NamedObjectType("writeBatchTimeout", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sinkRetryCount", new NamedObjectType("sinkRetryCount", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sinkRetryWait", new NamedObjectType("sinkRetryWait", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StagingSettings = new NamedObjectType("StagingSettings", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("enableCompression", new NamedObjectType("enableCompression", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RedirectIncompatibleRowSettings = new NamedObjectType("RedirectIncompatibleRowSettings", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("linkedServiceName", new NamedObjectType("linkedServiceName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("path", new NamedObjectType("path", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatasetReference = new NamedObjectType("DatasetReference", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightHiveActivity = new NamedObjectType("HDInsightHiveActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightHiveActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightHiveActivityTypeProperties = new NamedObjectType("HDInsightHiveActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storageLinkedServices", new TypedArrayType(new NamedObjectType("storageLinkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(new NamedObjectType("arguments", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("getDebugInfo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scriptPath", new NamedObjectType("scriptPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightPigActivity = new NamedObjectType("HDInsightPigActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightPigActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightPigActivityTypeProperties = new NamedObjectType("HDInsightPigActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storageLinkedServices", new TypedArrayType(new NamedObjectType("storageLinkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(new NamedObjectType("arguments", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("getDebugInfo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scriptPath", new NamedObjectType("scriptPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightMapReduceActivity = new NamedObjectType("HDInsightMapReduceActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightMapReduceActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightMapReduceActivityTypeProperties = new NamedObjectType("HDInsightMapReduceActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storageLinkedServices", new TypedArrayType(new NamedObjectType("storageLinkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(new NamedObjectType("arguments", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("getDebugInfo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("className", new NamedObjectType("className", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("jarFilePath", new NamedObjectType("jarFilePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("jarLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("jarLibs", new TypedArrayType(new NamedObjectType("jarLibs", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightStreamingActivity = new NamedObjectType("HDInsightStreamingActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightStreamingActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightStreamingActivityTypeProperties = new NamedObjectType("HDInsightStreamingActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storageLinkedServices", new TypedArrayType(new NamedObjectType("storageLinkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(new NamedObjectType("arguments", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("getDebugInfo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("mapper", new NamedObjectType("mapper", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("reducer", new NamedObjectType("reducer", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("input", new NamedObjectType("input", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("output", new NamedObjectType("output", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("filePaths", new TypedArrayType(new NamedObjectType("filePaths", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.Required), new LazyTypeProperty("fileLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("combiner", new NamedObjectType("combiner", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("commandEnvironment", new TypedArrayType(new NamedObjectType("commandEnvironment", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HDInsightSparkActivity = new NamedObjectType("HDInsightSparkActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightSparkActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            HDInsightSparkActivityTypeProperties = new NamedObjectType("HDInsightSparkActivityTypeProperties", new ITypeProperty[]{new TypeProperty("rootPath", new NamedObjectType("rootPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("entryFilePath", new NamedObjectType("entryFilePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("arguments", new TypedArrayType(new NamedObjectType("arguments", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("getDebugInfo", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sparkJobLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("className", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyUser", new NamedObjectType("proxyUser", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("sparkConfig", new NamedObjectType("sparkConfig", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ExecuteSSISPackageActivity = new NamedObjectType("ExecuteSSISPackageActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ExecuteSSISPackageActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ExecuteSSISPackageActivityTypeProperties = new NamedObjectType("ExecuteSSISPackageActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("packageLocation", () => SSISPackageLocation, TypePropertyFlags.Required), new TypeProperty("runtime", new NamedObjectType("runtime", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("loggingLevel", new NamedObjectType("loggingLevel", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("environmentPath", new NamedObjectType("environmentPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("executionCredential", () => SSISExecutionCredential, TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.Required), new TypeProperty("projectParameters", new NamedObjectType("projectParameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("packageParameters", new NamedObjectType("packageParameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("projectConnectionManagers", new NamedObjectType("projectConnectionManagers", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("packageConnectionManagers", new NamedObjectType("packageConnectionManagers", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("propertyOverrides", new NamedObjectType("propertyOverrides", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("logLocation", () => SSISLogLocation, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SSISPackageLocation = new NamedObjectType("SSISPackageLocation", new ITypeProperty[]{new TypeProperty("packagePath", new NamedObjectType("packagePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("typeProperties", () => SSISPackageLocationTypeProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SSISPackageLocationTypeProperties = new NamedObjectType("SSISPackageLocationTypeProperties", new ITypeProperty[]{new LazyTypeProperty("packagePassword", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("accessCredential", () => SSISAccessCredential, TypePropertyFlags.None), new TypeProperty("configurationPath", new NamedObjectType("configurationPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SSISAccessCredential = new NamedObjectType("SSISAccessCredential", new ITypeProperty[]{new TypeProperty("domain", new NamedObjectType("domain", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SSISExecutionCredential = new NamedObjectType("SSISExecutionCredential", new ITypeProperty[]{new TypeProperty("domain", new NamedObjectType("domain", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("userName", new NamedObjectType("userName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecureString, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SSISExecutionParameter = new NamedObjectType("SSISExecutionParameter", new ITypeProperty[]{new TypeProperty("value", new NamedObjectType("value", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SSISPropertyOverride = new NamedObjectType("SSISPropertyOverride", new ITypeProperty[]{new TypeProperty("value", new NamedObjectType("value", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("isSensitive", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SSISLogLocation = new NamedObjectType("SSISLogLocation", new ITypeProperty[]{new TypeProperty("logPath", new NamedObjectType("logPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("typeProperties", () => SSISLogLocationTypeProperties, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SSISLogLocationTypeProperties = new NamedObjectType("SSISLogLocationTypeProperties", new ITypeProperty[]{new LazyTypeProperty("accessCredential", () => SSISAccessCredential, TypePropertyFlags.None), new TypeProperty("logRefreshInterval", new NamedObjectType("logRefreshInterval", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CustomActivity = new NamedObjectType("CustomActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CustomActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            CustomActivityTypeProperties = new NamedObjectType("CustomActivityTypeProperties", new ITypeProperty[]{new TypeProperty("command", new NamedObjectType("command", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("resourceLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("folderPath", new NamedObjectType("folderPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("referenceObjects", () => CustomActivityReferenceObject, TypePropertyFlags.None), new TypeProperty("extendedProperties", new NamedObjectType("extendedProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CustomActivityReferenceObject = new NamedObjectType("CustomActivityReferenceObject", new ITypeProperty[]{new TypeProperty("linkedServices", new TypedArrayType(new NamedObjectType("linkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("datasets", new TypedArrayType(new NamedObjectType("datasets", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlServerStoredProcedureActivity = new NamedObjectType("SqlServerStoredProcedureActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerStoredProcedureActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SqlServerStoredProcedureActivityTypeProperties = new NamedObjectType("SqlServerStoredProcedureActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storedProcedureName", new NamedObjectType("storedProcedureName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("storedProcedureParameters", new NamedObjectType("storedProcedureParameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StoredProcedureParameter = new NamedObjectType("StoredProcedureParameter", new ITypeProperty[]{new TypeProperty("value", new NamedObjectType("value", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("type", new NamedObjectType("type", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            LookupActivity = new NamedObjectType("LookupActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => LookupActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            LookupActivityTypeProperties = new NamedObjectType("LookupActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("source", () => CopySource, TypePropertyFlags.Required), new LazyTypeProperty("dataset", () => DatasetReference, TypePropertyFlags.Required), new TypeProperty("firstRowOnly", new NamedObjectType("firstRowOnly", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WebActivity = new NamedObjectType("WebActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            WebActivityTypeProperties = new NamedObjectType("WebActivityTypeProperties", new ITypeProperty[]{new TypeProperty("method", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("url", new NamedObjectType("url", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("headers", new NamedObjectType("headers", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("body", new NamedObjectType("body", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("authentication", () => WebActivityAuthentication, TypePropertyFlags.None), new TypeProperty("datasets", new TypedArrayType(new NamedObjectType("datasets", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("linkedServices", new TypedArrayType(new NamedObjectType("linkedServices", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WebActivityAuthentication = new NamedObjectType("WebActivityAuthentication", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("pfx", () => SecureString, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecureString, TypePropertyFlags.None), new TypeProperty("resource", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            GetMetadataActivity = new NamedObjectType("GetMetadataActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GetMetadataActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GetMetadataActivityTypeProperties = new NamedObjectType("GetMetadataActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("dataset", () => DatasetReference, TypePropertyFlags.Required), new TypeProperty("fieldList", new TypedArrayType(new NamedObjectType("fieldList", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureMLBatchExecutionActivity = new NamedObjectType("AzureMLBatchExecutionActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLBatchExecutionActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMLBatchExecutionActivityTypeProperties = new NamedObjectType("AzureMLBatchExecutionActivityTypeProperties", new ITypeProperty[]{new TypeProperty("globalParameters", new NamedObjectType("globalParameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("webServiceOutputs", new NamedObjectType("webServiceOutputs", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("webServiceInputs", new NamedObjectType("webServiceInputs", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureMLWebServiceFile = new NamedObjectType("AzureMLWebServiceFile", new ITypeProperty[]{new TypeProperty("filePath", new NamedObjectType("filePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMLUpdateResourceActivity = new NamedObjectType("AzureMLUpdateResourceActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLUpdateResourceActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureMLUpdateResourceActivityTypeProperties = new NamedObjectType("AzureMLUpdateResourceActivityTypeProperties", new ITypeProperty[]{new TypeProperty("trainedModelName", new NamedObjectType("trainedModelName", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("trainedModelLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("trainedModelFilePath", new NamedObjectType("trainedModelFilePath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DataLakeAnalyticsUSQLActivity = new NamedObjectType("DataLakeAnalyticsUSQLActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DataLakeAnalyticsUSQLActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DataLakeAnalyticsUSQLActivityTypeProperties = new NamedObjectType("DataLakeAnalyticsUSQLActivityTypeProperties", new ITypeProperty[]{new TypeProperty("scriptPath", new NamedObjectType("scriptPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("degreeOfParallelism", new NamedObjectType("degreeOfParallelism", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("priority", new NamedObjectType("priority", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("runtimeVersion", new NamedObjectType("runtimeVersion", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("compilationMode", new NamedObjectType("compilationMode", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatabricksNotebookActivity = new NamedObjectType("DatabricksNotebookActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DatabricksNotebookActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DatabricksNotebookActivityTypeProperties = new NamedObjectType("DatabricksNotebookActivityTypeProperties", new ITypeProperty[]{new TypeProperty("notebookPath", new NamedObjectType("notebookPath", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.Required), new TypeProperty("baseParameters", new NamedObjectType("baseParameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Trigger = new NamedObjectType("Trigger", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MultiplePipelineTrigger = new NamedObjectType("MultiplePipelineTrigger", new ITypeProperty[]{new TypeProperty("pipelines", new TypedArrayType(new NamedObjectType("pipelines", new ITypeProperty[]{}, null, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            TriggerPipelineReference = new NamedObjectType("TriggerPipelineReference", new ITypeProperty[]{new LazyTypeProperty("pipelineReference", () => PipelineReference, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new NamedObjectType("additionalProperties", new ITypeProperty[]{}, null, TypePropertyFlags.None), TypePropertyFlags.None), TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceType_factories = new ResourceType("Microsoft.DataFactory/factories", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, LanguageConstants.String, TypePropertyFlags.None), TypePropertyFlags.None), new LazyTypeProperty("identity", () => FactoryIdentity, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FactoryProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories);
            ResourceType_factories_integrationRuntimes = new ResourceType("Microsoft.DataFactory/factories/integrationRuntimes", new ITypeProperty[]{new LazyTypeProperty("properties", () => IntegrationRuntime, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories_integrationRuntimes);
            ResourceType_factories_linkedservices = new ResourceType("Microsoft.DataFactory/factories/linkedservices", new ITypeProperty[]{new LazyTypeProperty("properties", () => LinkedService, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories_linkedservices);
            ResourceType_factories_datasets = new ResourceType("Microsoft.DataFactory/factories/datasets", new ITypeProperty[]{new LazyTypeProperty("properties", () => Dataset, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories_datasets);
            ResourceType_factories_pipelines = new ResourceType("Microsoft.DataFactory/factories/pipelines", new ITypeProperty[]{new LazyTypeProperty("properties", () => Pipeline, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories_pipelines);
            ResourceType_factories_triggers = new ResourceType("Microsoft.DataFactory/factories/triggers", new ITypeProperty[]{new LazyTypeProperty("properties", () => Trigger, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_factories_triggers);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_factories, () => InstanceLazy.Value.ResourceType_factories);
            registrar.RegisterType(ResourceTypeReference_factories_integrationRuntimes, () => InstanceLazy.Value.ResourceType_factories_integrationRuntimes);
            registrar.RegisterType(ResourceTypeReference_factories_linkedservices, () => InstanceLazy.Value.ResourceType_factories_linkedservices);
            registrar.RegisterType(ResourceTypeReference_factories_datasets, () => InstanceLazy.Value.ResourceType_factories_datasets);
            registrar.RegisterType(ResourceTypeReference_factories_pipelines, () => InstanceLazy.Value.ResourceType_factories_pipelines);
            registrar.RegisterType(ResourceTypeReference_factories_triggers, () => InstanceLazy.Value.ResourceType_factories_triggers);
        }
        private readonly ResourceType ResourceType_factories;
        private readonly ResourceType ResourceType_factories_integrationRuntimes;
        private readonly ResourceType ResourceType_factories_linkedservices;
        private readonly ResourceType ResourceType_factories_datasets;
        private readonly ResourceType ResourceType_factories_pipelines;
        private readonly ResourceType ResourceType_factories_triggers;
        private readonly TypeSymbol FactoryIdentity;
        private readonly TypeSymbol FactoryProperties;
        private readonly TypeSymbol FactoryVSTSConfiguration;
        private readonly TypeSymbol IntegrationRuntime;
        private readonly TypeSymbol ManagedIntegrationRuntime;
        private readonly TypeSymbol ManagedIntegrationRuntimeTypeProperties;
        private readonly TypeSymbol IntegrationRuntimeComputeProperties;
        private readonly TypeSymbol IntegrationRuntimeVNetProperties;
        private readonly TypeSymbol IntegrationRuntimeSsisProperties;
        private readonly TypeSymbol IntegrationRuntimeSsisCatalogInfo;
        private readonly TypeSymbol SecureString;
        private readonly TypeSymbol IntegrationRuntimeCustomSetupScriptProperties;
        private readonly TypeSymbol IntegrationRuntimeDataProxyProperties;
        private readonly TypeSymbol EntityReference;
        private readonly TypeSymbol SelfHostedIntegrationRuntime;
        private readonly TypeSymbol LinkedIntegrationRuntimeTypeProperties;
        private readonly TypeSymbol LinkedIntegrationRuntimeProperties;
        private readonly TypeSymbol LinkedIntegrationRuntimeKey;
        private readonly TypeSymbol LinkedIntegrationRuntimeRbac;
        private readonly TypeSymbol LinkedService;
        private readonly TypeSymbol IntegrationRuntimeReference;
        private readonly TypeSymbol ParameterSpecification;
        private readonly TypeSymbol AzureStorageLinkedService;
        private readonly TypeSymbol AzureStorageLinkedServiceTypeProperties;
        private readonly TypeSymbol SecretBase;
        private readonly TypeSymbol AzureKeyVaultSecretReference;
        private readonly TypeSymbol LinkedServiceReference;
        private readonly TypeSymbol AzureSqlDWLinkedService;
        private readonly TypeSymbol AzureSqlDWLinkedServiceTypeProperties;
        private readonly TypeSymbol SqlServerLinkedService;
        private readonly TypeSymbol SqlServerLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureSqlDatabaseLinkedService;
        private readonly TypeSymbol AzureSqlDatabaseLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureBatchLinkedService;
        private readonly TypeSymbol AzureBatchLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureKeyVaultLinkedService;
        private readonly TypeSymbol AzureKeyVaultLinkedServiceTypeProperties;
        private readonly TypeSymbol CosmosDbLinkedService;
        private readonly TypeSymbol CosmosDbLinkedServiceTypeProperties;
        private readonly TypeSymbol DynamicsLinkedService;
        private readonly TypeSymbol DynamicsLinkedServiceTypeProperties;
        private readonly TypeSymbol HDInsightLinkedService;
        private readonly TypeSymbol HDInsightLinkedServiceTypeProperties;
        private readonly TypeSymbol FileServerLinkedService;
        private readonly TypeSymbol FileServerLinkedServiceTypeProperties;
        private readonly TypeSymbol OracleLinkedService;
        private readonly TypeSymbol OracleLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureMySqlLinkedService;
        private readonly TypeSymbol AzureMySqlLinkedServiceTypeProperties;
        private readonly TypeSymbol MySqlLinkedService;
        private readonly TypeSymbol MySqlLinkedServiceTypeProperties;
        private readonly TypeSymbol PostgreSqlLinkedService;
        private readonly TypeSymbol PostgreSqlLinkedServiceTypeProperties;
        private readonly TypeSymbol SybaseLinkedService;
        private readonly TypeSymbol SybaseLinkedServiceTypeProperties;
        private readonly TypeSymbol Db2LinkedService;
        private readonly TypeSymbol Db2LinkedServiceTypeProperties;
        private readonly TypeSymbol TeradataLinkedService;
        private readonly TypeSymbol TeradataLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureMLLinkedService;
        private readonly TypeSymbol AzureMLLinkedServiceTypeProperties;
        private readonly TypeSymbol OdbcLinkedService;
        private readonly TypeSymbol OdbcLinkedServiceTypeProperties;
        private readonly TypeSymbol HdfsLinkedService;
        private readonly TypeSymbol HdfsLinkedServiceTypeProperties;
        private readonly TypeSymbol ODataLinkedService;
        private readonly TypeSymbol ODataLinkedServiceTypeProperties;
        private readonly TypeSymbol WebLinkedService;
        private readonly TypeSymbol WebLinkedServiceTypeProperties;
        private readonly TypeSymbol WebAnonymousAuthentication;
        private readonly TypeSymbol WebBasicAuthentication;
        private readonly TypeSymbol WebClientCertificateAuthentication;
        private readonly TypeSymbol CassandraLinkedService;
        private readonly TypeSymbol CassandraLinkedServiceTypeProperties;
        private readonly TypeSymbol MongoDbLinkedService;
        private readonly TypeSymbol MongoDbLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDataLakeStoreLinkedService;
        private readonly TypeSymbol AzureDataLakeStoreLinkedServiceTypeProperties;
        private readonly TypeSymbol SalesforceLinkedService;
        private readonly TypeSymbol SalesforceLinkedServiceTypeProperties;
        private readonly TypeSymbol SapCloudForCustomerLinkedService;
        private readonly TypeSymbol SapCloudForCustomerLinkedServiceTypeProperties;
        private readonly TypeSymbol SapEccLinkedService;
        private readonly TypeSymbol SapEccLinkedServiceTypeProperties;
        private readonly TypeSymbol AmazonS3LinkedService;
        private readonly TypeSymbol AmazonS3LinkedServiceTypeProperties;
        private readonly TypeSymbol AmazonRedshiftLinkedService;
        private readonly TypeSymbol AmazonRedshiftLinkedServiceTypeProperties;
        private readonly TypeSymbol CustomDataSourceLinkedService;
        private readonly TypeSymbol AzureSearchLinkedService;
        private readonly TypeSymbol AzureSearchLinkedServiceTypeProperties;
        private readonly TypeSymbol HttpLinkedService;
        private readonly TypeSymbol HttpLinkedServiceTypeProperties;
        private readonly TypeSymbol FtpServerLinkedService;
        private readonly TypeSymbol FtpServerLinkedServiceTypeProperties;
        private readonly TypeSymbol SftpServerLinkedService;
        private readonly TypeSymbol SftpServerLinkedServiceTypeProperties;
        private readonly TypeSymbol SapBWLinkedService;
        private readonly TypeSymbol SapBWLinkedServiceTypeProperties;
        private readonly TypeSymbol SapHanaLinkedService;
        private readonly TypeSymbol SapHanaLinkedServiceProperties;
        private readonly TypeSymbol AmazonMWSLinkedService;
        private readonly TypeSymbol AmazonMWSLinkedServiceTypeProperties;
        private readonly TypeSymbol AzurePostgreSqlLinkedService;
        private readonly TypeSymbol AzurePostgreSqlLinkedServiceTypeProperties;
        private readonly TypeSymbol ConcurLinkedService;
        private readonly TypeSymbol ConcurLinkedServiceTypeProperties;
        private readonly TypeSymbol CouchbaseLinkedService;
        private readonly TypeSymbol CouchbaseLinkedServiceTypeProperties;
        private readonly TypeSymbol DrillLinkedService;
        private readonly TypeSymbol DrillLinkedServiceTypeProperties;
        private readonly TypeSymbol EloquaLinkedService;
        private readonly TypeSymbol EloquaLinkedServiceTypeProperties;
        private readonly TypeSymbol GoogleBigQueryLinkedService;
        private readonly TypeSymbol GoogleBigQueryLinkedServiceTypeProperties;
        private readonly TypeSymbol GreenplumLinkedService;
        private readonly TypeSymbol GreenplumLinkedServiceTypeProperties;
        private readonly TypeSymbol HBaseLinkedService;
        private readonly TypeSymbol HBaseLinkedServiceTypeProperties;
        private readonly TypeSymbol HiveLinkedService;
        private readonly TypeSymbol HiveLinkedServiceTypeProperties;
        private readonly TypeSymbol HubspotLinkedService;
        private readonly TypeSymbol HubspotLinkedServiceTypeProperties;
        private readonly TypeSymbol ImpalaLinkedService;
        private readonly TypeSymbol ImpalaLinkedServiceTypeProperties;
        private readonly TypeSymbol JiraLinkedService;
        private readonly TypeSymbol JiraLinkedServiceTypeProperties;
        private readonly TypeSymbol MagentoLinkedService;
        private readonly TypeSymbol MagentoLinkedServiceTypeProperties;
        private readonly TypeSymbol MariaDBLinkedService;
        private readonly TypeSymbol MariaDBLinkedServiceTypeProperties;
        private readonly TypeSymbol MarketoLinkedService;
        private readonly TypeSymbol MarketoLinkedServiceTypeProperties;
        private readonly TypeSymbol PaypalLinkedService;
        private readonly TypeSymbol PaypalLinkedServiceTypeProperties;
        private readonly TypeSymbol PhoenixLinkedService;
        private readonly TypeSymbol PhoenixLinkedServiceTypeProperties;
        private readonly TypeSymbol PrestoLinkedService;
        private readonly TypeSymbol PrestoLinkedServiceTypeProperties;
        private readonly TypeSymbol QuickBooksLinkedService;
        private readonly TypeSymbol QuickBooksLinkedServiceTypeProperties;
        private readonly TypeSymbol ServiceNowLinkedService;
        private readonly TypeSymbol ServiceNowLinkedServiceTypeProperties;
        private readonly TypeSymbol ShopifyLinkedService;
        private readonly TypeSymbol ShopifyLinkedServiceTypeProperties;
        private readonly TypeSymbol SparkLinkedService;
        private readonly TypeSymbol SparkLinkedServiceTypeProperties;
        private readonly TypeSymbol SquareLinkedService;
        private readonly TypeSymbol SquareLinkedServiceTypeProperties;
        private readonly TypeSymbol XeroLinkedService;
        private readonly TypeSymbol XeroLinkedServiceTypeProperties;
        private readonly TypeSymbol ZohoLinkedService;
        private readonly TypeSymbol ZohoLinkedServiceTypeProperties;
        private readonly TypeSymbol VerticaLinkedService;
        private readonly TypeSymbol VerticaLinkedServiceTypeProperties;
        private readonly TypeSymbol NetezzaLinkedService;
        private readonly TypeSymbol NetezzaLinkedServiceTypeProperties;
        private readonly TypeSymbol SalesforceMarketingCloudLinkedService;
        private readonly TypeSymbol SalesforceMarketingCloudLinkedServiceTypeProperties;
        private readonly TypeSymbol HDInsightOnDemandLinkedService;
        private readonly TypeSymbol HDInsightOnDemandLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDataLakeAnalyticsLinkedService;
        private readonly TypeSymbol AzureDataLakeAnalyticsLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDatabricksLinkedService;
        private readonly TypeSymbol AzureDatabricksLinkedServiceTypeProperties;
        private readonly TypeSymbol ResponsysLinkedService;
        private readonly TypeSymbol ResponsysLinkedServiceTypeProperties;
        private readonly TypeSymbol Dataset;
        private readonly TypeSymbol AmazonS3Dataset;
        private readonly TypeSymbol AmazonS3DatasetTypeProperties;
        private readonly TypeSymbol DatasetStorageFormat;
        private readonly TypeSymbol DatasetCompression;
        private readonly TypeSymbol DatasetBZip2Compression;
        private readonly TypeSymbol DatasetGZipCompression;
        private readonly TypeSymbol DatasetDeflateCompression;
        private readonly TypeSymbol DatasetZipDeflateCompression;
        private readonly TypeSymbol AzureBlobDataset;
        private readonly TypeSymbol AzureBlobDatasetTypeProperties;
        private readonly TypeSymbol AzureTableDataset;
        private readonly TypeSymbol AzureTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSqlTableDataset;
        private readonly TypeSymbol AzureSqlTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSqlDWTableDataset;
        private readonly TypeSymbol AzureSqlDWTableDatasetTypeProperties;
        private readonly TypeSymbol CassandraTableDataset;
        private readonly TypeSymbol CassandraTableDatasetTypeProperties;
        private readonly TypeSymbol DocumentDbCollectionDataset;
        private readonly TypeSymbol DocumentDbCollectionDatasetTypeProperties;
        private readonly TypeSymbol DynamicsEntityDataset;
        private readonly TypeSymbol DynamicsEntityDatasetTypeProperties;
        private readonly TypeSymbol AzureDataLakeStoreDataset;
        private readonly TypeSymbol AzureDataLakeStoreDatasetTypeProperties;
        private readonly TypeSymbol FileShareDataset;
        private readonly TypeSymbol FileShareDatasetTypeProperties;
        private readonly TypeSymbol MongoDbCollectionDataset;
        private readonly TypeSymbol MongoDbCollectionDatasetTypeProperties;
        private readonly TypeSymbol ODataResourceDataset;
        private readonly TypeSymbol ODataResourceDatasetTypeProperties;
        private readonly TypeSymbol OracleTableDataset;
        private readonly TypeSymbol OracleTableDatasetTypeProperties;
        private readonly TypeSymbol AzureMySqlTableDataset;
        private readonly TypeSymbol AzureMySqlTableDatasetTypeProperties;
        private readonly TypeSymbol RelationalTableDataset;
        private readonly TypeSymbol RelationalTableDatasetTypeProperties;
        private readonly TypeSymbol SalesforceObjectDataset;
        private readonly TypeSymbol SalesforceObjectDatasetTypeProperties;
        private readonly TypeSymbol SapCloudForCustomerResourceDataset;
        private readonly TypeSymbol SapCloudForCustomerResourceDatasetTypeProperties;
        private readonly TypeSymbol SapEccResourceDataset;
        private readonly TypeSymbol SapEccResourceDatasetTypeProperties;
        private readonly TypeSymbol SqlServerTableDataset;
        private readonly TypeSymbol SqlServerTableDatasetTypeProperties;
        private readonly TypeSymbol WebTableDataset;
        private readonly TypeSymbol WebTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSearchIndexDataset;
        private readonly TypeSymbol AzureSearchIndexDatasetTypeProperties;
        private readonly TypeSymbol HttpDataset;
        private readonly TypeSymbol HttpDatasetTypeProperties;
        private readonly TypeSymbol AmazonMWSObjectDataset;
        private readonly TypeSymbol AzurePostgreSqlTableDataset;
        private readonly TypeSymbol ConcurObjectDataset;
        private readonly TypeSymbol CouchbaseTableDataset;
        private readonly TypeSymbol DrillTableDataset;
        private readonly TypeSymbol EloquaObjectDataset;
        private readonly TypeSymbol GoogleBigQueryObjectDataset;
        private readonly TypeSymbol GreenplumTableDataset;
        private readonly TypeSymbol HBaseObjectDataset;
        private readonly TypeSymbol HiveObjectDataset;
        private readonly TypeSymbol HubspotObjectDataset;
        private readonly TypeSymbol ImpalaObjectDataset;
        private readonly TypeSymbol JiraObjectDataset;
        private readonly TypeSymbol MagentoObjectDataset;
        private readonly TypeSymbol MariaDBTableDataset;
        private readonly TypeSymbol MarketoObjectDataset;
        private readonly TypeSymbol PaypalObjectDataset;
        private readonly TypeSymbol PhoenixObjectDataset;
        private readonly TypeSymbol PrestoObjectDataset;
        private readonly TypeSymbol QuickBooksObjectDataset;
        private readonly TypeSymbol ServiceNowObjectDataset;
        private readonly TypeSymbol ShopifyObjectDataset;
        private readonly TypeSymbol SparkObjectDataset;
        private readonly TypeSymbol SquareObjectDataset;
        private readonly TypeSymbol XeroObjectDataset;
        private readonly TypeSymbol ZohoObjectDataset;
        private readonly TypeSymbol NetezzaTableDataset;
        private readonly TypeSymbol VerticaTableDataset;
        private readonly TypeSymbol SalesforceMarketingCloudObjectDataset;
        private readonly TypeSymbol ResponsysObjectDataset;
        private readonly TypeSymbol Pipeline;
        private readonly TypeSymbol Activity;
        private readonly TypeSymbol ActivityDependency;
        private readonly TypeSymbol ControlActivity;
        private readonly TypeSymbol ExecutePipelineActivity;
        private readonly TypeSymbol ExecutePipelineActivityTypeProperties;
        private readonly TypeSymbol PipelineReference;
        private readonly TypeSymbol IfConditionActivity;
        private readonly TypeSymbol IfConditionActivityTypeProperties;
        private readonly TypeSymbol Expression;
        private readonly TypeSymbol ForEachActivity;
        private readonly TypeSymbol ForEachActivityTypeProperties;
        private readonly TypeSymbol WaitActivity;
        private readonly TypeSymbol WaitActivityTypeProperties;
        private readonly TypeSymbol UntilActivity;
        private readonly TypeSymbol UntilActivityTypeProperties;
        private readonly TypeSymbol FilterActivity;
        private readonly TypeSymbol FilterActivityTypeProperties;
        private readonly TypeSymbol ExecutionActivity;
        private readonly TypeSymbol ActivityPolicy;
        private readonly TypeSymbol CopyActivity;
        private readonly TypeSymbol CopyActivityTypeProperties;
        private readonly TypeSymbol CopySource;
        private readonly TypeSymbol CopySink;
        private readonly TypeSymbol StagingSettings;
        private readonly TypeSymbol RedirectIncompatibleRowSettings;
        private readonly TypeSymbol DatasetReference;
        private readonly TypeSymbol HDInsightHiveActivity;
        private readonly TypeSymbol HDInsightHiveActivityTypeProperties;
        private readonly TypeSymbol HDInsightPigActivity;
        private readonly TypeSymbol HDInsightPigActivityTypeProperties;
        private readonly TypeSymbol HDInsightMapReduceActivity;
        private readonly TypeSymbol HDInsightMapReduceActivityTypeProperties;
        private readonly TypeSymbol HDInsightStreamingActivity;
        private readonly TypeSymbol HDInsightStreamingActivityTypeProperties;
        private readonly TypeSymbol HDInsightSparkActivity;
        private readonly TypeSymbol HDInsightSparkActivityTypeProperties;
        private readonly TypeSymbol ExecuteSSISPackageActivity;
        private readonly TypeSymbol ExecuteSSISPackageActivityTypeProperties;
        private readonly TypeSymbol SSISPackageLocation;
        private readonly TypeSymbol SSISPackageLocationTypeProperties;
        private readonly TypeSymbol SSISAccessCredential;
        private readonly TypeSymbol SSISExecutionCredential;
        private readonly TypeSymbol SSISExecutionParameter;
        private readonly TypeSymbol SSISPropertyOverride;
        private readonly TypeSymbol SSISLogLocation;
        private readonly TypeSymbol SSISLogLocationTypeProperties;
        private readonly TypeSymbol CustomActivity;
        private readonly TypeSymbol CustomActivityTypeProperties;
        private readonly TypeSymbol CustomActivityReferenceObject;
        private readonly TypeSymbol SqlServerStoredProcedureActivity;
        private readonly TypeSymbol SqlServerStoredProcedureActivityTypeProperties;
        private readonly TypeSymbol StoredProcedureParameter;
        private readonly TypeSymbol LookupActivity;
        private readonly TypeSymbol LookupActivityTypeProperties;
        private readonly TypeSymbol WebActivity;
        private readonly TypeSymbol WebActivityTypeProperties;
        private readonly TypeSymbol WebActivityAuthentication;
        private readonly TypeSymbol GetMetadataActivity;
        private readonly TypeSymbol GetMetadataActivityTypeProperties;
        private readonly TypeSymbol AzureMLBatchExecutionActivity;
        private readonly TypeSymbol AzureMLBatchExecutionActivityTypeProperties;
        private readonly TypeSymbol AzureMLWebServiceFile;
        private readonly TypeSymbol AzureMLUpdateResourceActivity;
        private readonly TypeSymbol AzureMLUpdateResourceActivityTypeProperties;
        private readonly TypeSymbol DataLakeAnalyticsUSQLActivity;
        private readonly TypeSymbol DataLakeAnalyticsUSQLActivityTypeProperties;
        private readonly TypeSymbol DatabricksNotebookActivity;
        private readonly TypeSymbol DatabricksNotebookActivityTypeProperties;
        private readonly TypeSymbol Trigger;
        private readonly TypeSymbol MultiplePipelineTrigger;
        private readonly TypeSymbol TriggerPipelineReference;
    }
}
