// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DataFactory_2017_09_01_preview
    {
        private const string ProviderNamespace = "Microsoft.DataFactory";
        private const string ApiVersion = "2017-09-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_factories = new ResourceTypeReference(ProviderNamespace, new[]{"factories"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_integrationRuntimes = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "integrationRuntimes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_linkedservices = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "linkedservices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_datasets = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "datasets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_pipelines = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "pipelines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_factories_triggers = new ResourceTypeReference(ProviderNamespace, new[]{"factories", "triggers"}, ApiVersion);
        private static Lazy<Microsoft_DataFactory_2017_09_01_preview> InstanceLazy = new Lazy<Microsoft_DataFactory_2017_09_01_preview>(() => new Microsoft_DataFactory_2017_09_01_preview());
        private Microsoft_DataFactory_2017_09_01_preview()
        {
            FactoryIdentity = new NamedObjectType("FactoryIdentity", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.Required), new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            FactoryProperties = new NamedObjectType("FactoryProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("vstsConfiguration", () => FactoryVSTSConfiguration, TypePropertyFlags.None)}, null);
            FactoryVSTSConfiguration = new NamedObjectType("FactoryVSTSConfiguration", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("projectName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("repositoryName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("collaborationBranch", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("rootFolder", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastCommitId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IntegrationRuntime = new DiscriminatedObjectType("IntegrationRuntime", "type", new ITypeProperty[]{new LazyTypeProperty("IntegrationRuntime", () => ManagedIntegrationRuntime, TypePropertyFlags.None), new LazyTypeProperty("IntegrationRuntime", () => SelfHostedIntegrationRuntime, TypePropertyFlags.None)});
            ManagedIntegrationRuntime = new NamedObjectType("ManagedIntegrationRuntime", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Initial'"), new StringLiteralType("'Stopped'"), new StringLiteralType("'Started'"), new StringLiteralType("'Starting'"), new StringLiteralType("'Stopping'"), new StringLiteralType("'NeedRegistration'"), new StringLiteralType("'Online'"), new StringLiteralType("'Limited'"), new StringLiteralType("'Offline'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("typeProperties", () => ManagedIntegrationRuntimeTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Managed'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ManagedIntegrationRuntimeTypeProperties = new NamedObjectType("ManagedIntegrationRuntimeTypeProperties", new ITypeProperty[]{new LazyTypeProperty("computeProperties", () => IntegrationRuntimeComputeProperties, TypePropertyFlags.None), new LazyTypeProperty("ssisProperties", () => IntegrationRuntimeSsisProperties, TypePropertyFlags.None)}, null);
            IntegrationRuntimeComputeProperties = new NamedObjectType("IntegrationRuntimeComputeProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nodeSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("numberOfNodes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxParallelExecutionsPerNode", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("vNetProperties", () => IntegrationRuntimeVNetProperties, TypePropertyFlags.None)}, null);
            IntegrationRuntimeVNetProperties = new NamedObjectType("IntegrationRuntimeVNetProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("vNetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnet", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IntegrationRuntimeSsisProperties = new NamedObjectType("IntegrationRuntimeSsisProperties", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("catalogInfo", () => IntegrationRuntimeSsisCatalogInfo, TypePropertyFlags.None), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'BasePrice'"), new StringLiteralType("'LicenseIncluded'")), TypePropertyFlags.None), new LazyTypeProperty("customSetupScriptProperties", () => IntegrationRuntimeCustomSetupScriptProperties, TypePropertyFlags.None), new LazyTypeProperty("dataProxyProperties", () => IntegrationRuntimeDataProxyProperties, TypePropertyFlags.None), new TypeProperty("edition", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Enterprise'")), TypePropertyFlags.None)}, null);
            IntegrationRuntimeSsisCatalogInfo = new NamedObjectType("IntegrationRuntimeSsisCatalogInfo", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("catalogServerEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("catalogAdminUserName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("catalogAdminPassword", () => SecureString, TypePropertyFlags.None), new TypeProperty("catalogPricingTier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecureString = new NamedObjectType("SecureString", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SecureString'"), TypePropertyFlags.Required)}, null);
            IntegrationRuntimeCustomSetupScriptProperties = new NamedObjectType("IntegrationRuntimeCustomSetupScriptProperties", new ITypeProperty[]{new TypeProperty("blobContainerUri", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sasToken", () => SecureString, TypePropertyFlags.None)}, null);
            IntegrationRuntimeDataProxyProperties = new NamedObjectType("IntegrationRuntimeDataProxyProperties", new ITypeProperty[]{new LazyTypeProperty("connectVia", () => EntityReference, TypePropertyFlags.None), new LazyTypeProperty("stagingLinkedService", () => EntityReference, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EntityReference = new NamedObjectType("EntityReference", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'IntegrationRuntimeReference'"), new StringLiteralType("'LinkedServiceReference'")), TypePropertyFlags.None), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SelfHostedIntegrationRuntime = new NamedObjectType("SelfHostedIntegrationRuntime", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => LinkedIntegrationRuntimeTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SelfHosted'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LinkedIntegrationRuntimeTypeProperties = new NamedObjectType("LinkedIntegrationRuntimeTypeProperties", new ITypeProperty[]{new LazyTypeProperty("linkedInfo", () => LinkedIntegrationRuntimeProperties, TypePropertyFlags.None)}, null);
            LinkedIntegrationRuntimeProperties = LanguageConstants.Any;
            LinkedIntegrationRuntimeKey = new NamedObjectType("LinkedIntegrationRuntimeKey", new ITypeProperty[]{new LazyTypeProperty("key", () => SecureString, TypePropertyFlags.Required), new TypeProperty("authorizationType", new StringLiteralType("'Key'"), TypePropertyFlags.Required)}, null);
            LinkedIntegrationRuntimeRbac = new NamedObjectType("LinkedIntegrationRuntimeRbac", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("authorizationType", new StringLiteralType("'RBAC'"), TypePropertyFlags.Required)}, null);
            LinkedService = new DiscriminatedObjectType("LinkedService", "type", new ITypeProperty[]{new LazyTypeProperty("LinkedService", () => AzureStorageLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureSqlDWLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SqlServerLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureSqlDatabaseLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureBatchLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureKeyVaultLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => CosmosDbLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => DynamicsLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HDInsightLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => FileServerLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => OracleLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureMySqlLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => MySqlLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => PostgreSqlLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SybaseLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => Db2LinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => TeradataLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureMLLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => OdbcLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HdfsLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ODataLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => WebLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => CassandraLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => MongoDbLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureDataLakeStoreLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SalesforceLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SapCloudForCustomerLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SapEccLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AmazonS3LinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AmazonRedshiftLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => CustomDataSourceLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureSearchLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HttpLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => FtpServerLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SftpServerLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SapBWLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SapHanaLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AmazonMWSLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzurePostgreSqlLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ConcurLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => CouchbaseLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => DrillLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => EloquaLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => GoogleBigQueryLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => GreenplumLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HBaseLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HiveLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HubspotLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ImpalaLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => JiraLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => MagentoLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => MariaDBLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => MarketoLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => PaypalLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => PhoenixLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => PrestoLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => QuickBooksLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ServiceNowLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ShopifyLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SparkLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SquareLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => XeroLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ZohoLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => VerticaLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => NetezzaLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => SalesforceMarketingCloudLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => HDInsightOnDemandLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureDataLakeAnalyticsLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => AzureDatabricksLinkedService, TypePropertyFlags.None), new LazyTypeProperty("LinkedService", () => ResponsysLinkedService, TypePropertyFlags.None)});
            IntegrationRuntimeReference = new NamedObjectType("IntegrationRuntimeReference", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'IntegrationRuntimeReference'"), TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ParameterSpecification = new NamedObjectType("ParameterSpecification", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'Object'"), new StringLiteralType("'String'"), new StringLiteralType("'Int'"), new StringLiteralType("'Float'"), new StringLiteralType("'Bool'"), new StringLiteralType("'Array'"), new StringLiteralType("'SecureString'")), TypePropertyFlags.Required), new TypeProperty("defaultValue", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureStorageLinkedService = new NamedObjectType("AzureStorageLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureStorageLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureStorage'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureStorageLinkedServiceTypeProperties = new NamedObjectType("AzureStorageLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("sasUri", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SecretBase = LanguageConstants.Any;
            AzureKeyVaultSecretReference = new NamedObjectType("AzureKeyVaultSecretReference", new ITypeProperty[]{new LazyTypeProperty("store", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("secretName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("secretVersion", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'AzureKeyVaultSecret'"), TypePropertyFlags.Required)}, null);
            LinkedServiceReference = new NamedObjectType("LinkedServiceReference", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'LinkedServiceReference'"), TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            AzureSqlDWLinkedService = new NamedObjectType("AzureSqlDWLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDWLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSqlDW'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSqlDWLinkedServiceTypeProperties = new NamedObjectType("AzureSqlDWLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SqlServerLinkedService = new NamedObjectType("SqlServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SqlServer'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SqlServerLinkedServiceTypeProperties = new NamedObjectType("SqlServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureSqlDatabaseLinkedService = new NamedObjectType("AzureSqlDatabaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDatabaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSqlDatabase'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSqlDatabaseLinkedServiceTypeProperties = new NamedObjectType("AzureSqlDatabaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureBatchLinkedService = new NamedObjectType("AzureBatchLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureBatchLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureBatch'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureBatchLinkedServiceTypeProperties = new NamedObjectType("AzureBatchLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("accessKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("batchUri", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("poolName", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureKeyVaultLinkedService = new NamedObjectType("AzureKeyVaultLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureKeyVaultLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureKeyVault'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureKeyVaultLinkedServiceTypeProperties = new NamedObjectType("AzureKeyVaultLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("baseUrl", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            CosmosDbLinkedService = new NamedObjectType("CosmosDbLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CosmosDbLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'CosmosDb'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            CosmosDbLinkedServiceTypeProperties = new NamedObjectType("CosmosDbLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DynamicsLinkedService = new NamedObjectType("DynamicsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DynamicsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Dynamics'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            DynamicsLinkedServiceTypeProperties = new NamedObjectType("DynamicsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("deploymentType", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("hostName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("serviceUri", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("organizationName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HDInsightLinkedService = new NamedObjectType("HDInsightLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsight'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HDInsightLinkedServiceTypeProperties = new NamedObjectType("HDInsightLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clusterUri", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("hcatalogLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            FileServerLinkedService = new NamedObjectType("FileServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FileServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'FileServer'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            FileServerLinkedServiceTypeProperties = new NamedObjectType("FileServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            OracleLinkedService = new NamedObjectType("OracleLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OracleLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Oracle'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            OracleLinkedServiceTypeProperties = new NamedObjectType("OracleLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureMySqlLinkedService = new NamedObjectType("AzureMySqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMySqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureMySql'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureMySqlLinkedServiceTypeProperties = new NamedObjectType("AzureMySqlLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            MySqlLinkedService = new NamedObjectType("MySqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MySqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'MySql'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MySqlLinkedServiceTypeProperties = new NamedObjectType("MySqlLinkedServiceTypeProperties", new ITypeProperty[]{new LazyTypeProperty("connectionString", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            PostgreSqlLinkedService = new NamedObjectType("PostgreSqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PostgreSqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'PostgreSql'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PostgreSqlLinkedServiceTypeProperties = new NamedObjectType("PostgreSqlLinkedServiceTypeProperties", new ITypeProperty[]{new LazyTypeProperty("connectionString", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SybaseLinkedService = new NamedObjectType("SybaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SybaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Sybase'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SybaseLinkedServiceTypeProperties = new NamedObjectType("SybaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("database", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("schema", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Windows'")), TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            Db2LinkedService = new NamedObjectType("Db2LinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => Db2LinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Db2'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            Db2LinkedServiceTypeProperties = new NamedObjectType("Db2LinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("database", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", new StringLiteralType("'Basic'"), TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            TeradataLinkedService = new NamedObjectType("TeradataLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => TeradataLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Teradata'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            TeradataLinkedServiceTypeProperties = new NamedObjectType("TeradataLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Windows'")), TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureMLLinkedService = new NamedObjectType("AzureMLLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureML'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureMLLinkedServiceTypeProperties = new NamedObjectType("AzureMLLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("mlEndpoint", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("apiKey", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("updateResourceEndpoint", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            OdbcLinkedService = new NamedObjectType("OdbcLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OdbcLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Odbc'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            OdbcLinkedServiceTypeProperties = new NamedObjectType("OdbcLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("credential", () => SecretBase, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HdfsLinkedService = new NamedObjectType("HdfsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HdfsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Hdfs'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HdfsLinkedServiceTypeProperties = new NamedObjectType("HdfsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None)}, null);
            ODataLinkedService = new NamedObjectType("ODataLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ODataLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'OData'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ODataLinkedServiceTypeProperties = new NamedObjectType("ODataLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Anonymous'")), TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            WebLinkedService = new NamedObjectType("WebLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Web'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            WebLinkedServiceTypeProperties = new DiscriminatedObjectType("WebLinkedServiceTypeProperties", "authenticationType", new ITypeProperty[]{new LazyTypeProperty("WebLinkedServiceTypeProperties", () => WebAnonymousAuthentication, TypePropertyFlags.None), new LazyTypeProperty("WebLinkedServiceTypeProperties", () => WebBasicAuthentication, TypePropertyFlags.None), new LazyTypeProperty("WebLinkedServiceTypeProperties", () => WebClientCertificateAuthentication, TypePropertyFlags.None)});
            WebAnonymousAuthentication = new NamedObjectType("WebAnonymousAuthentication", new ITypeProperty[]{new TypeProperty("authenticationType", new StringLiteralType("'Anonymous'"), TypePropertyFlags.Required), new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            WebBasicAuthentication = new NamedObjectType("WebBasicAuthentication", new ITypeProperty[]{new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("authenticationType", new StringLiteralType("'Basic'"), TypePropertyFlags.Required), new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            WebClientCertificateAuthentication = new NamedObjectType("WebClientCertificateAuthentication", new ITypeProperty[]{new LazyTypeProperty("pfx", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("authenticationType", new StringLiteralType("'ClientCertificate'"), TypePropertyFlags.Required), new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            CassandraLinkedService = new NamedObjectType("CassandraLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CassandraLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Cassandra'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            CassandraLinkedServiceTypeProperties = new NamedObjectType("CassandraLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            MongoDbLinkedService = new NamedObjectType("MongoDbLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MongoDbLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'MongoDb'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MongoDbLinkedServiceTypeProperties = new NamedObjectType("MongoDbLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Anonymous'")), TypePropertyFlags.None), new TypeProperty("databaseName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("authSource", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureDataLakeStoreLinkedService = new NamedObjectType("AzureDataLakeStoreLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeStoreLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureDataLakeStore'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureDataLakeStoreLinkedServiceTypeProperties = new NamedObjectType("AzureDataLakeStoreLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("dataLakeStoreUri", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("accountName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("subscriptionId", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("resourceGroupName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SalesforceLinkedService = new NamedObjectType("SalesforceLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Salesforce'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SalesforceLinkedServiceTypeProperties = new NamedObjectType("SalesforceLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("environmentUrl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("securityToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SapCloudForCustomerLinkedService = new NamedObjectType("SapCloudForCustomerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapCloudForCustomerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapCloudForCustomer'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapCloudForCustomerLinkedServiceTypeProperties = new NamedObjectType("SapCloudForCustomerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SapEccLinkedService = new NamedObjectType("SapEccLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapEccLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapEcc'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapEccLinkedServiceTypeProperties = new NamedObjectType("SapEccLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AmazonS3LinkedService = new NamedObjectType("AmazonS3LinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonS3LinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AmazonS3'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AmazonS3LinkedServiceTypeProperties = new NamedObjectType("AmazonS3LinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accessKeyId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("secretAccessKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AmazonRedshiftLinkedService = new NamedObjectType("AmazonRedshiftLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonRedshiftLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AmazonRedshift'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AmazonRedshiftLinkedServiceTypeProperties = new NamedObjectType("AmazonRedshiftLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("database", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            CustomDataSourceLinkedService = new NamedObjectType("CustomDataSourceLinkedService", new ITypeProperty[]{new TypeProperty("typeProperties", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'CustomDataSource'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSearchLinkedService = new NamedObjectType("AzureSearchLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSearchLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSearch'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSearchLinkedServiceTypeProperties = new NamedObjectType("AzureSearchLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("key", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HttpLinkedService = new NamedObjectType("HttpLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HttpLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HttpServer'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HttpLinkedServiceTypeProperties = new NamedObjectType("HttpLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Anonymous'"), new StringLiteralType("'Digest'"), new StringLiteralType("'Windows'"), new StringLiteralType("'ClientCertificate'")), TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("embeddedCertData", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("certThumbprint", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableServerCertificateValidation", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            FtpServerLinkedService = new NamedObjectType("FtpServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FtpServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'FtpServer'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            FtpServerLinkedServiceTypeProperties = new NamedObjectType("FtpServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Anonymous'")), TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableServerCertificateValidation", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SftpServerLinkedService = new NamedObjectType("SftpServerLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SftpServerLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Sftp'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SftpServerLinkedServiceTypeProperties = new NamedObjectType("SftpServerLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'SshPublicKey'")), TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("privateKeyPath", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("privateKeyContent", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("passPhrase", () => SecretBase, TypePropertyFlags.None), new TypeProperty("skipHostKeyValidation", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("hostKeyFingerprint", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SapBWLinkedService = new NamedObjectType("SapBWLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapBWLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapBW'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapBWLinkedServiceTypeProperties = new NamedObjectType("SapBWLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("systemNumber", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SapHanaLinkedService = new NamedObjectType("SapHanaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapHanaLinkedServiceProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapHana'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapHanaLinkedServiceProperties = new NamedObjectType("SapHanaLinkedServiceProperties", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Windows'")), TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AmazonMWSLinkedService = new NamedObjectType("AmazonMWSLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonMWSLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AmazonMWS'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AmazonMWSLinkedServiceTypeProperties = new NamedObjectType("AmazonMWSLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("marketplaceID", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("sellerID", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("mwsAuthToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("accessKeyId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("secretKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzurePostgreSqlLinkedService = new NamedObjectType("AzurePostgreSqlLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzurePostgreSqlLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzurePostgreSql'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzurePostgreSqlLinkedServiceTypeProperties = new NamedObjectType("AzurePostgreSqlLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ConcurLinkedService = new NamedObjectType("ConcurLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ConcurLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Concur'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ConcurLinkedServiceTypeProperties = new NamedObjectType("ConcurLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            CouchbaseLinkedService = new NamedObjectType("CouchbaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CouchbaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Couchbase'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            CouchbaseLinkedServiceTypeProperties = new NamedObjectType("CouchbaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DrillLinkedService = new NamedObjectType("DrillLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DrillLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Drill'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            DrillLinkedServiceTypeProperties = new NamedObjectType("DrillLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            EloquaLinkedService = new NamedObjectType("EloquaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => EloquaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Eloqua'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            EloquaLinkedServiceTypeProperties = new NamedObjectType("EloquaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            GoogleBigQueryLinkedService = new NamedObjectType("GoogleBigQueryLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GoogleBigQueryLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'GoogleBigQuery'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            GoogleBigQueryLinkedServiceTypeProperties = new NamedObjectType("GoogleBigQueryLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("project", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("additionalProjects", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("requestGoogleDriveScope", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'ServiceAuthentication'"), new StringLiteralType("'UserAuthentication'")), TypePropertyFlags.Required), new LazyTypeProperty("refreshToken", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("clientId", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("email", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("keyFilePath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            GreenplumLinkedService = new NamedObjectType("GreenplumLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GreenplumLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Greenplum'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            GreenplumLinkedServiceTypeProperties = new NamedObjectType("GreenplumLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HBaseLinkedService = new NamedObjectType("HBaseLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HBaseLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HBase'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HBaseLinkedServiceTypeProperties = new NamedObjectType("HBaseLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("httpPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'Basic'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HiveLinkedService = new NamedObjectType("HiveLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HiveLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Hive'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HiveLinkedServiceTypeProperties = new NamedObjectType("HiveLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("serverType", UnionType.Create(new StringLiteralType("'HiveServer1'"), new StringLiteralType("'HiveServer2'"), new StringLiteralType("'HiveThriftServer'")), TypePropertyFlags.None), new TypeProperty("thriftTransportProtocol", UnionType.Create(new StringLiteralType("'Binary'"), new StringLiteralType("'SASL'"), new StringLiteralType("'HTTP '")), TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'Username'"), new StringLiteralType("'UsernameAndPassword'"), new StringLiteralType("'WindowsAzureHDInsightService'")), TypePropertyFlags.Required), new TypeProperty("serviceDiscoveryMode", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("zooKeeperNameSpace", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useNativeQuery", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("httpPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HubspotLinkedService = new NamedObjectType("HubspotLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HubspotLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Hubspot'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HubspotLinkedServiceTypeProperties = new NamedObjectType("HubspotLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("refreshToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ImpalaLinkedService = new NamedObjectType("ImpalaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ImpalaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Impala'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ImpalaLinkedServiceTypeProperties = new NamedObjectType("ImpalaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'SASLUsername'"), new StringLiteralType("'UsernameAndPassword'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            JiraLinkedService = new NamedObjectType("JiraLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => JiraLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Jira'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            JiraLinkedServiceTypeProperties = new NamedObjectType("JiraLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            MagentoLinkedService = new NamedObjectType("MagentoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MagentoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Magento'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MagentoLinkedServiceTypeProperties = new NamedObjectType("MagentoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            MariaDBLinkedService = new NamedObjectType("MariaDBLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MariaDBLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'MariaDB'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MariaDBLinkedServiceTypeProperties = new NamedObjectType("MariaDBLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            MarketoLinkedService = new NamedObjectType("MarketoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MarketoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Marketo'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MarketoLinkedServiceTypeProperties = new NamedObjectType("MarketoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            PaypalLinkedService = new NamedObjectType("PaypalLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PaypalLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Paypal'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PaypalLinkedServiceTypeProperties = new NamedObjectType("PaypalLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            PhoenixLinkedService = new NamedObjectType("PhoenixLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PhoenixLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Phoenix'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PhoenixLinkedServiceTypeProperties = new NamedObjectType("PhoenixLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("httpPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'UsernameAndPassword'"), new StringLiteralType("'WindowsAzureHDInsightService'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            PrestoLinkedService = new NamedObjectType("PrestoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => PrestoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Presto'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PrestoLinkedServiceTypeProperties = new NamedObjectType("PrestoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("serverVersion", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("catalog", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'LDAP'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("timeZoneID", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            QuickBooksLinkedService = new NamedObjectType("QuickBooksLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => QuickBooksLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'QuickBooks'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            QuickBooksLinkedServiceTypeProperties = new NamedObjectType("QuickBooksLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("companyId", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("consumerKey", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("consumerSecret", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.Required), new LazyTypeProperty("accessTokenSecret", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ServiceNowLinkedService = new NamedObjectType("ServiceNowLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ServiceNowLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'ServiceNow'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ServiceNowLinkedServiceTypeProperties = new NamedObjectType("ServiceNowLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'OAuth2'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ShopifyLinkedService = new NamedObjectType("ShopifyLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ShopifyLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Shopify'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ShopifyLinkedServiceTypeProperties = new NamedObjectType("ShopifyLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SparkLinkedService = new NamedObjectType("SparkLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SparkLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Spark'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SparkLinkedServiceTypeProperties = new NamedObjectType("SparkLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("serverType", UnionType.Create(new StringLiteralType("'SharkServer'"), new StringLiteralType("'SharkServer2'"), new StringLiteralType("'SparkThriftServer'")), TypePropertyFlags.None), new TypeProperty("thriftTransportProtocol", UnionType.Create(new StringLiteralType("'Binary'"), new StringLiteralType("'SASL'"), new StringLiteralType("'HTTP '")), TypePropertyFlags.None), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'Anonymous'"), new StringLiteralType("'Username'"), new StringLiteralType("'UsernameAndPassword'"), new StringLiteralType("'WindowsAzureHDInsightService'")), TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.None), new TypeProperty("httpPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableSsl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("trustedCertPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useSystemTrustStore", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowHostNameCNMismatch", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("allowSelfSignedServerCert", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SquareLinkedService = new NamedObjectType("SquareLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SquareLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Square'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SquareLinkedServiceTypeProperties = new NamedObjectType("SquareLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("redirectUri", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            XeroLinkedService = new NamedObjectType("XeroLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => XeroLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Xero'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            XeroLinkedServiceTypeProperties = new NamedObjectType("XeroLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("host", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("consumerKey", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("privateKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ZohoLinkedService = new NamedObjectType("ZohoLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ZohoLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Zoho'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ZohoLinkedServiceTypeProperties = new NamedObjectType("ZohoLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            VerticaLinkedService = new NamedObjectType("VerticaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => VerticaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Vertica'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            VerticaLinkedServiceTypeProperties = new NamedObjectType("VerticaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            NetezzaLinkedService = new NamedObjectType("NetezzaLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => NetezzaLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Netezza'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            NetezzaLinkedServiceTypeProperties = new NamedObjectType("NetezzaLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("connectionString", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SalesforceMarketingCloudLinkedService = new NamedObjectType("SalesforceMarketingCloudLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceMarketingCloudLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SalesforceMarketingCloud'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SalesforceMarketingCloudLinkedServiceTypeProperties = new NamedObjectType("SalesforceMarketingCloudLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            HDInsightOnDemandLinkedService = new NamedObjectType("HDInsightOnDemandLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightOnDemandLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightOnDemand'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HDInsightOnDemandLinkedServiceTypeProperties = new NamedObjectType("HDInsightOnDemandLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("clusterSize", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("timeToLive", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("version", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("hostSubscriptionId", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clusterResourceGroup", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clusterNamePrefix", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("clusterUserName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("clusterPassword", () => SecretBase, TypePropertyFlags.None), new TypeProperty("clusterSshUserName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("clusterSshPassword", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("additionalLinkedServiceNames", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new LazyTypeProperty("hcatalogLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("clusterType", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("sparkVersion", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("coreConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("hBaseConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("hdfsConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("hiveConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("mapReduceConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("oozieConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("stormConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("yarnConfiguration", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("headNodeSize", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("dataNodeSize", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("zookeeperNodeSize", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureDataLakeAnalyticsLinkedService = new NamedObjectType("AzureDataLakeAnalyticsLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeAnalyticsLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureDataLakeAnalytics'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureDataLakeAnalyticsLinkedServiceTypeProperties = new NamedObjectType("AzureDataLakeAnalyticsLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("servicePrincipalId", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("servicePrincipalKey", () => SecretBase, TypePropertyFlags.None), new TypeProperty("tenant", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("subscriptionId", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("resourceGroupName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("dataLakeAnalyticsUri", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureDatabricksLinkedService = new NamedObjectType("AzureDatabricksLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDatabricksLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureDatabricks'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureDatabricksLinkedServiceTypeProperties = new NamedObjectType("AzureDatabricksLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("domain", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("accessToken", () => SecretBase, TypePropertyFlags.Required), new TypeProperty("existingClusterId", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("newClusterVersion", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("newClusterNumOfWorker", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("newClusterNodeType", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("newClusterSparkConf", new NamedObjectType("newClusterSparkConf", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ResponsysLinkedService = new NamedObjectType("ResponsysLinkedService", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ResponsysLinkedServiceTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Responsys'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ResponsysLinkedServiceTypeProperties = new NamedObjectType("ResponsysLinkedServiceTypeProperties", new ITypeProperty[]{new TypeProperty("endpoint", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("clientId", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("clientSecret", () => SecretBase, TypePropertyFlags.None), new TypeProperty("useEncryptedEndpoints", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("useHostVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("usePeerVerification", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("encryptedCredential", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            Dataset = new DiscriminatedObjectType("Dataset", "type", new ITypeProperty[]{new LazyTypeProperty("Dataset", () => AmazonS3Dataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureBlobDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureSqlTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureSqlDWTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => CassandraTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => DocumentDbCollectionDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => DynamicsEntityDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureDataLakeStoreDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => FileShareDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => MongoDbCollectionDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ODataResourceDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => OracleTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureMySqlTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => RelationalTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SalesforceObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SapCloudForCustomerResourceDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SapEccResourceDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SqlServerTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => WebTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzureSearchIndexDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => HttpDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AmazonMWSObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => AzurePostgreSqlTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ConcurObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => CouchbaseTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => DrillTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => EloquaObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => GoogleBigQueryObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => GreenplumTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => HBaseObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => HiveObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => HubspotObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ImpalaObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => JiraObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => MagentoObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => MariaDBTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => MarketoObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => PaypalObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => PhoenixObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => PrestoObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => QuickBooksObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ServiceNowObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ShopifyObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SparkObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SquareObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => XeroObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ZohoObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => NetezzaTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => VerticaTableDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => SalesforceMarketingCloudObjectDataset, TypePropertyFlags.None), new LazyTypeProperty("Dataset", () => ResponsysObjectDataset, TypePropertyFlags.None)});
            AmazonS3Dataset = new NamedObjectType("AmazonS3Dataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AmazonS3DatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AmazonS3Object'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AmazonS3DatasetTypeProperties = new NamedObjectType("AmazonS3DatasetTypeProperties", new ITypeProperty[]{new TypeProperty("bucketName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("key", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("prefix", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null);
            DatasetStorageFormat = new NamedObjectType("DatasetStorageFormat", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("serializer", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("deserializer", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DatasetCompression = new DiscriminatedObjectType("DatasetCompression", "type", new ITypeProperty[]{new LazyTypeProperty("DatasetCompression", () => DatasetBZip2Compression, TypePropertyFlags.None), new LazyTypeProperty("DatasetCompression", () => DatasetGZipCompression, TypePropertyFlags.None), new LazyTypeProperty("DatasetCompression", () => DatasetDeflateCompression, TypePropertyFlags.None), new LazyTypeProperty("DatasetCompression", () => DatasetZipDeflateCompression, TypePropertyFlags.None)});
            DatasetBZip2Compression = new NamedObjectType("DatasetBZip2Compression", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'BZip2'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            DatasetGZipCompression = new NamedObjectType("DatasetGZipCompression", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'GZip'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            DatasetDeflateCompression = new NamedObjectType("DatasetDeflateCompression", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Deflate'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            DatasetZipDeflateCompression = new NamedObjectType("DatasetZipDeflateCompression", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'ZipDeflate'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            AzureBlobDataset = new NamedObjectType("AzureBlobDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureBlobDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureBlob'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureBlobDatasetTypeProperties = new NamedObjectType("AzureBlobDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("tableRootLocation", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("fileName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null);
            AzureTableDataset = new NamedObjectType("AzureTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureTableDatasetTypeProperties = new NamedObjectType("AzureTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            AzureSqlTableDataset = new NamedObjectType("AzureSqlTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSqlTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSqlTableDatasetTypeProperties = new NamedObjectType("AzureSqlTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            AzureSqlDWTableDataset = new NamedObjectType("AzureSqlDWTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSqlDWTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSqlDWTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSqlDWTableDatasetTypeProperties = new NamedObjectType("AzureSqlDWTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            CassandraTableDataset = new NamedObjectType("CassandraTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CassandraTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'CassandraTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            CassandraTableDatasetTypeProperties = new NamedObjectType("CassandraTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("keyspace", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DocumentDbCollectionDataset = new NamedObjectType("DocumentDbCollectionDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DocumentDbCollectionDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'DocumentDbCollection'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            DocumentDbCollectionDatasetTypeProperties = new NamedObjectType("DocumentDbCollectionDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("collectionName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            DynamicsEntityDataset = new NamedObjectType("DynamicsEntityDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DynamicsEntityDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'DynamicsEntity'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            DynamicsEntityDatasetTypeProperties = new NamedObjectType("DynamicsEntityDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("entityName", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureDataLakeStoreDataset = new NamedObjectType("AzureDataLakeStoreDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureDataLakeStoreDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureDataLakeStoreFile'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureDataLakeStoreDatasetTypeProperties = new NamedObjectType("AzureDataLakeStoreDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("fileName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null);
            FileShareDataset = new NamedObjectType("FileShareDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FileShareDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'FileShare'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            FileShareDatasetTypeProperties = new NamedObjectType("FileShareDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("folderPath", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("fileName", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new TypeProperty("fileFilter", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null);
            MongoDbCollectionDataset = new NamedObjectType("MongoDbCollectionDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => MongoDbCollectionDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'MongoDbCollection'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MongoDbCollectionDatasetTypeProperties = new NamedObjectType("MongoDbCollectionDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("collectionName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            ODataResourceDataset = new NamedObjectType("ODataResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ODataResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'ODataResource'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ODataResourceDatasetTypeProperties = new NamedObjectType("ODataResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            OracleTableDataset = new NamedObjectType("OracleTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => OracleTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'OracleTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            OracleTableDatasetTypeProperties = new NamedObjectType("OracleTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            AzureMySqlTableDataset = new NamedObjectType("AzureMySqlTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMySqlTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureMySqlTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureMySqlTableDatasetTypeProperties = new NamedObjectType("AzureMySqlTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            RelationalTableDataset = new NamedObjectType("RelationalTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => RelationalTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'RelationalTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            RelationalTableDatasetTypeProperties = new NamedObjectType("RelationalTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SalesforceObjectDataset = new NamedObjectType("SalesforceObjectDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SalesforceObjectDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SalesforceObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SalesforceObjectDatasetTypeProperties = new NamedObjectType("SalesforceObjectDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("objectApiName", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SapCloudForCustomerResourceDataset = new NamedObjectType("SapCloudForCustomerResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapCloudForCustomerResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapCloudForCustomerResource'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapCloudForCustomerResourceDatasetTypeProperties = new NamedObjectType("SapCloudForCustomerResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            SapEccResourceDataset = new NamedObjectType("SapEccResourceDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SapEccResourceDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SapEccResource'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SapEccResourceDatasetTypeProperties = new NamedObjectType("SapEccResourceDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            SqlServerTableDataset = new NamedObjectType("SqlServerTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SqlServerTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SqlServerTableDatasetTypeProperties = new NamedObjectType("SqlServerTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("tableName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            WebTableDataset = new NamedObjectType("WebTableDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebTableDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'WebTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            WebTableDatasetTypeProperties = new NamedObjectType("WebTableDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("index", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            AzureSearchIndexDataset = new NamedObjectType("AzureSearchIndexDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureSearchIndexDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureSearchIndex'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureSearchIndexDatasetTypeProperties = new NamedObjectType("AzureSearchIndexDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("indexName", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            HttpDataset = new NamedObjectType("HttpDataset", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HttpDatasetTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HttpFile'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HttpDatasetTypeProperties = new NamedObjectType("HttpDatasetTypeProperties", new ITypeProperty[]{new TypeProperty("relativeUrl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("requestMethod", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("requestBody", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("additionalHeaders", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("format", () => DatasetStorageFormat, TypePropertyFlags.None), new LazyTypeProperty("compression", () => DatasetCompression, TypePropertyFlags.None)}, null);
            AmazonMWSObjectDataset = new NamedObjectType("AmazonMWSObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'AmazonMWSObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzurePostgreSqlTableDataset = new NamedObjectType("AzurePostgreSqlTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'AzurePostgreSqlTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ConcurObjectDataset = new NamedObjectType("ConcurObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ConcurObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            CouchbaseTableDataset = new NamedObjectType("CouchbaseTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'CouchbaseTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            DrillTableDataset = new NamedObjectType("DrillTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'DrillTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            EloquaObjectDataset = new NamedObjectType("EloquaObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'EloquaObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            GoogleBigQueryObjectDataset = new NamedObjectType("GoogleBigQueryObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'GoogleBigQueryObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            GreenplumTableDataset = new NamedObjectType("GreenplumTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'GreenplumTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HBaseObjectDataset = new NamedObjectType("HBaseObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'HBaseObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HiveObjectDataset = new NamedObjectType("HiveObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'HiveObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            HubspotObjectDataset = new NamedObjectType("HubspotObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'HubspotObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ImpalaObjectDataset = new NamedObjectType("ImpalaObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ImpalaObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            JiraObjectDataset = new NamedObjectType("JiraObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'JiraObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MagentoObjectDataset = new NamedObjectType("MagentoObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'MagentoObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MariaDBTableDataset = new NamedObjectType("MariaDBTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'MariaDBTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            MarketoObjectDataset = new NamedObjectType("MarketoObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'MarketoObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PaypalObjectDataset = new NamedObjectType("PaypalObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'PaypalObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PhoenixObjectDataset = new NamedObjectType("PhoenixObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'PhoenixObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            PrestoObjectDataset = new NamedObjectType("PrestoObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'PrestoObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            QuickBooksObjectDataset = new NamedObjectType("QuickBooksObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'QuickBooksObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ServiceNowObjectDataset = new NamedObjectType("ServiceNowObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ServiceNowObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ShopifyObjectDataset = new NamedObjectType("ShopifyObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ShopifyObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SparkObjectDataset = new NamedObjectType("SparkObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'SparkObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SquareObjectDataset = new NamedObjectType("SquareObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'SquareObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            XeroObjectDataset = new NamedObjectType("XeroObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'XeroObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ZohoObjectDataset = new NamedObjectType("ZohoObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ZohoObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            NetezzaTableDataset = new NamedObjectType("NetezzaTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'NetezzaTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            VerticaTableDataset = new NamedObjectType("VerticaTableDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'VerticaTable'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            SalesforceMarketingCloudObjectDataset = new NamedObjectType("SalesforceMarketingCloudObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'SalesforceMarketingCloudObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            ResponsysObjectDataset = new NamedObjectType("ResponsysObjectDataset", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'ResponsysObject'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("structure", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            Pipeline = new NamedObjectType("Pipeline", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("activities", () => new TypedArrayType(Activity), TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterSpecification, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("concurrency", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("annotations", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            Activity = new DiscriminatedObjectType("Activity", "type", new ITypeProperty[]{new LazyTypeProperty("Activity", () => ControlActivity, TypePropertyFlags.None), new LazyTypeProperty("Activity", () => ExecutionActivity, TypePropertyFlags.None)});
            ActivityDependency = new NamedObjectType("ActivityDependency", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("activity", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("dependencyConditions", new TypedArrayType(UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Skipped'"), new StringLiteralType("'Completed'"))), TypePropertyFlags.Required)}, null);
            ControlActivity = new DiscriminatedObjectType("ControlActivity", "type", new ITypeProperty[]{new LazyTypeProperty("ControlActivity", () => ExecutePipelineActivity, TypePropertyFlags.None), new LazyTypeProperty("ControlActivity", () => IfConditionActivity, TypePropertyFlags.None), new LazyTypeProperty("ControlActivity", () => ForEachActivity, TypePropertyFlags.None), new LazyTypeProperty("ControlActivity", () => WaitActivity, TypePropertyFlags.None), new LazyTypeProperty("ControlActivity", () => UntilActivity, TypePropertyFlags.None), new LazyTypeProperty("ControlActivity", () => FilterActivity, TypePropertyFlags.None)});
            ExecutePipelineActivity = new NamedObjectType("ExecutePipelineActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ExecutePipelineActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'ExecutePipeline'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            ExecutePipelineActivityTypeProperties = new NamedObjectType("ExecutePipelineActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("pipeline", () => PipelineReference, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("waitOnCompletion", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            PipelineReference = new NamedObjectType("PipelineReference", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'PipelineReference'"), TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IfConditionActivity = new NamedObjectType("IfConditionActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => IfConditionActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'IfCondition'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            IfConditionActivityTypeProperties = new NamedObjectType("IfConditionActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("expression", () => Expression, TypePropertyFlags.Required), new LazyTypeProperty("ifTrueActivities", () => new TypedArrayType(Activity), TypePropertyFlags.None), new LazyTypeProperty("ifFalseActivities", () => new TypedArrayType(Activity), TypePropertyFlags.None)}, null);
            Expression = new NamedObjectType("Expression", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'Expression'"), TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ForEachActivity = new NamedObjectType("ForEachActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ForEachActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'ForEach'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            ForEachActivityTypeProperties = new NamedObjectType("ForEachActivityTypeProperties", new ITypeProperty[]{new TypeProperty("isSequential", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("batchCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("items", () => Expression, TypePropertyFlags.Required), new LazyTypeProperty("activities", () => new TypedArrayType(Activity), TypePropertyFlags.Required)}, null);
            WaitActivity = new NamedObjectType("WaitActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WaitActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Wait'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            WaitActivityTypeProperties = new NamedObjectType("WaitActivityTypeProperties", new ITypeProperty[]{new TypeProperty("waitTimeInSeconds", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            UntilActivity = new NamedObjectType("UntilActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => UntilActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Until'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            UntilActivityTypeProperties = new NamedObjectType("UntilActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("expression", () => Expression, TypePropertyFlags.Required), new TypeProperty("timeout", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("activities", () => new TypedArrayType(Activity), TypePropertyFlags.Required)}, null);
            FilterActivity = new NamedObjectType("FilterActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => FilterActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Filter'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            FilterActivityTypeProperties = new NamedObjectType("FilterActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("items", () => Expression, TypePropertyFlags.Required), new LazyTypeProperty("condition", () => Expression, TypePropertyFlags.Required)}, null);
            ExecutionActivity = new DiscriminatedObjectType("ExecutionActivity", "type", new ITypeProperty[]{new LazyTypeProperty("ExecutionActivity", () => CopyActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => HDInsightHiveActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => HDInsightPigActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => HDInsightMapReduceActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => HDInsightStreamingActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => HDInsightSparkActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => ExecuteSSISPackageActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => CustomActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => SqlServerStoredProcedureActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => LookupActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => WebActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => GetMetadataActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => AzureMLBatchExecutionActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => AzureMLUpdateResourceActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => DataLakeAnalyticsUSQLActivity, TypePropertyFlags.None), new LazyTypeProperty("ExecutionActivity", () => DatabricksNotebookActivity, TypePropertyFlags.None)});
            ActivityPolicy = new NamedObjectType("ActivityPolicy", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("retry", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("retryIntervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secureOutput", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            CopyActivity = new NamedObjectType("CopyActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CopyActivityTypeProperties, TypePropertyFlags.Required), new LazyTypeProperty("inputs", () => new TypedArrayType(DatasetReference), TypePropertyFlags.None), new LazyTypeProperty("outputs", () => new TypedArrayType(DatasetReference), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Copy'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            CopyActivityTypeProperties = new NamedObjectType("CopyActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("source", () => CopySource, TypePropertyFlags.Required), new LazyTypeProperty("sink", () => CopySink, TypePropertyFlags.Required), new TypeProperty("translator", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableStaging", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("stagingSettings", () => StagingSettings, TypePropertyFlags.None), new TypeProperty("parallelCopies", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("cloudDataMovementUnits", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableSkipIncompatibleRow", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("redirectIncompatibleRowSettings", () => RedirectIncompatibleRowSettings, TypePropertyFlags.None)}, null);
            CopySource = new NamedObjectType("CopySource", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("sourceRetryCount", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("sourceRetryWait", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            CopySink = new NamedObjectType("CopySink", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("writeBatchSize", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("writeBatchTimeout", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("sinkRetryCount", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("sinkRetryWait", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            StagingSettings = new NamedObjectType("StagingSettings", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("enableCompression", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            RedirectIncompatibleRowSettings = new NamedObjectType("RedirectIncompatibleRowSettings", new ITypeProperty[]{new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("linkedServiceName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("path", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DatasetReference = new NamedObjectType("DatasetReference", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'DatasetReference'"), TypePropertyFlags.Required), new TypeProperty("referenceName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            HDInsightHiveActivity = new NamedObjectType("HDInsightHiveActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightHiveActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightHive'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            HDInsightHiveActivityTypeProperties = new NamedObjectType("HDInsightHiveActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("storageLinkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("getDebugInfo", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Always'"), new StringLiteralType("'Failure'")), TypePropertyFlags.None), new TypeProperty("scriptPath", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            HDInsightPigActivity = new NamedObjectType("HDInsightPigActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightPigActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightPig'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            HDInsightPigActivityTypeProperties = new NamedObjectType("HDInsightPigActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("storageLinkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("getDebugInfo", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Always'"), new StringLiteralType("'Failure'")), TypePropertyFlags.None), new TypeProperty("scriptPath", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            HDInsightMapReduceActivity = new NamedObjectType("HDInsightMapReduceActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightMapReduceActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightMapReduce'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            HDInsightMapReduceActivityTypeProperties = new NamedObjectType("HDInsightMapReduceActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("storageLinkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("getDebugInfo", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Always'"), new StringLiteralType("'Failure'")), TypePropertyFlags.None), new TypeProperty("className", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("jarFilePath", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("jarLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("jarLibs", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            HDInsightStreamingActivity = new NamedObjectType("HDInsightStreamingActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightStreamingActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightStreaming'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            HDInsightStreamingActivityTypeProperties = new NamedObjectType("HDInsightStreamingActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("storageLinkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new TypeProperty("arguments", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("getDebugInfo", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Always'"), new StringLiteralType("'Failure'")), TypePropertyFlags.None), new TypeProperty("mapper", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("reducer", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("input", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("output", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("filePaths", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.Required), new LazyTypeProperty("fileLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("combiner", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("commandEnvironment", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("defines", new NamedObjectType("defines", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            HDInsightSparkActivity = new NamedObjectType("HDInsightSparkActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => HDInsightSparkActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'HDInsightSpark'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            HDInsightSparkActivityTypeProperties = new NamedObjectType("HDInsightSparkActivityTypeProperties", new ITypeProperty[]{new TypeProperty("rootPath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("entryFilePath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("arguments", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None), new TypeProperty("getDebugInfo", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Always'"), new StringLiteralType("'Failure'")), TypePropertyFlags.None), new LazyTypeProperty("sparkJobLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("className", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyUser", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("sparkConfig", new NamedObjectType("sparkConfig", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ExecuteSSISPackageActivity = new NamedObjectType("ExecuteSSISPackageActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => ExecuteSSISPackageActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'ExecuteSSISPackage'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            ExecuteSSISPackageActivityTypeProperties = new NamedObjectType("ExecuteSSISPackageActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("packageLocation", () => SSISPackageLocation, TypePropertyFlags.Required), new TypeProperty("runtime", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("loggingLevel", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("environmentPath", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("executionCredential", () => SSISExecutionCredential, TypePropertyFlags.None), new LazyTypeProperty("connectVia", () => IntegrationRuntimeReference, TypePropertyFlags.Required), new TypeProperty("projectParameters", new NamedObjectType("projectParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => SSISExecutionParameter, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("packageParameters", new NamedObjectType("packageParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => SSISExecutionParameter, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("projectConnectionManagers", new NamedObjectType("projectConnectionManagers", new ITypeProperty[]{}, new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => SSISExecutionParameter, TypePropertyFlags.None)), TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("packageConnectionManagers", new NamedObjectType("packageConnectionManagers", new ITypeProperty[]{}, new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => SSISExecutionParameter, TypePropertyFlags.None)), TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("propertyOverrides", new NamedObjectType("propertyOverrides", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => SSISPropertyOverride, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("logLocation", () => SSISLogLocation, TypePropertyFlags.None)}, null);
            SSISPackageLocation = new NamedObjectType("SSISPackageLocation", new ITypeProperty[]{new TypeProperty("packagePath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("type", UnionType.Create(new StringLiteralType("'SSISDB'"), new StringLiteralType("'File'")), TypePropertyFlags.None), new LazyTypeProperty("typeProperties", () => SSISPackageLocationTypeProperties, TypePropertyFlags.None)}, null);
            SSISPackageLocationTypeProperties = new NamedObjectType("SSISPackageLocationTypeProperties", new ITypeProperty[]{new LazyTypeProperty("packagePassword", () => SecretBase, TypePropertyFlags.None), new LazyTypeProperty("accessCredential", () => SSISAccessCredential, TypePropertyFlags.None), new TypeProperty("configurationPath", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SSISAccessCredential = new NamedObjectType("SSISAccessCredential", new ITypeProperty[]{new TypeProperty("domain", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecretBase, TypePropertyFlags.Required)}, null);
            SSISExecutionCredential = new NamedObjectType("SSISExecutionCredential", new ITypeProperty[]{new TypeProperty("domain", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("userName", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("password", () => SecureString, TypePropertyFlags.Required)}, null);
            SSISExecutionParameter = new NamedObjectType("SSISExecutionParameter", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            SSISPropertyOverride = new NamedObjectType("SSISPropertyOverride", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("isSensitive", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SSISLogLocation = new NamedObjectType("SSISLogLocation", new ITypeProperty[]{new TypeProperty("logPath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'File'"), TypePropertyFlags.Required), new LazyTypeProperty("typeProperties", () => SSISLogLocationTypeProperties, TypePropertyFlags.Required)}, null);
            SSISLogLocationTypeProperties = new NamedObjectType("SSISLogLocationTypeProperties", new ITypeProperty[]{new LazyTypeProperty("accessCredential", () => SSISAccessCredential, TypePropertyFlags.None), new TypeProperty("logRefreshInterval", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            CustomActivity = new NamedObjectType("CustomActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => CustomActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Custom'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            CustomActivityTypeProperties = new NamedObjectType("CustomActivityTypeProperties", new ITypeProperty[]{new TypeProperty("command", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("resourceLinkedService", () => LinkedServiceReference, TypePropertyFlags.None), new TypeProperty("folderPath", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("referenceObjects", () => CustomActivityReferenceObject, TypePropertyFlags.None), new TypeProperty("extendedProperties", new NamedObjectType("extendedProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            CustomActivityReferenceObject = new NamedObjectType("CustomActivityReferenceObject", new ITypeProperty[]{new LazyTypeProperty("linkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None), new LazyTypeProperty("datasets", () => new TypedArrayType(DatasetReference), TypePropertyFlags.None)}, null);
            SqlServerStoredProcedureActivity = new NamedObjectType("SqlServerStoredProcedureActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => SqlServerStoredProcedureActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'SqlServerStoredProcedure'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            SqlServerStoredProcedureActivityTypeProperties = new NamedObjectType("SqlServerStoredProcedureActivityTypeProperties", new ITypeProperty[]{new TypeProperty("storedProcedureName", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("storedProcedureParameters", new NamedObjectType("storedProcedureParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => StoredProcedureParameter, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            StoredProcedureParameter = new NamedObjectType("StoredProcedureParameter", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            LookupActivity = new NamedObjectType("LookupActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => LookupActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Lookup'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            LookupActivityTypeProperties = new NamedObjectType("LookupActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("source", () => CopySource, TypePropertyFlags.Required), new LazyTypeProperty("dataset", () => DatasetReference, TypePropertyFlags.Required), new TypeProperty("firstRowOnly", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            WebActivity = new NamedObjectType("WebActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => WebActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'WebActivity'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            WebActivityTypeProperties = new NamedObjectType("WebActivityTypeProperties", new ITypeProperty[]{new TypeProperty("method", UnionType.Create(new StringLiteralType("'GET'"), new StringLiteralType("'POST'"), new StringLiteralType("'PUT'"), new StringLiteralType("'DELETE'")), TypePropertyFlags.Required), new TypeProperty("url", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("headers", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("body", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("authentication", () => WebActivityAuthentication, TypePropertyFlags.None), new LazyTypeProperty("datasets", () => new TypedArrayType(DatasetReference), TypePropertyFlags.None), new LazyTypeProperty("linkedServices", () => new TypedArrayType(LinkedServiceReference), TypePropertyFlags.None)}, null);
            WebActivityAuthentication = new NamedObjectType("WebActivityAuthentication", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("pfx", () => SecureString, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecureString, TypePropertyFlags.None), new TypeProperty("resource", LanguageConstants.String, TypePropertyFlags.None)}, null);
            GetMetadataActivity = new NamedObjectType("GetMetadataActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => GetMetadataActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'GetMetadata'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            GetMetadataActivityTypeProperties = new NamedObjectType("GetMetadataActivityTypeProperties", new ITypeProperty[]{new LazyTypeProperty("dataset", () => DatasetReference, TypePropertyFlags.Required), new TypeProperty("fieldList", new TypedArrayType(LanguageConstants.Any), TypePropertyFlags.None)}, null);
            AzureMLBatchExecutionActivity = new NamedObjectType("AzureMLBatchExecutionActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLBatchExecutionActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureMLBatchExecution'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            AzureMLBatchExecutionActivityTypeProperties = new NamedObjectType("AzureMLBatchExecutionActivityTypeProperties", new ITypeProperty[]{new TypeProperty("globalParameters", new NamedObjectType("globalParameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("webServiceOutputs", new NamedObjectType("webServiceOutputs", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => AzureMLWebServiceFile, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("webServiceInputs", new NamedObjectType("webServiceInputs", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => AzureMLWebServiceFile, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            AzureMLWebServiceFile = new NamedObjectType("AzureMLWebServiceFile", new ITypeProperty[]{new TypeProperty("filePath", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required)}, null);
            AzureMLUpdateResourceActivity = new NamedObjectType("AzureMLUpdateResourceActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => AzureMLUpdateResourceActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'AzureMLUpdateResource'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            AzureMLUpdateResourceActivityTypeProperties = new NamedObjectType("AzureMLUpdateResourceActivityTypeProperties", new ITypeProperty[]{new TypeProperty("trainedModelName", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("trainedModelLinkedServiceName", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("trainedModelFilePath", LanguageConstants.Any, TypePropertyFlags.Required)}, null);
            DataLakeAnalyticsUSQLActivity = new NamedObjectType("DataLakeAnalyticsUSQLActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DataLakeAnalyticsUSQLActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'DataLakeAnalyticsU-SQL'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            DataLakeAnalyticsUSQLActivityTypeProperties = new NamedObjectType("DataLakeAnalyticsUSQLActivityTypeProperties", new ITypeProperty[]{new TypeProperty("scriptPath", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("scriptLinkedService", () => LinkedServiceReference, TypePropertyFlags.Required), new TypeProperty("degreeOfParallelism", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("runtimeVersion", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("compilationMode", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            DatabricksNotebookActivity = new NamedObjectType("DatabricksNotebookActivity", new ITypeProperty[]{new LazyTypeProperty("typeProperties", () => DatabricksNotebookActivityTypeProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'DatabricksNotebook'"), TypePropertyFlags.Required), new LazyTypeProperty("linkedServiceName", () => LinkedServiceReference, TypePropertyFlags.None), new LazyTypeProperty("policy", () => ActivityPolicy, TypePropertyFlags.None), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("dependsOn", () => new TypedArrayType(ActivityDependency), TypePropertyFlags.None)}, null);
            DatabricksNotebookActivityTypeProperties = new NamedObjectType("DatabricksNotebookActivityTypeProperties", new ITypeProperty[]{new TypeProperty("notebookPath", LanguageConstants.Any, TypePropertyFlags.Required), new TypeProperty("baseParameters", new NamedObjectType("baseParameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            Trigger = new DiscriminatedObjectType("Trigger", "type", new ITypeProperty[]{new LazyTypeProperty("Trigger", () => MultiplePipelineTrigger, TypePropertyFlags.None)});
            MultiplePipelineTrigger = new NamedObjectType("MultiplePipelineTrigger", new ITypeProperty[]{new LazyTypeProperty("pipelines", () => new TypedArrayType(TriggerPipelineReference), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'MultiplePipelineTrigger'"), TypePropertyFlags.Required), new TypeProperty("additionalProperties", new NamedObjectType("additionalProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("runtimeState", UnionType.Create(new StringLiteralType("'Started'"), new StringLiteralType("'Stopped'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly)}, null);
            TriggerPipelineReference = new NamedObjectType("TriggerPipelineReference", new ITypeProperty[]{new LazyTypeProperty("pipelineReference", () => PipelineReference, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ResourceType_factories = new ResourceType("Microsoft.DataFactory/factories", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => FactoryIdentity, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FactoryProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories);
            ResourceType_factories_integrationRuntimes = new ResourceType("Microsoft.DataFactory/factories/integrationRuntimes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories/integrationRuntimes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationRuntime, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories_integrationRuntimes);
            ResourceType_factories_linkedservices = new ResourceType("Microsoft.DataFactory/factories/linkedservices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories/linkedservices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => LinkedService, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories_linkedservices);
            ResourceType_factories_datasets = new ResourceType("Microsoft.DataFactory/factories/datasets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories/datasets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => Dataset, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories_datasets);
            ResourceType_factories_pipelines = new ResourceType("Microsoft.DataFactory/factories/pipelines", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories/pipelines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => Pipeline, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories_pipelines);
            ResourceType_factories_triggers = new ResourceType("Microsoft.DataFactory/factories/triggers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DataFactory/factories/triggers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => Trigger, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-09-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_factories_triggers);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_factories, () => InstanceLazy.Value.ResourceType_factories);
            registrar.RegisterType(ResourceTypeReference_factories_integrationRuntimes, () => InstanceLazy.Value.ResourceType_factories_integrationRuntimes);
            registrar.RegisterType(ResourceTypeReference_factories_linkedservices, () => InstanceLazy.Value.ResourceType_factories_linkedservices);
            registrar.RegisterType(ResourceTypeReference_factories_datasets, () => InstanceLazy.Value.ResourceType_factories_datasets);
            registrar.RegisterType(ResourceTypeReference_factories_pipelines, () => InstanceLazy.Value.ResourceType_factories_pipelines);
            registrar.RegisterType(ResourceTypeReference_factories_triggers, () => InstanceLazy.Value.ResourceType_factories_triggers);
        }
        private readonly ResourceType ResourceType_factories;
        private readonly ResourceType ResourceType_factories_integrationRuntimes;
        private readonly ResourceType ResourceType_factories_linkedservices;
        private readonly ResourceType ResourceType_factories_datasets;
        private readonly ResourceType ResourceType_factories_pipelines;
        private readonly ResourceType ResourceType_factories_triggers;
        private readonly TypeSymbol FactoryIdentity;
        private readonly TypeSymbol FactoryProperties;
        private readonly TypeSymbol FactoryVSTSConfiguration;
        private readonly TypeSymbol IntegrationRuntime;
        private readonly TypeSymbol ManagedIntegrationRuntime;
        private readonly TypeSymbol ManagedIntegrationRuntimeTypeProperties;
        private readonly TypeSymbol IntegrationRuntimeComputeProperties;
        private readonly TypeSymbol IntegrationRuntimeVNetProperties;
        private readonly TypeSymbol IntegrationRuntimeSsisProperties;
        private readonly TypeSymbol IntegrationRuntimeSsisCatalogInfo;
        private readonly TypeSymbol SecureString;
        private readonly TypeSymbol IntegrationRuntimeCustomSetupScriptProperties;
        private readonly TypeSymbol IntegrationRuntimeDataProxyProperties;
        private readonly TypeSymbol EntityReference;
        private readonly TypeSymbol SelfHostedIntegrationRuntime;
        private readonly TypeSymbol LinkedIntegrationRuntimeTypeProperties;
        private readonly TypeSymbol LinkedIntegrationRuntimeProperties;
        private readonly TypeSymbol LinkedIntegrationRuntimeKey;
        private readonly TypeSymbol LinkedIntegrationRuntimeRbac;
        private readonly TypeSymbol LinkedService;
        private readonly TypeSymbol IntegrationRuntimeReference;
        private readonly TypeSymbol ParameterSpecification;
        private readonly TypeSymbol AzureStorageLinkedService;
        private readonly TypeSymbol AzureStorageLinkedServiceTypeProperties;
        private readonly TypeSymbol SecretBase;
        private readonly TypeSymbol AzureKeyVaultSecretReference;
        private readonly TypeSymbol LinkedServiceReference;
        private readonly TypeSymbol AzureSqlDWLinkedService;
        private readonly TypeSymbol AzureSqlDWLinkedServiceTypeProperties;
        private readonly TypeSymbol SqlServerLinkedService;
        private readonly TypeSymbol SqlServerLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureSqlDatabaseLinkedService;
        private readonly TypeSymbol AzureSqlDatabaseLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureBatchLinkedService;
        private readonly TypeSymbol AzureBatchLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureKeyVaultLinkedService;
        private readonly TypeSymbol AzureKeyVaultLinkedServiceTypeProperties;
        private readonly TypeSymbol CosmosDbLinkedService;
        private readonly TypeSymbol CosmosDbLinkedServiceTypeProperties;
        private readonly TypeSymbol DynamicsLinkedService;
        private readonly TypeSymbol DynamicsLinkedServiceTypeProperties;
        private readonly TypeSymbol HDInsightLinkedService;
        private readonly TypeSymbol HDInsightLinkedServiceTypeProperties;
        private readonly TypeSymbol FileServerLinkedService;
        private readonly TypeSymbol FileServerLinkedServiceTypeProperties;
        private readonly TypeSymbol OracleLinkedService;
        private readonly TypeSymbol OracleLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureMySqlLinkedService;
        private readonly TypeSymbol AzureMySqlLinkedServiceTypeProperties;
        private readonly TypeSymbol MySqlLinkedService;
        private readonly TypeSymbol MySqlLinkedServiceTypeProperties;
        private readonly TypeSymbol PostgreSqlLinkedService;
        private readonly TypeSymbol PostgreSqlLinkedServiceTypeProperties;
        private readonly TypeSymbol SybaseLinkedService;
        private readonly TypeSymbol SybaseLinkedServiceTypeProperties;
        private readonly TypeSymbol Db2LinkedService;
        private readonly TypeSymbol Db2LinkedServiceTypeProperties;
        private readonly TypeSymbol TeradataLinkedService;
        private readonly TypeSymbol TeradataLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureMLLinkedService;
        private readonly TypeSymbol AzureMLLinkedServiceTypeProperties;
        private readonly TypeSymbol OdbcLinkedService;
        private readonly TypeSymbol OdbcLinkedServiceTypeProperties;
        private readonly TypeSymbol HdfsLinkedService;
        private readonly TypeSymbol HdfsLinkedServiceTypeProperties;
        private readonly TypeSymbol ODataLinkedService;
        private readonly TypeSymbol ODataLinkedServiceTypeProperties;
        private readonly TypeSymbol WebLinkedService;
        private readonly TypeSymbol WebLinkedServiceTypeProperties;
        private readonly TypeSymbol WebAnonymousAuthentication;
        private readonly TypeSymbol WebBasicAuthentication;
        private readonly TypeSymbol WebClientCertificateAuthentication;
        private readonly TypeSymbol CassandraLinkedService;
        private readonly TypeSymbol CassandraLinkedServiceTypeProperties;
        private readonly TypeSymbol MongoDbLinkedService;
        private readonly TypeSymbol MongoDbLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDataLakeStoreLinkedService;
        private readonly TypeSymbol AzureDataLakeStoreLinkedServiceTypeProperties;
        private readonly TypeSymbol SalesforceLinkedService;
        private readonly TypeSymbol SalesforceLinkedServiceTypeProperties;
        private readonly TypeSymbol SapCloudForCustomerLinkedService;
        private readonly TypeSymbol SapCloudForCustomerLinkedServiceTypeProperties;
        private readonly TypeSymbol SapEccLinkedService;
        private readonly TypeSymbol SapEccLinkedServiceTypeProperties;
        private readonly TypeSymbol AmazonS3LinkedService;
        private readonly TypeSymbol AmazonS3LinkedServiceTypeProperties;
        private readonly TypeSymbol AmazonRedshiftLinkedService;
        private readonly TypeSymbol AmazonRedshiftLinkedServiceTypeProperties;
        private readonly TypeSymbol CustomDataSourceLinkedService;
        private readonly TypeSymbol AzureSearchLinkedService;
        private readonly TypeSymbol AzureSearchLinkedServiceTypeProperties;
        private readonly TypeSymbol HttpLinkedService;
        private readonly TypeSymbol HttpLinkedServiceTypeProperties;
        private readonly TypeSymbol FtpServerLinkedService;
        private readonly TypeSymbol FtpServerLinkedServiceTypeProperties;
        private readonly TypeSymbol SftpServerLinkedService;
        private readonly TypeSymbol SftpServerLinkedServiceTypeProperties;
        private readonly TypeSymbol SapBWLinkedService;
        private readonly TypeSymbol SapBWLinkedServiceTypeProperties;
        private readonly TypeSymbol SapHanaLinkedService;
        private readonly TypeSymbol SapHanaLinkedServiceProperties;
        private readonly TypeSymbol AmazonMWSLinkedService;
        private readonly TypeSymbol AmazonMWSLinkedServiceTypeProperties;
        private readonly TypeSymbol AzurePostgreSqlLinkedService;
        private readonly TypeSymbol AzurePostgreSqlLinkedServiceTypeProperties;
        private readonly TypeSymbol ConcurLinkedService;
        private readonly TypeSymbol ConcurLinkedServiceTypeProperties;
        private readonly TypeSymbol CouchbaseLinkedService;
        private readonly TypeSymbol CouchbaseLinkedServiceTypeProperties;
        private readonly TypeSymbol DrillLinkedService;
        private readonly TypeSymbol DrillLinkedServiceTypeProperties;
        private readonly TypeSymbol EloquaLinkedService;
        private readonly TypeSymbol EloquaLinkedServiceTypeProperties;
        private readonly TypeSymbol GoogleBigQueryLinkedService;
        private readonly TypeSymbol GoogleBigQueryLinkedServiceTypeProperties;
        private readonly TypeSymbol GreenplumLinkedService;
        private readonly TypeSymbol GreenplumLinkedServiceTypeProperties;
        private readonly TypeSymbol HBaseLinkedService;
        private readonly TypeSymbol HBaseLinkedServiceTypeProperties;
        private readonly TypeSymbol HiveLinkedService;
        private readonly TypeSymbol HiveLinkedServiceTypeProperties;
        private readonly TypeSymbol HubspotLinkedService;
        private readonly TypeSymbol HubspotLinkedServiceTypeProperties;
        private readonly TypeSymbol ImpalaLinkedService;
        private readonly TypeSymbol ImpalaLinkedServiceTypeProperties;
        private readonly TypeSymbol JiraLinkedService;
        private readonly TypeSymbol JiraLinkedServiceTypeProperties;
        private readonly TypeSymbol MagentoLinkedService;
        private readonly TypeSymbol MagentoLinkedServiceTypeProperties;
        private readonly TypeSymbol MariaDBLinkedService;
        private readonly TypeSymbol MariaDBLinkedServiceTypeProperties;
        private readonly TypeSymbol MarketoLinkedService;
        private readonly TypeSymbol MarketoLinkedServiceTypeProperties;
        private readonly TypeSymbol PaypalLinkedService;
        private readonly TypeSymbol PaypalLinkedServiceTypeProperties;
        private readonly TypeSymbol PhoenixLinkedService;
        private readonly TypeSymbol PhoenixLinkedServiceTypeProperties;
        private readonly TypeSymbol PrestoLinkedService;
        private readonly TypeSymbol PrestoLinkedServiceTypeProperties;
        private readonly TypeSymbol QuickBooksLinkedService;
        private readonly TypeSymbol QuickBooksLinkedServiceTypeProperties;
        private readonly TypeSymbol ServiceNowLinkedService;
        private readonly TypeSymbol ServiceNowLinkedServiceTypeProperties;
        private readonly TypeSymbol ShopifyLinkedService;
        private readonly TypeSymbol ShopifyLinkedServiceTypeProperties;
        private readonly TypeSymbol SparkLinkedService;
        private readonly TypeSymbol SparkLinkedServiceTypeProperties;
        private readonly TypeSymbol SquareLinkedService;
        private readonly TypeSymbol SquareLinkedServiceTypeProperties;
        private readonly TypeSymbol XeroLinkedService;
        private readonly TypeSymbol XeroLinkedServiceTypeProperties;
        private readonly TypeSymbol ZohoLinkedService;
        private readonly TypeSymbol ZohoLinkedServiceTypeProperties;
        private readonly TypeSymbol VerticaLinkedService;
        private readonly TypeSymbol VerticaLinkedServiceTypeProperties;
        private readonly TypeSymbol NetezzaLinkedService;
        private readonly TypeSymbol NetezzaLinkedServiceTypeProperties;
        private readonly TypeSymbol SalesforceMarketingCloudLinkedService;
        private readonly TypeSymbol SalesforceMarketingCloudLinkedServiceTypeProperties;
        private readonly TypeSymbol HDInsightOnDemandLinkedService;
        private readonly TypeSymbol HDInsightOnDemandLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDataLakeAnalyticsLinkedService;
        private readonly TypeSymbol AzureDataLakeAnalyticsLinkedServiceTypeProperties;
        private readonly TypeSymbol AzureDatabricksLinkedService;
        private readonly TypeSymbol AzureDatabricksLinkedServiceTypeProperties;
        private readonly TypeSymbol ResponsysLinkedService;
        private readonly TypeSymbol ResponsysLinkedServiceTypeProperties;
        private readonly TypeSymbol Dataset;
        private readonly TypeSymbol AmazonS3Dataset;
        private readonly TypeSymbol AmazonS3DatasetTypeProperties;
        private readonly TypeSymbol DatasetStorageFormat;
        private readonly TypeSymbol DatasetCompression;
        private readonly TypeSymbol DatasetBZip2Compression;
        private readonly TypeSymbol DatasetGZipCompression;
        private readonly TypeSymbol DatasetDeflateCompression;
        private readonly TypeSymbol DatasetZipDeflateCompression;
        private readonly TypeSymbol AzureBlobDataset;
        private readonly TypeSymbol AzureBlobDatasetTypeProperties;
        private readonly TypeSymbol AzureTableDataset;
        private readonly TypeSymbol AzureTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSqlTableDataset;
        private readonly TypeSymbol AzureSqlTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSqlDWTableDataset;
        private readonly TypeSymbol AzureSqlDWTableDatasetTypeProperties;
        private readonly TypeSymbol CassandraTableDataset;
        private readonly TypeSymbol CassandraTableDatasetTypeProperties;
        private readonly TypeSymbol DocumentDbCollectionDataset;
        private readonly TypeSymbol DocumentDbCollectionDatasetTypeProperties;
        private readonly TypeSymbol DynamicsEntityDataset;
        private readonly TypeSymbol DynamicsEntityDatasetTypeProperties;
        private readonly TypeSymbol AzureDataLakeStoreDataset;
        private readonly TypeSymbol AzureDataLakeStoreDatasetTypeProperties;
        private readonly TypeSymbol FileShareDataset;
        private readonly TypeSymbol FileShareDatasetTypeProperties;
        private readonly TypeSymbol MongoDbCollectionDataset;
        private readonly TypeSymbol MongoDbCollectionDatasetTypeProperties;
        private readonly TypeSymbol ODataResourceDataset;
        private readonly TypeSymbol ODataResourceDatasetTypeProperties;
        private readonly TypeSymbol OracleTableDataset;
        private readonly TypeSymbol OracleTableDatasetTypeProperties;
        private readonly TypeSymbol AzureMySqlTableDataset;
        private readonly TypeSymbol AzureMySqlTableDatasetTypeProperties;
        private readonly TypeSymbol RelationalTableDataset;
        private readonly TypeSymbol RelationalTableDatasetTypeProperties;
        private readonly TypeSymbol SalesforceObjectDataset;
        private readonly TypeSymbol SalesforceObjectDatasetTypeProperties;
        private readonly TypeSymbol SapCloudForCustomerResourceDataset;
        private readonly TypeSymbol SapCloudForCustomerResourceDatasetTypeProperties;
        private readonly TypeSymbol SapEccResourceDataset;
        private readonly TypeSymbol SapEccResourceDatasetTypeProperties;
        private readonly TypeSymbol SqlServerTableDataset;
        private readonly TypeSymbol SqlServerTableDatasetTypeProperties;
        private readonly TypeSymbol WebTableDataset;
        private readonly TypeSymbol WebTableDatasetTypeProperties;
        private readonly TypeSymbol AzureSearchIndexDataset;
        private readonly TypeSymbol AzureSearchIndexDatasetTypeProperties;
        private readonly TypeSymbol HttpDataset;
        private readonly TypeSymbol HttpDatasetTypeProperties;
        private readonly TypeSymbol AmazonMWSObjectDataset;
        private readonly TypeSymbol AzurePostgreSqlTableDataset;
        private readonly TypeSymbol ConcurObjectDataset;
        private readonly TypeSymbol CouchbaseTableDataset;
        private readonly TypeSymbol DrillTableDataset;
        private readonly TypeSymbol EloquaObjectDataset;
        private readonly TypeSymbol GoogleBigQueryObjectDataset;
        private readonly TypeSymbol GreenplumTableDataset;
        private readonly TypeSymbol HBaseObjectDataset;
        private readonly TypeSymbol HiveObjectDataset;
        private readonly TypeSymbol HubspotObjectDataset;
        private readonly TypeSymbol ImpalaObjectDataset;
        private readonly TypeSymbol JiraObjectDataset;
        private readonly TypeSymbol MagentoObjectDataset;
        private readonly TypeSymbol MariaDBTableDataset;
        private readonly TypeSymbol MarketoObjectDataset;
        private readonly TypeSymbol PaypalObjectDataset;
        private readonly TypeSymbol PhoenixObjectDataset;
        private readonly TypeSymbol PrestoObjectDataset;
        private readonly TypeSymbol QuickBooksObjectDataset;
        private readonly TypeSymbol ServiceNowObjectDataset;
        private readonly TypeSymbol ShopifyObjectDataset;
        private readonly TypeSymbol SparkObjectDataset;
        private readonly TypeSymbol SquareObjectDataset;
        private readonly TypeSymbol XeroObjectDataset;
        private readonly TypeSymbol ZohoObjectDataset;
        private readonly TypeSymbol NetezzaTableDataset;
        private readonly TypeSymbol VerticaTableDataset;
        private readonly TypeSymbol SalesforceMarketingCloudObjectDataset;
        private readonly TypeSymbol ResponsysObjectDataset;
        private readonly TypeSymbol Pipeline;
        private readonly TypeSymbol Activity;
        private readonly TypeSymbol ActivityDependency;
        private readonly TypeSymbol ControlActivity;
        private readonly TypeSymbol ExecutePipelineActivity;
        private readonly TypeSymbol ExecutePipelineActivityTypeProperties;
        private readonly TypeSymbol PipelineReference;
        private readonly TypeSymbol IfConditionActivity;
        private readonly TypeSymbol IfConditionActivityTypeProperties;
        private readonly TypeSymbol Expression;
        private readonly TypeSymbol ForEachActivity;
        private readonly TypeSymbol ForEachActivityTypeProperties;
        private readonly TypeSymbol WaitActivity;
        private readonly TypeSymbol WaitActivityTypeProperties;
        private readonly TypeSymbol UntilActivity;
        private readonly TypeSymbol UntilActivityTypeProperties;
        private readonly TypeSymbol FilterActivity;
        private readonly TypeSymbol FilterActivityTypeProperties;
        private readonly TypeSymbol ExecutionActivity;
        private readonly TypeSymbol ActivityPolicy;
        private readonly TypeSymbol CopyActivity;
        private readonly TypeSymbol CopyActivityTypeProperties;
        private readonly TypeSymbol CopySource;
        private readonly TypeSymbol CopySink;
        private readonly TypeSymbol StagingSettings;
        private readonly TypeSymbol RedirectIncompatibleRowSettings;
        private readonly TypeSymbol DatasetReference;
        private readonly TypeSymbol HDInsightHiveActivity;
        private readonly TypeSymbol HDInsightHiveActivityTypeProperties;
        private readonly TypeSymbol HDInsightPigActivity;
        private readonly TypeSymbol HDInsightPigActivityTypeProperties;
        private readonly TypeSymbol HDInsightMapReduceActivity;
        private readonly TypeSymbol HDInsightMapReduceActivityTypeProperties;
        private readonly TypeSymbol HDInsightStreamingActivity;
        private readonly TypeSymbol HDInsightStreamingActivityTypeProperties;
        private readonly TypeSymbol HDInsightSparkActivity;
        private readonly TypeSymbol HDInsightSparkActivityTypeProperties;
        private readonly TypeSymbol ExecuteSSISPackageActivity;
        private readonly TypeSymbol ExecuteSSISPackageActivityTypeProperties;
        private readonly TypeSymbol SSISPackageLocation;
        private readonly TypeSymbol SSISPackageLocationTypeProperties;
        private readonly TypeSymbol SSISAccessCredential;
        private readonly TypeSymbol SSISExecutionCredential;
        private readonly TypeSymbol SSISExecutionParameter;
        private readonly TypeSymbol SSISPropertyOverride;
        private readonly TypeSymbol SSISLogLocation;
        private readonly TypeSymbol SSISLogLocationTypeProperties;
        private readonly TypeSymbol CustomActivity;
        private readonly TypeSymbol CustomActivityTypeProperties;
        private readonly TypeSymbol CustomActivityReferenceObject;
        private readonly TypeSymbol SqlServerStoredProcedureActivity;
        private readonly TypeSymbol SqlServerStoredProcedureActivityTypeProperties;
        private readonly TypeSymbol StoredProcedureParameter;
        private readonly TypeSymbol LookupActivity;
        private readonly TypeSymbol LookupActivityTypeProperties;
        private readonly TypeSymbol WebActivity;
        private readonly TypeSymbol WebActivityTypeProperties;
        private readonly TypeSymbol WebActivityAuthentication;
        private readonly TypeSymbol GetMetadataActivity;
        private readonly TypeSymbol GetMetadataActivityTypeProperties;
        private readonly TypeSymbol AzureMLBatchExecutionActivity;
        private readonly TypeSymbol AzureMLBatchExecutionActivityTypeProperties;
        private readonly TypeSymbol AzureMLWebServiceFile;
        private readonly TypeSymbol AzureMLUpdateResourceActivity;
        private readonly TypeSymbol AzureMLUpdateResourceActivityTypeProperties;
        private readonly TypeSymbol DataLakeAnalyticsUSQLActivity;
        private readonly TypeSymbol DataLakeAnalyticsUSQLActivityTypeProperties;
        private readonly TypeSymbol DatabricksNotebookActivity;
        private readonly TypeSymbol DatabricksNotebookActivityTypeProperties;
        private readonly TypeSymbol Trigger;
        private readonly TypeSymbol MultiplePipelineTrigger;
        private readonly TypeSymbol TriggerPipelineReference;
    }
}
