// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Compute_2020_06_01
    {
        private const string ProviderNamespace = "Microsoft.Compute";
        private const string ApiVersion = "2020-06-01";
        private static readonly ResourceTypeReference ResourceTypeReference_availabilitySets = new ResourceTypeReference(ProviderNamespace, new[]{"availabilitySets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_proximityPlacementGroups = new ResourceTypeReference(ProviderNamespace, new[]{"proximityPlacementGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostGroups = new ResourceTypeReference(ProviderNamespace, new[]{"hostGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sshPublicKeys = new ResourceTypeReference(ProviderNamespace, new[]{"sshPublicKeys"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachines = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_images = new ResourceTypeReference(ProviderNamespace, new[]{"images"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachineScaleSets = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachineScaleSets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostGroups_hosts = new ResourceTypeReference(ProviderNamespace, new[]{"hostGroups", "hosts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachines_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachines", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachineScaleSets_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachineScaleSets", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachineScaleSets_virtualmachines = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachineScaleSets", "virtualmachines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachineScaleSets_virtualMachines_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachineScaleSets", "virtualMachines", "extensions"}, ApiVersion);
        private static Lazy<Microsoft_Compute_2020_06_01> InstanceLazy = new Lazy<Microsoft_Compute_2020_06_01>(() => new Microsoft_Compute_2020_06_01());
        private Microsoft_Compute_2020_06_01()
        {
            AvailabilitySetProperties = new NamedObjectType("AvailabilitySetProperties", new ITypeProperty[]{new TypeProperty("platformUpdateDomainCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("platformFaultDomainCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("virtualMachines", LanguageConstants.Array, TypePropertyFlags.None), new LazyTypeProperty("proximityPlacementGroup", () => SubResource, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SubResource = new NamedObjectType("SubResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ProximityPlacementGroupProperties = new NamedObjectType("ProximityPlacementGroupProperties", new ITypeProperty[]{new TypeProperty("proximityPlacementGroupType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("colocationStatus", () => InstanceViewStatus, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            InstanceViewStatus = new NamedObjectType("InstanceViewStatus", new ITypeProperty[]{new TypeProperty("code", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("level", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("displayStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("time", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DedicatedHostGroupProperties = new NamedObjectType("DedicatedHostGroupProperties", new ITypeProperty[]{new TypeProperty("platformFaultDomainCount", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("supportAutomaticPlacement", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DedicatedHostProperties = new NamedObjectType("DedicatedHostProperties", new ITypeProperty[]{new TypeProperty("platformFaultDomain", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("autoReplaceOnFailure", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("licenseType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SshPublicKeyResourceProperties = new NamedObjectType("SshPublicKeyResourceProperties", new ITypeProperty[]{new TypeProperty("publicKey", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineExtensionProperties = new NamedObjectType("VirtualMachineExtensionProperties", new ITypeProperty[]{new TypeProperty("forceUpdateTag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("typeHandlerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("autoUpgradeMinorVersion", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAutomaticUpgrade", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("settings", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("protectedSettings", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("instanceView", () => VirtualMachineExtensionInstanceView, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineExtensionInstanceView = new NamedObjectType("VirtualMachineExtensionInstanceView", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("typeHandlerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("substatuses", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("statuses", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Plan = new NamedObjectType("Plan", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("product", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("promotionCode", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineProperties = new NamedObjectType("VirtualMachineProperties", new ITypeProperty[]{new LazyTypeProperty("hardwareProfile", () => HardwareProfile, TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None), new LazyTypeProperty("additionalCapabilities", () => AdditionalCapabilities, TypePropertyFlags.None), new LazyTypeProperty("osProfile", () => OSProfile, TypePropertyFlags.None), new LazyTypeProperty("networkProfile", () => NetworkProfile, TypePropertyFlags.None), new LazyTypeProperty("securityProfile", () => SecurityProfile, TypePropertyFlags.None), new LazyTypeProperty("diagnosticsProfile", () => DiagnosticsProfile, TypePropertyFlags.None), new LazyTypeProperty("availabilitySet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("virtualMachineScaleSet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("proximityPlacementGroup", () => SubResource, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("evictionPolicy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("billingProfile", () => BillingProfile, TypePropertyFlags.None), new LazyTypeProperty("host", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("hostGroup", () => SubResource, TypePropertyFlags.None), new TypeProperty("licenseType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("extensionsTimeBudget", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HardwareProfile = new NamedObjectType("HardwareProfile", new ITypeProperty[]{new TypeProperty("vmSize", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StorageProfile = new NamedObjectType("StorageProfile", new ITypeProperty[]{new LazyTypeProperty("imageReference", () => ImageReference, TypePropertyFlags.None), new LazyTypeProperty("osDisk", () => OSDisk, TypePropertyFlags.None), new TypeProperty("dataDisks", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ImageReference = new NamedObjectType("ImageReference", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("offer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            OSDisk = new NamedObjectType("OSDisk", new ITypeProperty[]{new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("encryptionSettings", () => DiskEncryptionSettings, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("vhd", () => VirtualHardDisk, TypePropertyFlags.None), new LazyTypeProperty("image", () => VirtualHardDisk, TypePropertyFlags.None), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("writeAcceleratorEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("diffDiskSettings", () => DiffDiskSettings, TypePropertyFlags.None), new TypeProperty("createOption", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => ManagedDiskParameters, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DiskEncryptionSettings = new NamedObjectType("DiskEncryptionSettings", new ITypeProperty[]{new LazyTypeProperty("diskEncryptionKey", () => KeyVaultSecretReference, TypePropertyFlags.None), new LazyTypeProperty("keyEncryptionKey", () => KeyVaultKeyReference, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            KeyVaultSecretReference = new NamedObjectType("KeyVaultSecretReference", new ITypeProperty[]{new TypeProperty("secretUrl", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("sourceVault", () => SubResource, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            KeyVaultKeyReference = new NamedObjectType("KeyVaultKeyReference", new ITypeProperty[]{new TypeProperty("keyUrl", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("sourceVault", () => SubResource, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            VirtualHardDisk = new NamedObjectType("VirtualHardDisk", new ITypeProperty[]{new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DiffDiskSettings = new NamedObjectType("DiffDiskSettings", new ITypeProperty[]{new TypeProperty("option", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("placement", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ManagedDiskParameters = new NamedObjectType("ManagedDiskParameters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("diskEncryptionSet", () => DiskEncryptionSetParameters, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DiskEncryptionSetParameters = new NamedObjectType("DiskEncryptionSetParameters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DataDisk = new NamedObjectType("DataDisk", new ITypeProperty[]{new TypeProperty("lun", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("vhd", () => VirtualHardDisk, TypePropertyFlags.None), new LazyTypeProperty("image", () => VirtualHardDisk, TypePropertyFlags.None), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("writeAcceleratorEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createOption", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => ManagedDiskParameters, TypePropertyFlags.None), new TypeProperty("toBeDetached", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AdditionalCapabilities = new NamedObjectType("AdditionalCapabilities", new ITypeProperty[]{new TypeProperty("ultraSSDEnabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            OSProfile = new NamedObjectType("OSProfile", new ITypeProperty[]{new TypeProperty("computerName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("adminUsername", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("adminPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customData", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("windowsConfiguration", () => WindowsConfiguration, TypePropertyFlags.None), new LazyTypeProperty("linuxConfiguration", () => LinuxConfiguration, TypePropertyFlags.None), new TypeProperty("secrets", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("allowExtensionOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("requireGuestProvisionSignal", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WindowsConfiguration = new NamedObjectType("WindowsConfiguration", new ITypeProperty[]{new TypeProperty("provisionVMAgent", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAutomaticUpdates", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("timeZone", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("additionalUnattendContent", LanguageConstants.Array, TypePropertyFlags.None), new LazyTypeProperty("patchSettings", () => PatchSettings, TypePropertyFlags.None), new LazyTypeProperty("winRM", () => WinRMConfiguration, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AdditionalUnattendContent = new NamedObjectType("AdditionalUnattendContent", new ITypeProperty[]{new TypeProperty("passName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("componentName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("settingName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("content", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PatchSettings = new NamedObjectType("PatchSettings", new ITypeProperty[]{new TypeProperty("patchMode", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WinRMConfiguration = new NamedObjectType("WinRMConfiguration", new ITypeProperty[]{new TypeProperty("listeners", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WinRMListener = new NamedObjectType("WinRMListener", new ITypeProperty[]{new TypeProperty("protocol", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("certificateUrl", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            LinuxConfiguration = new NamedObjectType("LinuxConfiguration", new ITypeProperty[]{new TypeProperty("disablePasswordAuthentication", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ssh", () => SshConfiguration, TypePropertyFlags.None), new TypeProperty("provisionVMAgent", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SshConfiguration = new NamedObjectType("SshConfiguration", new ITypeProperty[]{new TypeProperty("publicKeys", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SshPublicKey = new NamedObjectType("SshPublicKey", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyData", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VaultSecretGroup = new NamedObjectType("VaultSecretGroup", new ITypeProperty[]{new LazyTypeProperty("sourceVault", () => SubResource, TypePropertyFlags.None), new TypeProperty("vaultCertificates", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VaultCertificate = new NamedObjectType("VaultCertificate", new ITypeProperty[]{new TypeProperty("certificateUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("certificateStore", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NetworkProfile = new NamedObjectType("NetworkProfile", new ITypeProperty[]{new TypeProperty("networkInterfaces", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NetworkInterfaceReference = new NamedObjectType("NetworkInterfaceReference", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfaceReferenceProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NetworkInterfaceReferenceProperties = new NamedObjectType("NetworkInterfaceReferenceProperties", new ITypeProperty[]{new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SecurityProfile = new NamedObjectType("SecurityProfile", new ITypeProperty[]{new TypeProperty("encryptionAtHost", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DiagnosticsProfile = new NamedObjectType("DiagnosticsProfile", new ITypeProperty[]{new LazyTypeProperty("bootDiagnostics", () => BootDiagnostics, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            BootDiagnostics = new NamedObjectType("BootDiagnostics", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageUri", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            BillingProfile = new NamedObjectType("BillingProfile", new ITypeProperty[]{new TypeProperty("maxPrice", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineIdentity = new NamedObjectType("VirtualMachineIdentity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userAssignedIdentities", LanguageConstants.Any, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Components1h8m3epschemasvirtualmachineidentitypropertiesuserassignedidentitiesadditionalproperties = new NamedObjectType("Components1h8m3epschemasvirtualmachineidentitypropertiesuserassignedidentitiesadditionalproperties", new ITypeProperty[]{}, null, TypePropertyFlags.None);
            ImageProperties = new NamedObjectType("ImageProperties", new ITypeProperty[]{new LazyTypeProperty("sourceVirtualMachine", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => ImageStorageProfile, TypePropertyFlags.None), new TypeProperty("hyperVGeneration", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ImageStorageProfile = new NamedObjectType("ImageStorageProfile", new ITypeProperty[]{new LazyTypeProperty("osDisk", () => ImageOSDisk, TypePropertyFlags.None), new TypeProperty("dataDisks", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("zoneResilient", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ImageOSDisk = new NamedObjectType("ImageOSDisk", new ITypeProperty[]{new LazyTypeProperty("snapshot", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => SubResource, TypePropertyFlags.None), new TypeProperty("blobUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageAccountType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("diskEncryptionSet", () => DiskEncryptionSetParameters, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("osState", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ImageDataDisk = new NamedObjectType("ImageDataDisk", new ITypeProperty[]{new LazyTypeProperty("snapshot", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => SubResource, TypePropertyFlags.None), new TypeProperty("blobUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageAccountType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("diskEncryptionSet", () => DiskEncryptionSetParameters, TypePropertyFlags.None), new TypeProperty("lun", LanguageConstants.Int, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetProperties = new NamedObjectType("VirtualMachineScaleSetProperties", new ITypeProperty[]{new LazyTypeProperty("upgradePolicy", () => UpgradePolicy, TypePropertyFlags.None), new LazyTypeProperty("automaticRepairsPolicy", () => AutomaticRepairsPolicy, TypePropertyFlags.None), new LazyTypeProperty("virtualMachineProfile", () => VirtualMachineScaleSetVMProfile, TypePropertyFlags.None), new TypeProperty("overprovision", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("doNotRunExtensionsOnOverprovisionedVMs", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("singlePlacementGroup", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("zoneBalance", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("platformFaultDomainCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("proximityPlacementGroup", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("hostGroup", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("additionalCapabilities", () => AdditionalCapabilities, TypePropertyFlags.None), new LazyTypeProperty("scaleInPolicy", () => ScaleInPolicy, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            UpgradePolicy = new NamedObjectType("UpgradePolicy", new ITypeProperty[]{new TypeProperty("mode", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("rollingUpgradePolicy", () => RollingUpgradePolicy, TypePropertyFlags.None), new LazyTypeProperty("automaticOSUpgradePolicy", () => AutomaticOSUpgradePolicy, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RollingUpgradePolicy = new NamedObjectType("RollingUpgradePolicy", new ITypeProperty[]{new TypeProperty("maxBatchInstancePercent", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxUnhealthyInstancePercent", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxUnhealthyUpgradedInstancePercent", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("pauseTimeBetweenBatches", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutomaticOSUpgradePolicy = new NamedObjectType("AutomaticOSUpgradePolicy", new ITypeProperty[]{new TypeProperty("enableAutomaticOSUpgrade", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("disableAutomaticRollback", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutomaticRepairsPolicy = new NamedObjectType("AutomaticRepairsPolicy", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("gracePeriod", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetVMProfile = new NamedObjectType("VirtualMachineScaleSetVMProfile", new ITypeProperty[]{new LazyTypeProperty("osProfile", () => VirtualMachineScaleSetOSProfile, TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => VirtualMachineScaleSetStorageProfile, TypePropertyFlags.None), new LazyTypeProperty("networkProfile", () => VirtualMachineScaleSetNetworkProfile, TypePropertyFlags.None), new LazyTypeProperty("securityProfile", () => SecurityProfile, TypePropertyFlags.None), new LazyTypeProperty("diagnosticsProfile", () => DiagnosticsProfile, TypePropertyFlags.None), new LazyTypeProperty("extensionProfile", () => VirtualMachineScaleSetExtensionProfile, TypePropertyFlags.None), new TypeProperty("licenseType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("evictionPolicy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("billingProfile", () => BillingProfile, TypePropertyFlags.None), new LazyTypeProperty("scheduledEventsProfile", () => ScheduledEventsProfile, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetOSProfile = new NamedObjectType("VirtualMachineScaleSetOSProfile", new ITypeProperty[]{new TypeProperty("computerNamePrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("adminUsername", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("adminPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customData", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("windowsConfiguration", () => WindowsConfiguration, TypePropertyFlags.None), new LazyTypeProperty("linuxConfiguration", () => LinuxConfiguration, TypePropertyFlags.None), new TypeProperty("secrets", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetStorageProfile = new NamedObjectType("VirtualMachineScaleSetStorageProfile", new ITypeProperty[]{new LazyTypeProperty("imageReference", () => ImageReference, TypePropertyFlags.None), new LazyTypeProperty("osDisk", () => VirtualMachineScaleSetOSDisk, TypePropertyFlags.None), new TypeProperty("dataDisks", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetOSDisk = new NamedObjectType("VirtualMachineScaleSetOSDisk", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("writeAcceleratorEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createOption", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("diffDiskSettings", () => DiffDiskSettings, TypePropertyFlags.None), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("image", () => VirtualHardDisk, TypePropertyFlags.None), new TypeProperty("vhdContainers", LanguageConstants.Array, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => VirtualMachineScaleSetManagedDiskParameters, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetManagedDiskParameters = new NamedObjectType("VirtualMachineScaleSetManagedDiskParameters", new ITypeProperty[]{new TypeProperty("storageAccountType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("diskEncryptionSet", () => DiskEncryptionSetParameters, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetDataDisk = new NamedObjectType("VirtualMachineScaleSetDataDisk", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lun", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("caching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("writeAcceleratorEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createOption", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("diskSizeGB", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("managedDisk", () => VirtualMachineScaleSetManagedDiskParameters, TypePropertyFlags.None), new TypeProperty("diskIOPSReadWrite", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("diskMBpsReadWrite", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetNetworkProfile = new NamedObjectType("VirtualMachineScaleSetNetworkProfile", new ITypeProperty[]{new LazyTypeProperty("healthProbe", () => ApiEntityReference, TypePropertyFlags.None), new TypeProperty("networkInterfaceConfigurations", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ApiEntityReference = new NamedObjectType("ApiEntityReference", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetNetworkConfiguration = new NamedObjectType("VirtualMachineScaleSetNetworkConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VirtualMachineScaleSetNetworkConfigurationProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetNetworkConfigurationProperties = new NamedObjectType("VirtualMachineScaleSetNetworkConfigurationProperties", new ITypeProperty[]{new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAcceleratedNetworking", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("networkSecurityGroup", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("dnsSettings", () => VirtualMachineScaleSetNetworkConfigurationDnsSettings, TypePropertyFlags.None), new TypeProperty("ipConfigurations", LanguageConstants.Array, TypePropertyFlags.Required), new TypeProperty("enableIPForwarding", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetNetworkConfigurationDnsSettings = new NamedObjectType("VirtualMachineScaleSetNetworkConfigurationDnsSettings", new ITypeProperty[]{new TypeProperty("dnsServers", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetIPConfiguration = new NamedObjectType("VirtualMachineScaleSetIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VirtualMachineScaleSetIPConfigurationProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetIPConfigurationProperties = new NamedObjectType("VirtualMachineScaleSetIPConfigurationProperties", new ITypeProperty[]{new LazyTypeProperty("subnet", () => ApiEntityReference, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddressConfiguration", () => VirtualMachineScaleSetPublicIPAddressConfiguration, TypePropertyFlags.None), new TypeProperty("privateIPAddressVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("applicationGatewayBackendAddressPools", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("applicationSecurityGroups", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("loadBalancerBackendAddressPools", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("loadBalancerInboundNatPools", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetPublicIPAddressConfiguration = new NamedObjectType("VirtualMachineScaleSetPublicIPAddressConfiguration", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VirtualMachineScaleSetPublicIPAddressConfigurationProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetPublicIPAddressConfigurationProperties = new NamedObjectType("VirtualMachineScaleSetPublicIPAddressConfigurationProperties", new ITypeProperty[]{new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("dnsSettings", () => VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings, TypePropertyFlags.None), new TypeProperty("ipTags", LanguageConstants.Array, TypePropertyFlags.None), new LazyTypeProperty("publicIPPrefix", () => SubResource, TypePropertyFlags.None), new TypeProperty("publicIPAddressVersion", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings = new NamedObjectType("VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings", new ITypeProperty[]{new TypeProperty("domainNameLabel", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetIpTag = new NamedObjectType("VirtualMachineScaleSetIpTag", new ITypeProperty[]{new TypeProperty("ipTagType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetExtensionProfile = new NamedObjectType("VirtualMachineScaleSetExtensionProfile", new ITypeProperty[]{new TypeProperty("extensions", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("extensionsTimeBudget", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetExtension = new NamedObjectType("VirtualMachineScaleSetExtension", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineScaleSetExtensionProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetExtensionProperties = new NamedObjectType("VirtualMachineScaleSetExtensionProperties", new ITypeProperty[]{new TypeProperty("forceUpdateTag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("typeHandlerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("autoUpgradeMinorVersion", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAutomaticUpgrade", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("settings", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("protectedSettings", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("provisionAfterExtensions", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ScheduledEventsProfile = new NamedObjectType("ScheduledEventsProfile", new ITypeProperty[]{new LazyTypeProperty("terminateNotificationProfile", () => TerminateNotificationProfile, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            TerminateNotificationProfile = new NamedObjectType("TerminateNotificationProfile", new ITypeProperty[]{new TypeProperty("notBeforeTimeout", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enable", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ScaleInPolicy = new NamedObjectType("ScaleInPolicy", new ITypeProperty[]{new TypeProperty("rules", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetIdentity = new NamedObjectType("VirtualMachineScaleSetIdentity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userAssignedIdentities", LanguageConstants.Any, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Componentsnj115sschemasvirtualmachinescalesetidentitypropertiesuserassignedidentitiesadditionalproperties = new NamedObjectType("Componentsnj115sschemasvirtualmachinescalesetidentitypropertiesuserassignedidentitiesadditionalproperties", new ITypeProperty[]{}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetVMProperties = new NamedObjectType("VirtualMachineScaleSetVMProperties", new ITypeProperty[]{new LazyTypeProperty("hardwareProfile", () => HardwareProfile, TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None), new LazyTypeProperty("additionalCapabilities", () => AdditionalCapabilities, TypePropertyFlags.None), new LazyTypeProperty("osProfile", () => OSProfile, TypePropertyFlags.None), new LazyTypeProperty("securityProfile", () => SecurityProfile, TypePropertyFlags.None), new LazyTypeProperty("networkProfile", () => NetworkProfile, TypePropertyFlags.None), new LazyTypeProperty("networkProfileConfiguration", () => VirtualMachineScaleSetVMNetworkProfileConfiguration, TypePropertyFlags.None), new LazyTypeProperty("diagnosticsProfile", () => DiagnosticsProfile, TypePropertyFlags.None), new LazyTypeProperty("availabilitySet", () => SubResource, TypePropertyFlags.None), new TypeProperty("licenseType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("protectionPolicy", () => VirtualMachineScaleSetVMProtectionPolicy, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetVMNetworkProfileConfiguration = new NamedObjectType("VirtualMachineScaleSetVMNetworkProfileConfiguration", new ITypeProperty[]{new TypeProperty("networkInterfaceConfigurations", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualMachineScaleSetVMProtectionPolicy = new NamedObjectType("VirtualMachineScaleSetVMProtectionPolicy", new ITypeProperty[]{new TypeProperty("protectFromScaleIn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("protectFromScaleSetActions", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceType_availabilitySets = new ResourceType("Microsoft.Compute/availabilitySets", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AvailabilitySetProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_availabilitySets);
            ResourceType_proximityPlacementGroups = new ResourceType("Microsoft.Compute/proximityPlacementGroups", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ProximityPlacementGroupProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_proximityPlacementGroups);
            ResourceType_hostGroups = new ResourceType("Microsoft.Compute/hostGroups", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DedicatedHostGroupProperties, TypePropertyFlags.Required), new TypeProperty("zones", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_hostGroups);
            ResourceType_sshPublicKeys = new ResourceType("Microsoft.Compute/sshPublicKeys", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SshPublicKeyResourceProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sshPublicKeys);
            ResourceType_virtualMachines = new ResourceType("Microsoft.Compute/virtualMachines", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("plan", () => Plan, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineProperties, TypePropertyFlags.Required), new LazyTypeProperty("identity", () => VirtualMachineIdentity, TypePropertyFlags.None), new TypeProperty("zones", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachines);
            ResourceType_images = new ResourceType("Microsoft.Compute/images", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ImageProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_images);
            ResourceType_virtualMachineScaleSets = new ResourceType("Microsoft.Compute/virtualMachineScaleSets", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("plan", () => Plan, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineScaleSetProperties, TypePropertyFlags.Required), new LazyTypeProperty("identity", () => VirtualMachineScaleSetIdentity, TypePropertyFlags.None), new TypeProperty("zones", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachineScaleSets);
            ResourceType_hostGroups_hosts = new ResourceType("Microsoft.Compute/hostGroups/hosts", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DedicatedHostProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_hostGroups_hosts);
            ResourceType_virtualMachines_extensions = new ResourceType("Microsoft.Compute/virtualMachines/extensions", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineExtensionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachines_extensions);
            ResourceType_virtualMachineScaleSets_extensions = new ResourceType("Microsoft.Compute/virtualMachineScaleSets/extensions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VirtualMachineScaleSetExtensionProperties, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachineScaleSets_extensions);
            ResourceType_virtualMachineScaleSets_virtualmachines = new ResourceType("Microsoft.Compute/virtualMachineScaleSets/virtualmachines", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineScaleSetVMProperties, TypePropertyFlags.Required), new LazyTypeProperty("plan", () => Plan, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachineScaleSets_virtualmachines);
            ResourceType_virtualMachineScaleSets_virtualMachines_extensions = new ResourceType("Microsoft.Compute/virtualMachineScaleSets/virtualMachines/extensions", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualMachineExtensionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_virtualMachineScaleSets_virtualMachines_extensions);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_availabilitySets, () => InstanceLazy.Value.ResourceType_availabilitySets);
            registrar.RegisterType(ResourceTypeReference_proximityPlacementGroups, () => InstanceLazy.Value.ResourceType_proximityPlacementGroups);
            registrar.RegisterType(ResourceTypeReference_hostGroups, () => InstanceLazy.Value.ResourceType_hostGroups);
            registrar.RegisterType(ResourceTypeReference_sshPublicKeys, () => InstanceLazy.Value.ResourceType_sshPublicKeys);
            registrar.RegisterType(ResourceTypeReference_virtualMachines, () => InstanceLazy.Value.ResourceType_virtualMachines);
            registrar.RegisterType(ResourceTypeReference_images, () => InstanceLazy.Value.ResourceType_images);
            registrar.RegisterType(ResourceTypeReference_virtualMachineScaleSets, () => InstanceLazy.Value.ResourceType_virtualMachineScaleSets);
            registrar.RegisterType(ResourceTypeReference_hostGroups_hosts, () => InstanceLazy.Value.ResourceType_hostGroups_hosts);
            registrar.RegisterType(ResourceTypeReference_virtualMachines_extensions, () => InstanceLazy.Value.ResourceType_virtualMachines_extensions);
            registrar.RegisterType(ResourceTypeReference_virtualMachineScaleSets_extensions, () => InstanceLazy.Value.ResourceType_virtualMachineScaleSets_extensions);
            registrar.RegisterType(ResourceTypeReference_virtualMachineScaleSets_virtualmachines, () => InstanceLazy.Value.ResourceType_virtualMachineScaleSets_virtualmachines);
            registrar.RegisterType(ResourceTypeReference_virtualMachineScaleSets_virtualMachines_extensions, () => InstanceLazy.Value.ResourceType_virtualMachineScaleSets_virtualMachines_extensions);
        }
        private readonly ResourceType ResourceType_availabilitySets;
        private readonly ResourceType ResourceType_proximityPlacementGroups;
        private readonly ResourceType ResourceType_hostGroups;
        private readonly ResourceType ResourceType_sshPublicKeys;
        private readonly ResourceType ResourceType_virtualMachines;
        private readonly ResourceType ResourceType_images;
        private readonly ResourceType ResourceType_virtualMachineScaleSets;
        private readonly ResourceType ResourceType_hostGroups_hosts;
        private readonly ResourceType ResourceType_virtualMachines_extensions;
        private readonly ResourceType ResourceType_virtualMachineScaleSets_extensions;
        private readonly ResourceType ResourceType_virtualMachineScaleSets_virtualmachines;
        private readonly ResourceType ResourceType_virtualMachineScaleSets_virtualMachines_extensions;
        private readonly TypeSymbol AvailabilitySetProperties;
        private readonly TypeSymbol SubResource;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol ProximityPlacementGroupProperties;
        private readonly TypeSymbol InstanceViewStatus;
        private readonly TypeSymbol DedicatedHostGroupProperties;
        private readonly TypeSymbol DedicatedHostProperties;
        private readonly TypeSymbol SshPublicKeyResourceProperties;
        private readonly TypeSymbol VirtualMachineExtensionProperties;
        private readonly TypeSymbol VirtualMachineExtensionInstanceView;
        private readonly TypeSymbol Plan;
        private readonly TypeSymbol VirtualMachineProperties;
        private readonly TypeSymbol HardwareProfile;
        private readonly TypeSymbol StorageProfile;
        private readonly TypeSymbol ImageReference;
        private readonly TypeSymbol OSDisk;
        private readonly TypeSymbol DiskEncryptionSettings;
        private readonly TypeSymbol KeyVaultSecretReference;
        private readonly TypeSymbol KeyVaultKeyReference;
        private readonly TypeSymbol VirtualHardDisk;
        private readonly TypeSymbol DiffDiskSettings;
        private readonly TypeSymbol ManagedDiskParameters;
        private readonly TypeSymbol DiskEncryptionSetParameters;
        private readonly TypeSymbol DataDisk;
        private readonly TypeSymbol AdditionalCapabilities;
        private readonly TypeSymbol OSProfile;
        private readonly TypeSymbol WindowsConfiguration;
        private readonly TypeSymbol AdditionalUnattendContent;
        private readonly TypeSymbol PatchSettings;
        private readonly TypeSymbol WinRMConfiguration;
        private readonly TypeSymbol WinRMListener;
        private readonly TypeSymbol LinuxConfiguration;
        private readonly TypeSymbol SshConfiguration;
        private readonly TypeSymbol SshPublicKey;
        private readonly TypeSymbol VaultSecretGroup;
        private readonly TypeSymbol VaultCertificate;
        private readonly TypeSymbol NetworkProfile;
        private readonly TypeSymbol NetworkInterfaceReference;
        private readonly TypeSymbol NetworkInterfaceReferenceProperties;
        private readonly TypeSymbol SecurityProfile;
        private readonly TypeSymbol DiagnosticsProfile;
        private readonly TypeSymbol BootDiagnostics;
        private readonly TypeSymbol BillingProfile;
        private readonly TypeSymbol VirtualMachineIdentity;
        private readonly TypeSymbol Components1h8m3epschemasvirtualmachineidentitypropertiesuserassignedidentitiesadditionalproperties;
        private readonly TypeSymbol ImageProperties;
        private readonly TypeSymbol ImageStorageProfile;
        private readonly TypeSymbol ImageOSDisk;
        private readonly TypeSymbol ImageDataDisk;
        private readonly TypeSymbol VirtualMachineScaleSetProperties;
        private readonly TypeSymbol UpgradePolicy;
        private readonly TypeSymbol RollingUpgradePolicy;
        private readonly TypeSymbol AutomaticOSUpgradePolicy;
        private readonly TypeSymbol AutomaticRepairsPolicy;
        private readonly TypeSymbol VirtualMachineScaleSetVMProfile;
        private readonly TypeSymbol VirtualMachineScaleSetOSProfile;
        private readonly TypeSymbol VirtualMachineScaleSetStorageProfile;
        private readonly TypeSymbol VirtualMachineScaleSetOSDisk;
        private readonly TypeSymbol VirtualMachineScaleSetManagedDiskParameters;
        private readonly TypeSymbol VirtualMachineScaleSetDataDisk;
        private readonly TypeSymbol VirtualMachineScaleSetNetworkProfile;
        private readonly TypeSymbol ApiEntityReference;
        private readonly TypeSymbol VirtualMachineScaleSetNetworkConfiguration;
        private readonly TypeSymbol VirtualMachineScaleSetNetworkConfigurationProperties;
        private readonly TypeSymbol VirtualMachineScaleSetNetworkConfigurationDnsSettings;
        private readonly TypeSymbol VirtualMachineScaleSetIPConfiguration;
        private readonly TypeSymbol VirtualMachineScaleSetIPConfigurationProperties;
        private readonly TypeSymbol VirtualMachineScaleSetPublicIPAddressConfiguration;
        private readonly TypeSymbol VirtualMachineScaleSetPublicIPAddressConfigurationProperties;
        private readonly TypeSymbol VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings;
        private readonly TypeSymbol VirtualMachineScaleSetIpTag;
        private readonly TypeSymbol VirtualMachineScaleSetExtensionProfile;
        private readonly TypeSymbol VirtualMachineScaleSetExtension;
        private readonly TypeSymbol VirtualMachineScaleSetExtensionProperties;
        private readonly TypeSymbol ScheduledEventsProfile;
        private readonly TypeSymbol TerminateNotificationProfile;
        private readonly TypeSymbol ScaleInPolicy;
        private readonly TypeSymbol VirtualMachineScaleSetIdentity;
        private readonly TypeSymbol Componentsnj115sschemasvirtualmachinescalesetidentitypropertiesuserassignedidentitiesadditionalproperties;
        private readonly TypeSymbol VirtualMachineScaleSetVMProperties;
        private readonly TypeSymbol VirtualMachineScaleSetVMNetworkProfileConfiguration;
        private readonly TypeSymbol VirtualMachineScaleSetVMProtectionPolicy;
    }
}
