// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_SqlVirtualMachine_2017_03_01_preview
    {
        private const string ProviderNamespace = "Microsoft.SqlVirtualMachine";
        private const string ApiVersion = "2017-03-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_sqlVirtualMachineGroups = new ResourceTypeReference(ProviderNamespace, new[]{"sqlVirtualMachineGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sqlVirtualMachines = new ResourceTypeReference(ProviderNamespace, new[]{"sqlVirtualMachines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sqlVirtualMachineGroups_availabilityGroupListeners = new ResourceTypeReference(ProviderNamespace, new[]{"sqlVirtualMachineGroups", "availabilityGroupListeners"}, ApiVersion);
        private static Lazy<Microsoft_SqlVirtualMachine_2017_03_01_preview> InstanceLazy = new Lazy<Microsoft_SqlVirtualMachine_2017_03_01_preview>(() => new Microsoft_SqlVirtualMachine_2017_03_01_preview());
        private Microsoft_SqlVirtualMachine_2017_03_01_preview()
        {
            AvailabilityGroupListenerProperties = new NamedObjectType("AvailabilityGroupListenerProperties", new ITypeProperty[]{new TypeProperty("availabilityGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("loadBalancerConfigurations", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("createDefaultAvailabilityGroupIfNotExist", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            LoadBalancerConfiguration = new NamedObjectType("LoadBalancerConfiguration", new ITypeProperty[]{new LazyTypeProperty("privateIpAddress", () => PrivateIPAddress, TypePropertyFlags.None), new TypeProperty("publicIpAddressResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("loadBalancerResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("probePort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sqlVirtualMachineInstances", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PrivateIPAddress = new NamedObjectType("PrivateIPAddress", new ITypeProperty[]{new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetResourceId", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlVirtualMachineGroupProperties = new NamedObjectType("SqlVirtualMachineGroupProperties", new ITypeProperty[]{new TypeProperty("sqlImageOffer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlImageSku", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("wsfcDomainProfile", () => WsfcDomainProfile, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WsfcDomainProfile = new NamedObjectType("WsfcDomainProfile", new ITypeProperty[]{new TypeProperty("domainFqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ouPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clusterBootstrapAccount", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clusterOperatorAccount", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlServiceAccount", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fileShareWitnessPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountPrimaryKey", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceIdentity = new NamedObjectType("ResourceIdentity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlVirtualMachineProperties = new NamedObjectType("SqlVirtualMachineProperties", new ITypeProperty[]{new TypeProperty("virtualMachineResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlImageOffer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlServerLicenseType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlManagement", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlImageSku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlVirtualMachineGroupResourceId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("wsfcDomainCredentials", () => WsfcDomainCredentials, TypePropertyFlags.None), new LazyTypeProperty("autoPatchingSettings", () => AutoPatchingSettings, TypePropertyFlags.None), new LazyTypeProperty("autoBackupSettings", () => AutoBackupSettings, TypePropertyFlags.None), new LazyTypeProperty("keyVaultCredentialSettings", () => KeyVaultCredentialSettings, TypePropertyFlags.None), new LazyTypeProperty("serverConfigurationsManagementSettings", () => ServerConfigurationsManagementSettings, TypePropertyFlags.None), new LazyTypeProperty("storageConfigurationSettings", () => StorageConfigurationSettings, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WsfcDomainCredentials = new NamedObjectType("WsfcDomainCredentials", new ITypeProperty[]{new TypeProperty("clusterBootstrapAccountPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clusterOperatorAccountPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlServiceAccountPassword", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoPatchingSettings = new NamedObjectType("AutoPatchingSettings", new ITypeProperty[]{new TypeProperty("enable", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dayOfWeek", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maintenanceWindowStartingHour", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maintenanceWindowDuration", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoBackupSettings = new NamedObjectType("AutoBackupSettings", new ITypeProperty[]{new TypeProperty("enable", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableEncryption", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("retentionPeriod", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageAccountUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("backupSystemDbs", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("backupScheduleType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fullBackupFrequency", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fullBackupStartTime", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("fullBackupWindowHours", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("logBackupFrequency", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            KeyVaultCredentialSettings = new NamedObjectType("KeyVaultCredentialSettings", new ITypeProperty[]{new TypeProperty("enable", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("credentialName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureKeyVaultUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("servicePrincipalName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("servicePrincipalSecret", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ServerConfigurationsManagementSettings = new NamedObjectType("ServerConfigurationsManagementSettings", new ITypeProperty[]{new LazyTypeProperty("sqlConnectivityUpdateSettings", () => SqlConnectivityUpdateSettings, TypePropertyFlags.None), new LazyTypeProperty("sqlWorkloadTypeUpdateSettings", () => SqlWorkloadTypeUpdateSettings, TypePropertyFlags.None), new LazyTypeProperty("sqlStorageUpdateSettings", () => SqlStorageUpdateSettings, TypePropertyFlags.None), new LazyTypeProperty("additionalFeaturesServerConfigurations", () => AdditionalFeaturesServerConfigurations, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlConnectivityUpdateSettings = new NamedObjectType("SqlConnectivityUpdateSettings", new ITypeProperty[]{new TypeProperty("connectivityType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sqlAuthUpdateUserName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlAuthUpdatePassword", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlWorkloadTypeUpdateSettings = new NamedObjectType("SqlWorkloadTypeUpdateSettings", new ITypeProperty[]{new TypeProperty("sqlWorkloadType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SqlStorageUpdateSettings = new NamedObjectType("SqlStorageUpdateSettings", new ITypeProperty[]{new TypeProperty("diskCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("startingDeviceId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("diskConfigurationType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AdditionalFeaturesServerConfigurations = new NamedObjectType("AdditionalFeaturesServerConfigurations", new ITypeProperty[]{new TypeProperty("isRServicesEnabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StorageConfigurationSettings = new NamedObjectType("StorageConfigurationSettings", new ITypeProperty[]{new LazyTypeProperty("sqlDataSettings", () => SQLStorageSettings, TypePropertyFlags.None), new LazyTypeProperty("sqlLogSettings", () => SQLStorageSettings, TypePropertyFlags.None), new LazyTypeProperty("sqlTempDbSettings", () => SQLStorageSettings, TypePropertyFlags.None), new TypeProperty("diskConfigurationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageWorkloadType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SQLStorageSettings = new NamedObjectType("SQLStorageSettings", new ITypeProperty[]{new TypeProperty("luns", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("defaultFilePath", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceType_sqlVirtualMachineGroups = new ResourceType("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlVirtualMachineGroupProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sqlVirtualMachineGroups);
            ResourceType_sqlVirtualMachines = new ResourceType("Microsoft.SqlVirtualMachine/sqlVirtualMachines", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlVirtualMachineProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sqlVirtualMachines);
            ResourceType_sqlVirtualMachineGroups_availabilityGroupListeners = new ResourceType("Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/availabilityGroupListeners", new ITypeProperty[]{new LazyTypeProperty("properties", () => AvailabilityGroupListenerProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sqlVirtualMachineGroups_availabilityGroupListeners);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_sqlVirtualMachineGroups, () => InstanceLazy.Value.ResourceType_sqlVirtualMachineGroups);
            registrar.RegisterType(ResourceTypeReference_sqlVirtualMachines, () => InstanceLazy.Value.ResourceType_sqlVirtualMachines);
            registrar.RegisterType(ResourceTypeReference_sqlVirtualMachineGroups_availabilityGroupListeners, () => InstanceLazy.Value.ResourceType_sqlVirtualMachineGroups_availabilityGroupListeners);
        }
        private readonly ResourceType ResourceType_sqlVirtualMachineGroups;
        private readonly ResourceType ResourceType_sqlVirtualMachines;
        private readonly ResourceType ResourceType_sqlVirtualMachineGroups_availabilityGroupListeners;
        private readonly TypeSymbol AvailabilityGroupListenerProperties;
        private readonly TypeSymbol LoadBalancerConfiguration;
        private readonly TypeSymbol PrivateIPAddress;
        private readonly TypeSymbol SqlVirtualMachineGroupProperties;
        private readonly TypeSymbol WsfcDomainProfile;
        private readonly TypeSymbol ResourceIdentity;
        private readonly TypeSymbol SqlVirtualMachineProperties;
        private readonly TypeSymbol WsfcDomainCredentials;
        private readonly TypeSymbol AutoPatchingSettings;
        private readonly TypeSymbol AutoBackupSettings;
        private readonly TypeSymbol KeyVaultCredentialSettings;
        private readonly TypeSymbol ServerConfigurationsManagementSettings;
        private readonly TypeSymbol SqlConnectivityUpdateSettings;
        private readonly TypeSymbol SqlWorkloadTypeUpdateSettings;
        private readonly TypeSymbol SqlStorageUpdateSettings;
        private readonly TypeSymbol AdditionalFeaturesServerConfigurations;
        private readonly TypeSymbol StorageConfigurationSettings;
        private readonly TypeSymbol SQLStorageSettings;
    }
}
