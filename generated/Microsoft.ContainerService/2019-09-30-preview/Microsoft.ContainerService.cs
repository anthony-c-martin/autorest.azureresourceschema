// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_ContainerService_2019_09_30_preview
    {
        private const string ProviderNamespace = "Microsoft.ContainerService";
        private const string ApiVersion = "2019-09-30-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_openShiftManagedClusters = new ResourceTypeReference(ProviderNamespace, new[]{"openShiftManagedClusters"}, ApiVersion);
        private static Lazy<Microsoft_ContainerService_2019_09_30_preview> InstanceLazy = new Lazy<Microsoft_ContainerService_2019_09_30_preview>(() => new Microsoft_ContainerService_2019_09_30_preview());
        private Microsoft_ContainerService_2019_09_30_preview()
        {
            PurchasePlan = new NamedObjectType("PurchasePlan", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("product", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("promotionCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None)}, null);
            OpenShiftManagedClusterProperties = new NamedObjectType("OpenShiftManagedClusterProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("openShiftVersion", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("clusterVersion", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("publicHostname", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("networkProfile", () => NetworkProfile, TypePropertyFlags.None), new LazyTypeProperty("routerProfiles", () => new TypedArrayType(OpenShiftRouterProfile), TypePropertyFlags.None), new LazyTypeProperty("masterPoolProfile", () => OpenShiftManagedClusterMasterPoolProfile, TypePropertyFlags.None), new LazyTypeProperty("agentPoolProfiles", () => new TypedArrayType(OpenShiftManagedClusterAgentPoolProfile), TypePropertyFlags.None), new LazyTypeProperty("authProfile", () => OpenShiftManagedClusterAuthProfile, TypePropertyFlags.None), new LazyTypeProperty("monitorProfile", () => OpenShiftManagedClusterMonitorProfile, TypePropertyFlags.None)}, null);
            NetworkProfile = new NamedObjectType("NetworkProfile", new ITypeProperty[]{new TypeProperty("vnetCidr", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("peerVnetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            OpenShiftRouterProfile = new NamedObjectType("OpenShiftRouterProfile", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicSubdomain", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            OpenShiftManagedClusterMasterPoolProfile = new NamedObjectType("OpenShiftManagedClusterMasterPoolProfile", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("vmSize", UnionType.Create(new StringLiteralType("'Standard_D2s_v3'"), new StringLiteralType("'Standard_D4s_v3'"), new StringLiteralType("'Standard_D8s_v3'"), new StringLiteralType("'Standard_D16s_v3'"), new StringLiteralType("'Standard_D32s_v3'"), new StringLiteralType("'Standard_D64s_v3'"), new StringLiteralType("'Standard_DS4_v2'"), new StringLiteralType("'Standard_DS5_v2'"), new StringLiteralType("'Standard_F8s_v2'"), new StringLiteralType("'Standard_F16s_v2'"), new StringLiteralType("'Standard_F32s_v2'"), new StringLiteralType("'Standard_F64s_v2'"), new StringLiteralType("'Standard_F72s_v2'"), new StringLiteralType("'Standard_F8s'"), new StringLiteralType("'Standard_F16s'"), new StringLiteralType("'Standard_E4s_v3'"), new StringLiteralType("'Standard_E8s_v3'"), new StringLiteralType("'Standard_E16s_v3'"), new StringLiteralType("'Standard_E20s_v3'"), new StringLiteralType("'Standard_E32s_v3'"), new StringLiteralType("'Standard_E64s_v3'"), new StringLiteralType("'Standard_GS2'"), new StringLiteralType("'Standard_GS3'"), new StringLiteralType("'Standard_GS4'"), new StringLiteralType("'Standard_GS5'"), new StringLiteralType("'Standard_DS12_v2'"), new StringLiteralType("'Standard_DS13_v2'"), new StringLiteralType("'Standard_DS14_v2'"), new StringLiteralType("'Standard_DS15_v2'"), new StringLiteralType("'Standard_L4s'"), new StringLiteralType("'Standard_L8s'"), new StringLiteralType("'Standard_L16s'"), new StringLiteralType("'Standard_L32s'")), TypePropertyFlags.Required), new TypeProperty("subnetCidr", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", UnionType.Create(new StringLiteralType("'Linux'"), new StringLiteralType("'Windows'")), TypePropertyFlags.None)}, null);
            OpenShiftManagedClusterAgentPoolProfile = new NamedObjectType("OpenShiftManagedClusterAgentPoolProfile", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("vmSize", UnionType.Create(new StringLiteralType("'Standard_D2s_v3'"), new StringLiteralType("'Standard_D4s_v3'"), new StringLiteralType("'Standard_D8s_v3'"), new StringLiteralType("'Standard_D16s_v3'"), new StringLiteralType("'Standard_D32s_v3'"), new StringLiteralType("'Standard_D64s_v3'"), new StringLiteralType("'Standard_DS4_v2'"), new StringLiteralType("'Standard_DS5_v2'"), new StringLiteralType("'Standard_F8s_v2'"), new StringLiteralType("'Standard_F16s_v2'"), new StringLiteralType("'Standard_F32s_v2'"), new StringLiteralType("'Standard_F64s_v2'"), new StringLiteralType("'Standard_F72s_v2'"), new StringLiteralType("'Standard_F8s'"), new StringLiteralType("'Standard_F16s'"), new StringLiteralType("'Standard_E4s_v3'"), new StringLiteralType("'Standard_E8s_v3'"), new StringLiteralType("'Standard_E16s_v3'"), new StringLiteralType("'Standard_E20s_v3'"), new StringLiteralType("'Standard_E32s_v3'"), new StringLiteralType("'Standard_E64s_v3'"), new StringLiteralType("'Standard_GS2'"), new StringLiteralType("'Standard_GS3'"), new StringLiteralType("'Standard_GS4'"), new StringLiteralType("'Standard_GS5'"), new StringLiteralType("'Standard_DS12_v2'"), new StringLiteralType("'Standard_DS13_v2'"), new StringLiteralType("'Standard_DS14_v2'"), new StringLiteralType("'Standard_DS15_v2'"), new StringLiteralType("'Standard_L4s'"), new StringLiteralType("'Standard_L8s'"), new StringLiteralType("'Standard_L16s'"), new StringLiteralType("'Standard_L32s'")), TypePropertyFlags.Required), new TypeProperty("subnetCidr", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", UnionType.Create(new StringLiteralType("'Linux'"), new StringLiteralType("'Windows'")), TypePropertyFlags.None), new TypeProperty("role", UnionType.Create(new StringLiteralType("'compute'"), new StringLiteralType("'infra'")), TypePropertyFlags.None)}, null);
            OpenShiftManagedClusterAuthProfile = new NamedObjectType("OpenShiftManagedClusterAuthProfile", new ITypeProperty[]{new LazyTypeProperty("identityProviders", () => new TypedArrayType(OpenShiftManagedClusterIdentityProvider), TypePropertyFlags.None)}, null);
            OpenShiftManagedClusterIdentityProvider = new NamedObjectType("OpenShiftManagedClusterIdentityProvider", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("provider", () => OpenShiftManagedClusterBaseIdentityProvider, TypePropertyFlags.None)}, null);
            OpenShiftManagedClusterBaseIdentityProvider = LanguageConstants.Any;
            OpenShiftManagedClusterAADIdentityProvider = new NamedObjectType("OpenShiftManagedClusterAADIdentityProvider", new ITypeProperty[]{new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customerAdminGroupId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", new StringLiteralType("'AADIdentityProvider'"), TypePropertyFlags.Required)}, null);
            OpenShiftManagedClusterMonitorProfile = new NamedObjectType("OpenShiftManagedClusterMonitorProfile", new ITypeProperty[]{new TypeProperty("workspaceResourceID", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ResourceType_openShiftManagedClusters = new ResourceType("Microsoft.ContainerService/openShiftManagedClusters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ContainerService/openShiftManagedClusters'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("plan", () => PurchasePlan, TypePropertyFlags.None), new LazyTypeProperty("properties", () => OpenShiftManagedClusterProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-09-30-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_openShiftManagedClusters);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_openShiftManagedClusters, () => InstanceLazy.Value.ResourceType_openShiftManagedClusters);
        }
        private readonly ResourceType ResourceType_openShiftManagedClusters;
        private readonly TypeSymbol PurchasePlan;
        private readonly TypeSymbol OpenShiftManagedClusterProperties;
        private readonly TypeSymbol NetworkProfile;
        private readonly TypeSymbol OpenShiftRouterProfile;
        private readonly TypeSymbol OpenShiftManagedClusterMasterPoolProfile;
        private readonly TypeSymbol OpenShiftManagedClusterAgentPoolProfile;
        private readonly TypeSymbol OpenShiftManagedClusterAuthProfile;
        private readonly TypeSymbol OpenShiftManagedClusterIdentityProvider;
        private readonly TypeSymbol OpenShiftManagedClusterBaseIdentityProvider;
        private readonly TypeSymbol OpenShiftManagedClusterAADIdentityProvider;
        private readonly TypeSymbol OpenShiftManagedClusterMonitorProfile;
    }
}
