// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_ServiceFabric_2020_01_01_preview
    {
        private const string ProviderNamespace = "Microsoft.ServiceFabric";
        private const string ApiVersion = "2020-01-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_managedClusters = new ResourceTypeReference(ProviderNamespace, new[]{"managedClusters"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedClusters_nodeTypes = new ResourceTypeReference(ProviderNamespace, new[]{"managedClusters", "nodeTypes"}, ApiVersion);
        private static Lazy<Microsoft_ServiceFabric_2020_01_01_preview> InstanceLazy = new Lazy<Microsoft_ServiceFabric_2020_01_01_preview>(() => new Microsoft_ServiceFabric_2020_01_01_preview());
        private Microsoft_ServiceFabric_2020_01_01_preview()
        {
            ManagedClusterProperties = new NamedObjectType("ManagedClusterProperties", new ITypeProperty[]{new TypeProperty("dnsName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("clusterId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("clusterState", UnionType.Create(new StringLiteralType("'WaitingForNodes'"), new StringLiteralType("'Deploying'"), new StringLiteralType("'BaselineUpgrade'"), new StringLiteralType("'UpdatingUserConfiguration'"), new StringLiteralType("'UpdatingUserCertificate'"), new StringLiteralType("'UpdatingInfrastructure'"), new StringLiteralType("'EnforcingClusterVersion'"), new StringLiteralType("'UpgradeServiceUnreachable'"), new StringLiteralType("'AutoScale'"), new StringLiteralType("'Ready'")), TypePropertyFlags.ReadOnly), new TypeProperty("clusterCertificateThumbprint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("clientConnectionPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("httpGatewayConnectionPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("adminUserName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("adminPassword", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(LoadBalancingRule), TypePropertyFlags.None), new LazyTypeProperty("clients", () => new TypedArrayType(ClientCertificate), TypePropertyFlags.None), new LazyTypeProperty("azureActiveDirectory", () => AzureActiveDirectory, TypePropertyFlags.None), new LazyTypeProperty("fabricSettings", () => new TypedArrayType(SettingsSectionDescription), TypePropertyFlags.None), new TypeProperty("useTestExtension", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Created'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Deleted'"), new StringLiteralType("'Other'")), TypePropertyFlags.ReadOnly), new TypeProperty("clusterCodeVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clusterUpgradeMode", UnionType.Create(new StringLiteralType("'Automatic'"), new StringLiteralType("'Manual'")), TypePropertyFlags.None), new LazyTypeProperty("clusterUpgradeDescription", () => ClusterUpgradePolicy, TypePropertyFlags.None), new TypeProperty("reverseProxyEndpointPort", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            LoadBalancingRule = new NamedObjectType("LoadBalancingRule", new ITypeProperty[]{new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'tcp'"), new StringLiteralType("'udp'")), TypePropertyFlags.Required), new TypeProperty("probeProtocol", UnionType.Create(new StringLiteralType("'tcp'"), new StringLiteralType("'http'"), new StringLiteralType("'https'")), TypePropertyFlags.Required), new TypeProperty("probeRequestPath", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ClientCertificate = new NamedObjectType("ClientCertificate", new ITypeProperty[]{new TypeProperty("isAdmin", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("commonName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("issuerThumbprint", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AzureActiveDirectory = new NamedObjectType("AzureActiveDirectory", new ITypeProperty[]{new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clusterApplication", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientApplication", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SettingsSectionDescription = new NamedObjectType("SettingsSectionDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("parameters", () => new TypedArrayType(SettingsParameterDescription), TypePropertyFlags.Required)}, null);
            SettingsParameterDescription = new NamedObjectType("SettingsParameterDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ClusterUpgradePolicy = new NamedObjectType("ClusterUpgradePolicy", new ITypeProperty[]{new TypeProperty("forceRestart", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("upgradeReplicaSetCheckTimeout", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("healthCheckWaitDuration", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("healthCheckStableDuration", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("healthCheckRetryTimeout", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("upgradeTimeout", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("upgradeDomainTimeout", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("healthPolicy", () => ClusterHealthPolicy, TypePropertyFlags.Required), new LazyTypeProperty("deltaHealthPolicy", () => ClusterUpgradeDeltaHealthPolicy, TypePropertyFlags.None)}, null);
            ClusterHealthPolicy = new NamedObjectType("ClusterHealthPolicy", new ITypeProperty[]{new TypeProperty("maxPercentUnhealthyNodes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxPercentUnhealthyApplications", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("applicationHealthPolicies", new NamedObjectType("applicationHealthPolicies", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ApplicationHealthPolicy, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ApplicationHealthPolicy = new NamedObjectType("ApplicationHealthPolicy", new ITypeProperty[]{new LazyTypeProperty("defaultServiceTypeHealthPolicy", () => ServiceTypeHealthPolicy, TypePropertyFlags.None), new TypeProperty("serviceTypeHealthPolicies", new NamedObjectType("serviceTypeHealthPolicies", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ServiceTypeHealthPolicy, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ServiceTypeHealthPolicy = new NamedObjectType("ServiceTypeHealthPolicy", new ITypeProperty[]{new TypeProperty("maxPercentUnhealthyServices", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ClusterUpgradeDeltaHealthPolicy = new NamedObjectType("ClusterUpgradeDeltaHealthPolicy", new ITypeProperty[]{new TypeProperty("maxPercentDeltaUnhealthyNodes", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("maxPercentUpgradeDomainDeltaUnhealthyNodes", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("maxPercentDeltaUnhealthyApplications", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("applicationDeltaHealthPolicies", new NamedObjectType("applicationDeltaHealthPolicies", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ApplicationDeltaHealthPolicy, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ApplicationDeltaHealthPolicy = new NamedObjectType("ApplicationDeltaHealthPolicy", new ITypeProperty[]{new LazyTypeProperty("defaultServiceTypeDeltaHealthPolicy", () => ServiceTypeDeltaHealthPolicy, TypePropertyFlags.None), new TypeProperty("serviceTypeDeltaHealthPolicies", new NamedObjectType("serviceTypeDeltaHealthPolicies", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ServiceTypeDeltaHealthPolicy, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ServiceTypeDeltaHealthPolicy = new NamedObjectType("ServiceTypeDeltaHealthPolicy", new ITypeProperty[]{new TypeProperty("maxPercentDeltaUnhealthyServices", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.Required)}, null);
            NodeTypeProperties = new NamedObjectType("NodeTypeProperties", new ITypeProperty[]{new TypeProperty("isPrimary", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("vmInstanceCount", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("dataDiskSizeGB", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("placementProperties", new NamedObjectType("placementProperties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("capacities", new NamedObjectType("capacities", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("applicationPorts", () => EndpointRangeDescription, TypePropertyFlags.None), new LazyTypeProperty("ephemeralPorts", () => EndpointRangeDescription, TypePropertyFlags.None), new TypeProperty("vmSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmImagePublisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmImageOffer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmImageSku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmImageVersion", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("vmSecrets", () => new TypedArrayType(VaultSecretGroup), TypePropertyFlags.None), new LazyTypeProperty("vmExtensions", () => new TypedArrayType(VMSSExtension), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Created'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Deleted'"), new StringLiteralType("'Other'")), TypePropertyFlags.ReadOnly)}, null);
            EndpointRangeDescription = new NamedObjectType("EndpointRangeDescription", new ITypeProperty[]{new TypeProperty("startPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("endPort", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            VaultSecretGroup = new NamedObjectType("VaultSecretGroup", new ITypeProperty[]{new LazyTypeProperty("sourceVault", () => SubResource, TypePropertyFlags.Required), new LazyTypeProperty("vaultCertificates", () => new TypedArrayType(VaultCertificate), TypePropertyFlags.Required)}, null);
            SubResource = new NamedObjectType("SubResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VaultCertificate = new NamedObjectType("VaultCertificate", new ITypeProperty[]{new TypeProperty("certificateUrl", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("certificateStore", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            VMSSExtension = new NamedObjectType("VMSSExtension", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VMSSExtensionProperties, TypePropertyFlags.Required)}, null);
            VMSSExtensionProperties = new NamedObjectType("VMSSExtensionProperties", new ITypeProperty[]{new TypeProperty("forceUpdateTag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("typeHandlerVersion", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("autoUpgradeMinorVersion", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("settings", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("protectedSettings", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisionAfterExtensions", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            ResourceType_managedClusters = new ResourceType("Microsoft.ServiceFabric/managedClusters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceFabric/managedClusters'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedClusterProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2020-01-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedClusters);
            ResourceType_managedClusters_nodeTypes = new ResourceType("Microsoft.ServiceFabric/managedClusters/nodeTypes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceFabric/managedClusters/nodeTypes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NodeTypeProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-01-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedClusters_nodeTypes);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_managedClusters, () => InstanceLazy.Value.ResourceType_managedClusters);
            registrar.RegisterType(ResourceTypeReference_managedClusters_nodeTypes, () => InstanceLazy.Value.ResourceType_managedClusters_nodeTypes);
        }
        private readonly ResourceType ResourceType_managedClusters;
        private readonly ResourceType ResourceType_managedClusters_nodeTypes;
        private readonly TypeSymbol ManagedClusterProperties;
        private readonly TypeSymbol LoadBalancingRule;
        private readonly TypeSymbol ClientCertificate;
        private readonly TypeSymbol AzureActiveDirectory;
        private readonly TypeSymbol SettingsSectionDescription;
        private readonly TypeSymbol SettingsParameterDescription;
        private readonly TypeSymbol ClusterUpgradePolicy;
        private readonly TypeSymbol ClusterHealthPolicy;
        private readonly TypeSymbol ApplicationHealthPolicy;
        private readonly TypeSymbol ServiceTypeHealthPolicy;
        private readonly TypeSymbol ClusterUpgradeDeltaHealthPolicy;
        private readonly TypeSymbol ApplicationDeltaHealthPolicy;
        private readonly TypeSymbol ServiceTypeDeltaHealthPolicy;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol NodeTypeProperties;
        private readonly TypeSymbol EndpointRangeDescription;
        private readonly TypeSymbol VaultSecretGroup;
        private readonly TypeSymbol SubResource;
        private readonly TypeSymbol VaultCertificate;
        private readonly TypeSymbol VMSSExtension;
        private readonly TypeSymbol VMSSExtensionProperties;
    }
}
