// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Logic_2015_08_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Logic";
        private const string ApiVersion = "2015-08-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts_schemas = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts", "schemas"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts_maps = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts", "maps"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts_partners = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts", "partners"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts_agreements = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts", "agreements"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_integrationAccounts_certificates = new ResourceTypeReference(ProviderNamespace, new[]{"integrationAccounts", "certificates"}, ApiVersion);
        private static Lazy<Microsoft_Logic_2015_08_01_preview> InstanceLazy = new Lazy<Microsoft_Logic_2015_08_01_preview>(() => new Microsoft_Logic_2015_08_01_preview());
        private Microsoft_Logic_2015_08_01_preview()
        {
            IntegrationAccountSku = new NamedObjectType("IntegrationAccountSku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Free'"), new StringLiteralType("'Shared'"), new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None)}, null);
            IntegrationAccountSchemaProperties = new NamedObjectType("IntegrationAccountSchemaProperties", new ITypeProperty[]{new TypeProperty("schemaType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Xml'")), TypePropertyFlags.None), new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("content", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("contentType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("contentLink", () => IntegrationAccountContentLink, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            IntegrationAccountContentLink = new NamedObjectType("IntegrationAccountContentLink", new ITypeProperty[]{new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contentVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contentSize", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("contentHash", () => IntegrationAccountContentHash, TypePropertyFlags.None), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            IntegrationAccountContentHash = new NamedObjectType("IntegrationAccountContentHash", new ITypeProperty[]{new TypeProperty("algorithm", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IntegrationAccountMapProperties = new NamedObjectType("IntegrationAccountMapProperties", new ITypeProperty[]{new TypeProperty("mapType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Xslt'")), TypePropertyFlags.None), new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("content", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("contentType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("contentLink", () => IntegrationAccountContentLink, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            IntegrationAccountPartnerProperties = new NamedObjectType("IntegrationAccountPartnerProperties", new ITypeProperty[]{new TypeProperty("partnerType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'B2B'")), TypePropertyFlags.None), new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("content", () => PartnerContent, TypePropertyFlags.None)}, null);
            PartnerContent = new NamedObjectType("PartnerContent", new ITypeProperty[]{new LazyTypeProperty("b2b", () => B2BPartnerContent, TypePropertyFlags.None)}, null);
            B2BPartnerContent = new NamedObjectType("B2BPartnerContent", new ITypeProperty[]{new LazyTypeProperty("businessIdentities", () => new TypedArrayType(BusinessIdentity), TypePropertyFlags.None)}, null);
            BusinessIdentity = new NamedObjectType("BusinessIdentity", new ITypeProperty[]{new TypeProperty("Qualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("Value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IntegrationAccountAgreementProperties = new NamedObjectType("IntegrationAccountAgreementProperties", new ITypeProperty[]{new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("agreementType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'AS2'"), new StringLiteralType("'X12'"), new StringLiteralType("'Edifact'")), TypePropertyFlags.None), new TypeProperty("hostPartner", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("guestPartner", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("guestIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("content", () => AgreementContent, TypePropertyFlags.None)}, null);
            AgreementContent = new NamedObjectType("AgreementContent", new ITypeProperty[]{new LazyTypeProperty("AS2", () => AS2AgreementContent, TypePropertyFlags.None), new LazyTypeProperty("X12", () => X12AgreementContent, TypePropertyFlags.None), new LazyTypeProperty("Edifact", () => EdifactAgreementContent, TypePropertyFlags.None)}, null);
            AS2AgreementContent = new NamedObjectType("AS2AgreementContent", new ITypeProperty[]{new LazyTypeProperty("receiveAgreement", () => AS2OneWayAgreement, TypePropertyFlags.None), new LazyTypeProperty("sendAgreement", () => AS2OneWayAgreement, TypePropertyFlags.None)}, null);
            AS2OneWayAgreement = new NamedObjectType("AS2OneWayAgreement", new ITypeProperty[]{new LazyTypeProperty("senderBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("receiverBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("protocolSettings", () => AS2ProtocolSettings, TypePropertyFlags.None)}, null);
            AS2ProtocolSettings = new NamedObjectType("AS2ProtocolSettings", new ITypeProperty[]{new LazyTypeProperty("messageConnectionSettings", () => AS2MessageConnectionSettings, TypePropertyFlags.None), new LazyTypeProperty("acknowledgementConnectionSettings", () => AS2AcknowledgementConnectionSettings, TypePropertyFlags.None), new LazyTypeProperty("mdnSettings", () => AS2MdnSettings, TypePropertyFlags.None), new LazyTypeProperty("securitySettings", () => AS2SecuritySettings, TypePropertyFlags.None), new LazyTypeProperty("validationSettings", () => AS2ValidationSettings, TypePropertyFlags.None), new LazyTypeProperty("envelopeSettings", () => AS2EnvelopeSettings, TypePropertyFlags.None), new LazyTypeProperty("errorSettings", () => AS2ErrorSettings, TypePropertyFlags.None)}, null);
            AS2MessageConnectionSettings = new NamedObjectType("AS2MessageConnectionSettings", new ITypeProperty[]{new TypeProperty("ignoreCertificateNameMismatch", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("supportHttpStatusCodeContinue", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("keepHttpConnectionAlive", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("unfoldHttpHeaders", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            AS2AcknowledgementConnectionSettings = new NamedObjectType("AS2AcknowledgementConnectionSettings", new ITypeProperty[]{new TypeProperty("ignoreCertificateNameMismatch", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("supportHttpStatusCodeContinue", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("keepHttpConnectionAlive", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("unfoldHttpHeaders", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            AS2MdnSettings = new NamedObjectType("AS2MdnSettings", new ITypeProperty[]{new TypeProperty("needMdn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("signMdn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sendMdnAsynchronously", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("receiptDeliveryUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dispositionNotificationTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("signOutboundMdnIfOptional", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("mdnText", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sendInboundMdnToMessageBox", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("micHashingAlgorithm", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'SHA2256'"), new StringLiteralType("'SHA2384'"), new StringLiteralType("'SHA2512'")), TypePropertyFlags.None)}, null);
            AS2SecuritySettings = new NamedObjectType("AS2SecuritySettings", new ITypeProperty[]{new TypeProperty("overrideGroupSigningCertificate", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("signingCertificateName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("encryptionCertificateName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enableNrrForInboundEncodedMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableNrrForInboundDecodedMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableNrrForOutboundMdn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableNrrForOutboundEncodedMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableNrrForOutboundDecodedMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableNrrForInboundMdn", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            AS2ValidationSettings = new NamedObjectType("AS2ValidationSettings", new ITypeProperty[]{new TypeProperty("overrideMessageProperties", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("encryptMessage", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("signMessage", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("compressMessage", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkDuplicateMessage", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("interchangeDuplicatesValidityDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("checkCertificateRevocationListOnSend", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkCertificateRevocationListOnReceive", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("encryptionAlgorithm", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'DES3'"), new StringLiteralType("'RC2'"), new StringLiteralType("'AES128'"), new StringLiteralType("'AES192'"), new StringLiteralType("'AES256'")), TypePropertyFlags.None)}, null);
            AS2EnvelopeSettings = new NamedObjectType("AS2EnvelopeSettings", new ITypeProperty[]{new TypeProperty("messageContentType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("transmitFileNameInMimeHeader", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("fileNameTemplate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("SuspendMessageOnFileNameGenerationError", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("AutogenerateFileName", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            AS2ErrorSettings = new NamedObjectType("AS2ErrorSettings", new ITypeProperty[]{new TypeProperty("SuspendDuplicateMessage", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("ResendIfMdnNotReceived", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            X12AgreementContent = new NamedObjectType("X12AgreementContent", new ITypeProperty[]{new LazyTypeProperty("receiveAgreement", () => X12OneWayAgreement, TypePropertyFlags.None), new LazyTypeProperty("sendAgreement", () => X12OneWayAgreement, TypePropertyFlags.None)}, null);
            X12OneWayAgreement = new NamedObjectType("X12OneWayAgreement", new ITypeProperty[]{new LazyTypeProperty("senderBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("receiverBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("protocolSettings", () => X12ProtocolSettings, TypePropertyFlags.None)}, null);
            X12ProtocolSettings = new NamedObjectType("X12ProtocolSettings", new ITypeProperty[]{new LazyTypeProperty("validationSettings", () => X12ValidationSettings, TypePropertyFlags.None), new LazyTypeProperty("framingSettings", () => X12FramingSettings, TypePropertyFlags.None), new LazyTypeProperty("envelopeSettings", () => X12EnvelopeSettings, TypePropertyFlags.None), new LazyTypeProperty("acknowledgementSettings", () => X12AcknowledgementSettings, TypePropertyFlags.None), new LazyTypeProperty("messageFilter", () => X12MessageFilter, TypePropertyFlags.None), new LazyTypeProperty("securitySettings", () => X12SecuritySettings, TypePropertyFlags.None), new LazyTypeProperty("processingSettings", () => X12ProcessingSettings, TypePropertyFlags.None), new LazyTypeProperty("envelopeOverrides", () => new TypedArrayType(X12EnvelopeOverride), TypePropertyFlags.None), new LazyTypeProperty("validationOverrides", () => new TypedArrayType(X12ValidationOverride), TypePropertyFlags.None), new LazyTypeProperty("messageFilterList", () => new TypedArrayType(X12MessageIdentifier), TypePropertyFlags.None), new LazyTypeProperty("schemaReferences", () => new TypedArrayType(X12SchemaReference), TypePropertyFlags.None), new LazyTypeProperty("x12DelimiterOverrides", () => new TypedArrayType(X12DelimiterOverrides), TypePropertyFlags.None)}, null);
            X12ValidationSettings = new NamedObjectType("X12ValidationSettings", new ITypeProperty[]{new TypeProperty("validateCharacterSet", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkDuplicateInterchangeControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberValidityDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("checkDuplicateGroupControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkDuplicateTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateEDITypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateXSDTypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trimLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trailingSeparatorPolicy", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'NotAllowed'"), new StringLiteralType("'Optional'"), new StringLiteralType("'Mandatory'")), TypePropertyFlags.None)}, null);
            X12FramingSettings = new NamedObjectType("X12FramingSettings", new ITypeProperty[]{new TypeProperty("dataElementSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("componentSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("replaceSeparatorsInPayload", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("replaceCharacter", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("characterSet", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Basic'"), new StringLiteralType("'Extended'"), new StringLiteralType("'UTF8'")), TypePropertyFlags.None), new TypeProperty("segmentTerminatorSuffix", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'CR'"), new StringLiteralType("'LF'"), new StringLiteralType("'CRLF'")), TypePropertyFlags.None)}, null);
            X12EnvelopeSettings = new NamedObjectType("X12EnvelopeSettings", new ITypeProperty[]{new TypeProperty("controlStandardsId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("useControlStandardsIdAsRepetitionCharacter", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("senderApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("controlVersionNumber", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverInterchangeControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableDefaultGroupHeaders", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("functionalGroupId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("groupControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverGroupControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("groupHeaderAgencyCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupHeaderVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("overwriteExistingTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("groupHeaderDateFormat", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'CCYYMMDD'"), new StringLiteralType("'YYMMDD'")), TypePropertyFlags.None), new TypeProperty("groupHeaderTimeFormat", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'HHMM'"), new StringLiteralType("'HHMMSS'"), new StringLiteralType("'HHMMSSdd'"), new StringLiteralType("'HHMMSSd'")), TypePropertyFlags.None), new TypeProperty("usageIndicator", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Test'"), new StringLiteralType("'Information'"), new StringLiteralType("'Production'")), TypePropertyFlags.None)}, null);
            X12AcknowledgementSettings = new NamedObjectType("X12AcknowledgementSettings", new ITypeProperty[]{new TypeProperty("needTechnicalAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("batchTechnicalAcknowledgements", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("needFunctionalAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("functionalAcknowledgementVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("batchFunctionalAcknowledgements", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("needImplementationAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("implementationAcknowledgementVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("batchImplementationAcknowledgements", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("needLoopForValidMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sendSynchronousAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverAcknowledgementControlNumber", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            X12MessageFilter = new NamedObjectType("X12MessageFilter", new ITypeProperty[]{new TypeProperty("messageFilterType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Include'"), new StringLiteralType("'Exclude'")), TypePropertyFlags.None)}, null);
            X12SecuritySettings = new NamedObjectType("X12SecuritySettings", new ITypeProperty[]{new TypeProperty("authorizationQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authorizationValue", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("securityQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("passwordValue", LanguageConstants.String, TypePropertyFlags.None)}, null);
            X12ProcessingSettings = new NamedObjectType("X12ProcessingSettings", new ITypeProperty[]{new TypeProperty("maskSecurityInfo", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("convertImpliedDecimal", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("preserveInterchange", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("suspendInterchangeOnError", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createEmptyXmlTagsForTrailingSeparators", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useDotAsDecimalSeparator", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            X12EnvelopeOverride = new NamedObjectType("X12EnvelopeOverride", new ITypeProperty[]{new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("protocolVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("responsibleAgencyCode", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("headerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("functionalIdentifierCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dateFormat", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'CCYYMMDD'"), new StringLiteralType("'YYMMDD'")), TypePropertyFlags.None), new TypeProperty("timeFormat", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'HHMM'"), new StringLiteralType("'HHMMSS'"), new StringLiteralType("'HHMMSSdd'"), new StringLiteralType("'HHMMSSd'")), TypePropertyFlags.None)}, null);
            X12ValidationOverride = new NamedObjectType("X12ValidationOverride", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("validateEDITypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateXSDTypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateCharacterSet", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trimLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trailingSeparatorPolicy", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'NotAllowed'"), new StringLiteralType("'Optional'"), new StringLiteralType("'Mandatory'")), TypePropertyFlags.None)}, null);
            X12MessageIdentifier = new NamedObjectType("X12MessageIdentifier", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            X12SchemaReference = new NamedObjectType("X12SchemaReference", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("schemaVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("schemaName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            X12DelimiterOverrides = new NamedObjectType("X12DelimiterOverrides", new ITypeProperty[]{new TypeProperty("protocolVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataElementSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("componentSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminatorSuffix", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'CR'"), new StringLiteralType("'LF'"), new StringLiteralType("'CRLF'")), TypePropertyFlags.None), new TypeProperty("replaceCharacter", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("replaceSeparatorsInPayload", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EdifactAgreementContent = new NamedObjectType("EdifactAgreementContent", new ITypeProperty[]{new LazyTypeProperty("receiveAgreement", () => EdifactOneWayAgreement, TypePropertyFlags.None), new LazyTypeProperty("sendAgreement", () => EdifactOneWayAgreement, TypePropertyFlags.None)}, null);
            EdifactOneWayAgreement = new NamedObjectType("EdifactOneWayAgreement", new ITypeProperty[]{new LazyTypeProperty("senderBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("receiverBusinessIdentity", () => BusinessIdentity, TypePropertyFlags.None), new LazyTypeProperty("protocolSettings", () => EdifactProtocolSettings, TypePropertyFlags.None)}, null);
            EdifactProtocolSettings = new NamedObjectType("EdifactProtocolSettings", new ITypeProperty[]{new LazyTypeProperty("validationSettings", () => EdifactValidationSettings, TypePropertyFlags.None), new LazyTypeProperty("framingSettings", () => EdifactFramingSettings, TypePropertyFlags.None), new LazyTypeProperty("envelopeSettings", () => EdifactEnvelopeSettings, TypePropertyFlags.None), new LazyTypeProperty("acknowledgementSettings", () => EdifactAcknowledgementSettings, TypePropertyFlags.None), new LazyTypeProperty("messageFilter", () => EdifactMessageFilter, TypePropertyFlags.None), new LazyTypeProperty("processingSettings", () => EdifactProcessingSettings, TypePropertyFlags.None), new LazyTypeProperty("envelopeOverrides", () => new TypedArrayType(EdifactEnvelopeOverride), TypePropertyFlags.None), new LazyTypeProperty("messageFilterList", () => new TypedArrayType(EdifactMessageIdentifier), TypePropertyFlags.None), new LazyTypeProperty("schemaReferences", () => new TypedArrayType(EdifactSchemaReference), TypePropertyFlags.None), new LazyTypeProperty("validationOverrides", () => new TypedArrayType(EdifactValidationOverride), TypePropertyFlags.None), new LazyTypeProperty("edifactDelimiterOverrides", () => new TypedArrayType(EdifactDelimiterOverride), TypePropertyFlags.None)}, null);
            EdifactValidationSettings = new NamedObjectType("EdifactValidationSettings", new ITypeProperty[]{new TypeProperty("validateCharacterSet", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkDuplicateInterchangeControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberValidityDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("checkDuplicateGroupControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("checkDuplicateTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateEDITypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateXSDTypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trimLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trailingSeparatorPolicy", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'NotAllowed'"), new StringLiteralType("'Optional'"), new StringLiteralType("'Mandatory'")), TypePropertyFlags.None)}, null);
            EdifactFramingSettings = new NamedObjectType("EdifactFramingSettings", new ITypeProperty[]{new TypeProperty("serviceCodeListDirectoryVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("characterEncoding", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("protocolVersion", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("dataElementSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("componentSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("releaseIndicator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("repetitionSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("characterSet", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'UNOB'"), new StringLiteralType("'UNOA'"), new StringLiteralType("'UNOC'"), new StringLiteralType("'UNOD'"), new StringLiteralType("'UNOE'"), new StringLiteralType("'UNOF'"), new StringLiteralType("'UNOG'"), new StringLiteralType("'UNOH'"), new StringLiteralType("'UNOI'"), new StringLiteralType("'UNOJ'"), new StringLiteralType("'UNOK'"), new StringLiteralType("'UNOX'"), new StringLiteralType("'UNOY'"), new StringLiteralType("'KECA'")), TypePropertyFlags.None), new TypeProperty("decimalPointIndicator", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Comma'"), new StringLiteralType("'Decimal'")), TypePropertyFlags.None), new TypeProperty("segmentTerminatorSuffix", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'CR'"), new StringLiteralType("'LF'"), new StringLiteralType("'CRLF'")), TypePropertyFlags.None)}, null);
            EdifactEnvelopeSettings = new NamedObjectType("EdifactEnvelopeSettings", new ITypeProperty[]{new TypeProperty("groupAssociationAssignedCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("communicationAgreementId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("applyDelimiterStringAdvice", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createGroupingSegments", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableDefaultGroupHeaders", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("recipientReferencePasswordValue", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recipientReferencePasswordQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("applicationReferenceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("processingPriorityCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverInterchangeControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interchangeControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderReverseRoutingAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverReverseRoutingAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("functionalGroupId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupControllingAgencyCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupMessageVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupMessageRelease", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("groupControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverGroupControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("groupControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupApplicationReceiverQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupApplicationReceiverId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupApplicationSenderQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupApplicationSenderId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupApplicationPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("overwriteExistingTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("transactionSetControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverTransactionSetControlNumber", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isTestInterchange", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("senderInternalIdentification", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderInternalSubIdentification", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverInternalIdentification", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverInternalSubIdentification", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EdifactAcknowledgementSettings = new NamedObjectType("EdifactAcknowledgementSettings", new ITypeProperty[]{new TypeProperty("needTechnicalAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("batchTechnicalAcknowledgements", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("needFunctionalAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("batchFunctionalAcknowledgements", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("needLoopForValidMessages", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sendSynchronousAcknowledgement", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberLowerBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("acknowledgementControlNumberUpperBound", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("rolloverAcknowledgementControlNumber", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            EdifactMessageFilter = new NamedObjectType("EdifactMessageFilter", new ITypeProperty[]{new TypeProperty("messageFilterType", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Include'"), new StringLiteralType("'Exclude'")), TypePropertyFlags.None)}, null);
            EdifactProcessingSettings = new NamedObjectType("EdifactProcessingSettings", new ITypeProperty[]{new TypeProperty("maskSecurityInfo", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("preserveInterchange", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("suspendInterchangeOnError", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("createEmptyXmlTagsForTrailingSeparators", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useDotAsDecimalSeparator", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            EdifactEnvelopeOverride = new NamedObjectType("EdifactEnvelopeOverride", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageRelease", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageAssociationAssignedCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("functionalGroupId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverApplicationQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("receiverApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("controllingAgencyCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupHeaderMessageVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupHeaderMessageRelease", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("associationAssignedCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("applicationPassword", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EdifactMessageIdentifier = new NamedObjectType("EdifactMessageIdentifier", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EdifactSchemaReference = new NamedObjectType("EdifactSchemaReference", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageRelease", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("senderApplicationQualifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("associationAssignedCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("schemaName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EdifactValidationOverride = new NamedObjectType("EdifactValidationOverride", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enforceCharacterSet", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateEDITypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("validateXSDTypes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trailingSeparatorPolicy", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'NotAllowed'"), new StringLiteralType("'Optional'"), new StringLiteralType("'Mandatory'")), TypePropertyFlags.None), new TypeProperty("trimLeadingAndTrailingSpacesAndZeroes", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            EdifactDelimiterOverride = new NamedObjectType("EdifactDelimiterOverride", new ITypeProperty[]{new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageRelease", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataElementSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("componentSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("repetitionSeparator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("segmentTerminatorSuffix", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'None'"), new StringLiteralType("'CR'"), new StringLiteralType("'LF'"), new StringLiteralType("'CRLF'")), TypePropertyFlags.None), new TypeProperty("decimalPointIndicator", UnionType.Create(new StringLiteralType("'NotSpecified'"), new StringLiteralType("'Comma'"), new StringLiteralType("'Decimal'")), TypePropertyFlags.None), new TypeProperty("releaseIndicator", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("messageAssociationAssignedCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IntegrationAccountCertificateProperties = new NamedObjectType("IntegrationAccountCertificateProperties", new ITypeProperty[]{new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("key", () => KeyVaultKeyReference, TypePropertyFlags.None), new TypeProperty("publicCertificate", LanguageConstants.String, TypePropertyFlags.None)}, null);
            KeyVaultKeyReference = new NamedObjectType("KeyVaultKeyReference", new ITypeProperty[]{new LazyTypeProperty("keyVault", () => KeyVaultKeyReferenceKeyVault, TypePropertyFlags.None), new TypeProperty("keyName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyVersion", LanguageConstants.String, TypePropertyFlags.None)}, null);
            KeyVaultKeyReferenceKeyVault = new NamedObjectType("KeyVaultKeyReferenceKeyVault", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceType_integrationAccounts = new ResourceType("Microsoft.Logic/integrationAccounts", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("properties", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => IntegrationAccountSku, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts);
            ResourceType_integrationAccounts_schemas = new ResourceType("Microsoft.Logic/integrationAccounts/schemas", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts/schemas'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationAccountSchemaProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts_schemas);
            ResourceType_integrationAccounts_maps = new ResourceType("Microsoft.Logic/integrationAccounts/maps", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts/maps'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationAccountMapProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts_maps);
            ResourceType_integrationAccounts_partners = new ResourceType("Microsoft.Logic/integrationAccounts/partners", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts/partners'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationAccountPartnerProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts_partners);
            ResourceType_integrationAccounts_agreements = new ResourceType("Microsoft.Logic/integrationAccounts/agreements", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts/agreements'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationAccountAgreementProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts_agreements);
            ResourceType_integrationAccounts_certificates = new ResourceType("Microsoft.Logic/integrationAccounts/certificates", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Logic/integrationAccounts/certificates'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => IntegrationAccountCertificateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_integrationAccounts_certificates);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_integrationAccounts, () => InstanceLazy.Value.ResourceType_integrationAccounts);
            registrar.RegisterType(ResourceTypeReference_integrationAccounts_schemas, () => InstanceLazy.Value.ResourceType_integrationAccounts_schemas);
            registrar.RegisterType(ResourceTypeReference_integrationAccounts_maps, () => InstanceLazy.Value.ResourceType_integrationAccounts_maps);
            registrar.RegisterType(ResourceTypeReference_integrationAccounts_partners, () => InstanceLazy.Value.ResourceType_integrationAccounts_partners);
            registrar.RegisterType(ResourceTypeReference_integrationAccounts_agreements, () => InstanceLazy.Value.ResourceType_integrationAccounts_agreements);
            registrar.RegisterType(ResourceTypeReference_integrationAccounts_certificates, () => InstanceLazy.Value.ResourceType_integrationAccounts_certificates);
        }
        private readonly ResourceType ResourceType_integrationAccounts;
        private readonly ResourceType ResourceType_integrationAccounts_schemas;
        private readonly ResourceType ResourceType_integrationAccounts_maps;
        private readonly ResourceType ResourceType_integrationAccounts_partners;
        private readonly ResourceType ResourceType_integrationAccounts_agreements;
        private readonly ResourceType ResourceType_integrationAccounts_certificates;
        private readonly TypeSymbol IntegrationAccountSku;
        private readonly TypeSymbol IntegrationAccountSchemaProperties;
        private readonly TypeSymbol IntegrationAccountContentLink;
        private readonly TypeSymbol IntegrationAccountContentHash;
        private readonly TypeSymbol IntegrationAccountMapProperties;
        private readonly TypeSymbol IntegrationAccountPartnerProperties;
        private readonly TypeSymbol PartnerContent;
        private readonly TypeSymbol B2BPartnerContent;
        private readonly TypeSymbol BusinessIdentity;
        private readonly TypeSymbol IntegrationAccountAgreementProperties;
        private readonly TypeSymbol AgreementContent;
        private readonly TypeSymbol AS2AgreementContent;
        private readonly TypeSymbol AS2OneWayAgreement;
        private readonly TypeSymbol AS2ProtocolSettings;
        private readonly TypeSymbol AS2MessageConnectionSettings;
        private readonly TypeSymbol AS2AcknowledgementConnectionSettings;
        private readonly TypeSymbol AS2MdnSettings;
        private readonly TypeSymbol AS2SecuritySettings;
        private readonly TypeSymbol AS2ValidationSettings;
        private readonly TypeSymbol AS2EnvelopeSettings;
        private readonly TypeSymbol AS2ErrorSettings;
        private readonly TypeSymbol X12AgreementContent;
        private readonly TypeSymbol X12OneWayAgreement;
        private readonly TypeSymbol X12ProtocolSettings;
        private readonly TypeSymbol X12ValidationSettings;
        private readonly TypeSymbol X12FramingSettings;
        private readonly TypeSymbol X12EnvelopeSettings;
        private readonly TypeSymbol X12AcknowledgementSettings;
        private readonly TypeSymbol X12MessageFilter;
        private readonly TypeSymbol X12SecuritySettings;
        private readonly TypeSymbol X12ProcessingSettings;
        private readonly TypeSymbol X12EnvelopeOverride;
        private readonly TypeSymbol X12ValidationOverride;
        private readonly TypeSymbol X12MessageIdentifier;
        private readonly TypeSymbol X12SchemaReference;
        private readonly TypeSymbol X12DelimiterOverrides;
        private readonly TypeSymbol EdifactAgreementContent;
        private readonly TypeSymbol EdifactOneWayAgreement;
        private readonly TypeSymbol EdifactProtocolSettings;
        private readonly TypeSymbol EdifactValidationSettings;
        private readonly TypeSymbol EdifactFramingSettings;
        private readonly TypeSymbol EdifactEnvelopeSettings;
        private readonly TypeSymbol EdifactAcknowledgementSettings;
        private readonly TypeSymbol EdifactMessageFilter;
        private readonly TypeSymbol EdifactProcessingSettings;
        private readonly TypeSymbol EdifactEnvelopeOverride;
        private readonly TypeSymbol EdifactMessageIdentifier;
        private readonly TypeSymbol EdifactSchemaReference;
        private readonly TypeSymbol EdifactValidationOverride;
        private readonly TypeSymbol EdifactDelimiterOverride;
        private readonly TypeSymbol IntegrationAccountCertificateProperties;
        private readonly TypeSymbol KeyVaultKeyReference;
        private readonly TypeSymbol KeyVaultKeyReferenceKeyVault;
    }
}
