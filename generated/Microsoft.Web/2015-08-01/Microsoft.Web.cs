// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Web_2015_08_01
    {
        private const string ProviderNamespace = "Microsoft.Web";
        private const string ApiVersion = "2015-08-01";
        private static readonly ResourceTypeReference ResourceTypeReference_certificates = new ResourceTypeReference(ProviderNamespace, new[]{"certificates"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_csrs = new ResourceTypeReference(ProviderNamespace, new[]{"csrs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedHostingEnvironments = new ResourceTypeReference(ProviderNamespace, new[]{"managedHostingEnvironments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites = new ResourceTypeReference(ProviderNamespace, new[]{"sites"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_multiRolePools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "multiRolePools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_workerPools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "workerPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_virtualNetworkConnections = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "virtualNetworkConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_config = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "config"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_snapshots = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "snapshots"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_hostNameBindings = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "hostNameBindings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_sourcecontrols = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "sourcecontrols"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_premieraddons = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "premieraddons"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_backups = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "backups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_hybridconnection = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "hybridconnection"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_routes = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "routes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_virtualNetworkConnections = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "virtualNetworkConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_snapshots = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "snapshots"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_instances_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "instances", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_hostNameBindings = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "hostNameBindings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_config = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "config"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_sourcecontrols = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "sourcecontrols"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_premieraddons = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "premieraddons"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_backups = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "backups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_hybridconnection = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "hybridconnection"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_instances_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "instances", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static Lazy<Microsoft_Web_2015_08_01> InstanceLazy = new Lazy<Microsoft_Web_2015_08_01>(() => new Microsoft_Web_2015_08_01());
        private Microsoft_Web_2015_08_01()
        {
            CertificateProperties = new NamedObjectType("CertificateProperties", new ITypeProperty[]{new TypeProperty("friendlyName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subjectName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("pfxBlob", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("siteName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("selfLink", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("issuer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("issueDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("expirationDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("valid", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("cerBlob", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicKeyHash", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None)}, null);
            HostingEnvironmentProfile = new NamedObjectType("HostingEnvironmentProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CsrProperties = new NamedObjectType("CsrProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("distinguishedName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("csrString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pfxBlob", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicKeyHash", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostingEnvironment", LanguageConstants.String, TypePropertyFlags.None)}, null);
            UserProperties = new NamedObjectType("UserProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publishingUserName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publishingPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scmUri", LanguageConstants.String, TypePropertyFlags.None)}, null);
            HostingEnvironmentProperties = new NamedObjectType("HostingEnvironmentProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'InProgress'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Preparing'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Scaling'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.Required), new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetResourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetSubnetName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("virtualNetwork", () => VirtualNetworkProfile, TypePropertyFlags.None), new TypeProperty("internalLoadBalancingMode", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Web'"), new StringLiteralType("'Publishing'")), TypePropertyFlags.None), new TypeProperty("multiSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("multiRoleCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("workerPools", () => new TypedArrayType(WorkerPool), TypePropertyFlags.None), new TypeProperty("ipsslAddressCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("databaseEdition", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("databaseServiceObjective", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("upgradeDomains", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("subscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastAction", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastActionResult", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowedMultiSizes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowedWorkerSizes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maximumNumberOfMachines", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("vipMappings", () => new TypedArrayType(VirtualIPMapping), TypePropertyFlags.None), new LazyTypeProperty("environmentCapacities", () => new TypedArrayType(StampCapacity), TypePropertyFlags.None), new LazyTypeProperty("networkAccessControlList", () => new TypedArrayType(NetworkAccessControlEntry), TypePropertyFlags.None), new TypeProperty("environmentIsHealthy", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("environmentStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceGroup", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiManagementAccountId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("suspended", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("clusterSettings", () => new TypedArrayType(NameValuePair), TypePropertyFlags.None)}, null);
            VirtualNetworkProfile = new NamedObjectType("VirtualNetworkProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnet", LanguageConstants.String, TypePropertyFlags.None)}, null);
            WorkerPool = new NamedObjectType("WorkerPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => WorkerPoolProperties, TypePropertyFlags.None), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None)}, null);
            WorkerPoolProperties = new NamedObjectType("WorkerPoolProperties", new ITypeProperty[]{new TypeProperty("workerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("computeMode", UnionType.Create(new StringLiteralType("'Shared'"), new StringLiteralType("'Dedicated'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("workerSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("workerCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("instanceNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            SkuDescription = new NamedObjectType("SkuDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VirtualIPMapping = new NamedObjectType("VirtualIPMapping", new ITypeProperty[]{new TypeProperty("virtualIP", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalHttpPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("internalHttpsPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("inUse", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            StampCapacity = new NamedObjectType("StampCapacity", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("availableCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("unit", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("computeMode", UnionType.Create(new StringLiteralType("'Shared'"), new StringLiteralType("'Dedicated'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("workerSize", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Small'"), new StringLiteralType("'Medium'"), new StringLiteralType("'Large'")), TypePropertyFlags.None), new TypeProperty("workerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("excludeFromCapacityAllocation", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isApplicableForAllComputeModes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("siteMode", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkAccessControlEntry = new NamedObjectType("NetworkAccessControlEntry", new ITypeProperty[]{new TypeProperty("action", UnionType.Create(new StringLiteralType("'Permit'"), new StringLiteralType("'Deny'")), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("order", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("remoteSubnet", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NameValuePair = new NamedObjectType("NameValuePair", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SourceControlProperties = new NamedObjectType("SourceControlProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("token", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tokenSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("refreshToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("expirationTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServerFarmWithRichSkuProperties = new NamedObjectType("ServerFarmWithRichSkuProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("workerTierName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Ready'"), new StringLiteralType("'Pending'")), TypePropertyFlags.ReadOnly | TypePropertyFlags.Required), new TypeProperty("subscription", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("adminSiteName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None), new TypeProperty("maximumNumberOfWorkers", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("geoRegion", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("perSiteScaling", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("numberOfSites", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("resourceGroup", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("reserved", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            VnetRouteProperties = new NamedObjectType("VnetRouteProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("routeType", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VnetGatewayProperties = new NamedObjectType("VnetGatewayProperties", new ITypeProperty[]{new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vpnPackageUri", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VnetInfoProperties = new NamedObjectType("VnetInfoProperties", new ITypeProperty[]{new TypeProperty("vnetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("certThumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("certBlob", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("routes", () => new TypedArrayType(VnetRoute), TypePropertyFlags.None), new TypeProperty("resyncRequired", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dnsServers", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VnetRoute = new NamedObjectType("VnetRoute", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetRouteProperties, TypePropertyFlags.None)}, null);
            SlotConfigNamesResourceProperties = new NamedObjectType("SlotConfigNamesResourceProperties", new ITypeProperty[]{new TypeProperty("connectionStringNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("appSettingNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            SiteProperties = new NamedObjectType("SiteProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("hostNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("repositorySiteName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("usageState", UnionType.Create(new StringLiteralType("'Normal'"), new StringLiteralType("'Exceeded'")), TypePropertyFlags.ReadOnly | TypePropertyFlags.Required), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enabledHostNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("availabilityState", UnionType.Create(new StringLiteralType("'Normal'"), new StringLiteralType("'Limited'"), new StringLiteralType("'DisasterRecoveryMode'")), TypePropertyFlags.ReadOnly | TypePropertyFlags.Required), new LazyTypeProperty("hostNameSslStates", () => new TypedArrayType(HostNameSslState), TypePropertyFlags.None), new TypeProperty("serverFarmId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastModifiedTimeUtc", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("siteConfig", () => SiteConfig, TypePropertyFlags.None), new TypeProperty("trafficManagerHostNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("premiumAppDeployed", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("scmSiteAlsoStopped", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("targetSwapSlot", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None), new TypeProperty("microService", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("gatewaySiteName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientAffinityEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("clientCertEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hostNamesDisabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("outboundIpAddresses", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("containerSize", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxNumberOfWorkers", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("cloningInfo", () => CloningInfo, TypePropertyFlags.None), new TypeProperty("resourceGroup", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("isDefaultContainer", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("defaultHostName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            HostNameSslState = new NamedObjectType("HostNameSslState", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sslState", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'SniEnabled'"), new StringLiteralType("'IpBasedEnabled'")), TypePropertyFlags.Required), new TypeProperty("virtualIP", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("toUpdate", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SiteConfig = new NamedObjectType("SiteConfig", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteConfigProperties, TypePropertyFlags.None)}, null);
            SiteConfigProperties = new NamedObjectType("SiteConfigProperties", new ITypeProperty[]{new TypeProperty("numberOfWorkers", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("defaultDocuments", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("netFrameworkVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("phpVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pythonVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nodeVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requestTracingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("requestTracingExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remoteDebuggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("remoteDebuggingVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("httpLoggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("logsDirectorySizeLimit", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("detailedErrorLoggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("publishingUsername", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publishingPassword", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("appSettings", () => new TypedArrayType(NameValuePair), TypePropertyFlags.None), new LazyTypeProperty("metadata", () => new TypedArrayType(NameValuePair), TypePropertyFlags.None), new LazyTypeProperty("connectionStrings", () => new TypedArrayType(ConnStringInfo), TypePropertyFlags.None), new LazyTypeProperty("handlerMappings", () => new TypedArrayType(HandlerMapping), TypePropertyFlags.None), new TypeProperty("documentRoot", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scmType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("use32BitWorkerProcess", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("webSocketsEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("alwaysOn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("javaVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("javaContainer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("javaContainerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appCommandLine", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedPipelineMode", UnionType.Create(new StringLiteralType("'Integrated'"), new StringLiteralType("'Classic'")), TypePropertyFlags.None), new LazyTypeProperty("virtualApplications", () => new TypedArrayType(VirtualApplication), TypePropertyFlags.None), new TypeProperty("loadBalancing", UnionType.Create(new StringLiteralType("'WeightedRoundRobin'"), new StringLiteralType("'LeastRequests'"), new StringLiteralType("'LeastResponseTime'"), new StringLiteralType("'WeightedTotalTraffic'"), new StringLiteralType("'RequestHash'")), TypePropertyFlags.None), new LazyTypeProperty("experiments", () => Experiments, TypePropertyFlags.None), new LazyTypeProperty("limits", () => SiteLimits, TypePropertyFlags.None), new TypeProperty("autoHealEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("autoHealRules", () => AutoHealRules, TypePropertyFlags.None), new TypeProperty("tracingOptions", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("cors", () => CorsSettings, TypePropertyFlags.None), new LazyTypeProperty("apiDefinition", () => ApiDefinitionInfo, TypePropertyFlags.None), new TypeProperty("autoSwapSlotName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("localMySqlEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ipSecurityRestrictions", () => new TypedArrayType(IpSecurityRestriction), TypePropertyFlags.None)}, null);
            ConnStringInfo = new NamedObjectType("ConnStringInfo", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'MySql'"), new StringLiteralType("'SQLServer'"), new StringLiteralType("'SQLAzure'"), new StringLiteralType("'Custom'")), TypePropertyFlags.Required)}, null);
            HandlerMapping = new NamedObjectType("HandlerMapping", new ITypeProperty[]{new TypeProperty("extension", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scriptProcessor", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("arguments", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualApplication = new NamedObjectType("VirtualApplication", new ITypeProperty[]{new TypeProperty("virtualPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("physicalPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("preloadEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("virtualDirectories", () => new TypedArrayType(VirtualDirectory), TypePropertyFlags.None)}, null);
            VirtualDirectory = new NamedObjectType("VirtualDirectory", new ITypeProperty[]{new TypeProperty("virtualPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("physicalPath", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Experiments = new NamedObjectType("Experiments", new ITypeProperty[]{new LazyTypeProperty("rampUpRules", () => new TypedArrayType(RampUpRule), TypePropertyFlags.None)}, null);
            RampUpRule = new NamedObjectType("RampUpRule", new ITypeProperty[]{new TypeProperty("actionHostName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeStep", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeIntervalInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("minReroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxReroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeDecisionCallbackUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SiteLimits = new NamedObjectType("SiteLimits", new ITypeProperty[]{new TypeProperty("maxPercentageCpu", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxMemoryInMb", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxDiskSizeInMb", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            AutoHealRules = new NamedObjectType("AutoHealRules", new ITypeProperty[]{new LazyTypeProperty("triggers", () => AutoHealTriggers, TypePropertyFlags.None), new LazyTypeProperty("actions", () => AutoHealActions, TypePropertyFlags.None)}, null);
            AutoHealTriggers = new NamedObjectType("AutoHealTriggers", new ITypeProperty[]{new LazyTypeProperty("requests", () => RequestsBasedTrigger, TypePropertyFlags.None), new TypeProperty("privateBytesInKB", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("statusCodes", () => new TypedArrayType(StatusCodesBasedTrigger), TypePropertyFlags.None), new LazyTypeProperty("slowRequests", () => SlowRequestsBasedTrigger, TypePropertyFlags.None)}, null);
            RequestsBasedTrigger = new NamedObjectType("RequestsBasedTrigger", new ITypeProperty[]{new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null);
            StatusCodesBasedTrigger = new NamedObjectType("StatusCodesBasedTrigger", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("subStatus", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("win32Status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SlowRequestsBasedTrigger = new NamedObjectType("SlowRequestsBasedTrigger", new ITypeProperty[]{new TypeProperty("timeTaken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AutoHealActions = new NamedObjectType("AutoHealActions", new ITypeProperty[]{new TypeProperty("actionType", UnionType.Create(new StringLiteralType("'Recycle'"), new StringLiteralType("'LogEvent'"), new StringLiteralType("'CustomAction'")), TypePropertyFlags.Required), new LazyTypeProperty("customAction", () => AutoHealCustomAction, TypePropertyFlags.None), new TypeProperty("minProcessExecutionTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AutoHealCustomAction = new NamedObjectType("AutoHealCustomAction", new ITypeProperty[]{new TypeProperty("exe", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CorsSettings = new NamedObjectType("CorsSettings", new ITypeProperty[]{new TypeProperty("allowedOrigins", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            ApiDefinitionInfo = new NamedObjectType("ApiDefinitionInfo", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IpSecurityRestriction = new NamedObjectType("IpSecurityRestriction", new ITypeProperty[]{new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetMask", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CloningInfo = new NamedObjectType("CloningInfo", new ITypeProperty[]{new TypeProperty("correlationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("overwrite", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("cloneCustomHostNames", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("cloneSourceControl", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sourceWebAppId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostingEnvironment", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appSettingsOverrides", new NamedObjectType("appSettingsOverrides", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("configureLoadBalancing", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trafficManagerProfileId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("trafficManagerProfileName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DeploymentProperties = new NamedObjectType("DeploymentProperties", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deployer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author_email", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("start_time", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("end_time", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("active", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("details", LanguageConstants.String, TypePropertyFlags.None)}, null);
            HostNameBindingProperties = new NamedObjectType("HostNameBindingProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("siteName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("domainId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureResourceName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureResourceType", UnionType.Create(new StringLiteralType("'Website'"), new StringLiteralType("'TrafficManager'")), TypePropertyFlags.None), new TypeProperty("customHostNameDnsRecordType", UnionType.Create(new StringLiteralType("'CName'"), new StringLiteralType("'A'")), TypePropertyFlags.None), new TypeProperty("hostNameType", UnionType.Create(new StringLiteralType("'Verified'"), new StringLiteralType("'Managed'")), TypePropertyFlags.None)}, null);
            SiteSourceControlProperties = new NamedObjectType("SiteSourceControlProperties", new ITypeProperty[]{new TypeProperty("repoUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("branch", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isManualIntegration", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("deploymentRollbackEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isMercurial", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ConnStringValueTypePair = new NamedObjectType("ConnStringValueTypePair", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'MySql'"), new StringLiteralType("'SQLServer'"), new StringLiteralType("'SQLAzure'"), new StringLiteralType("'Custom'")), TypePropertyFlags.Required)}, null);
            SiteLogsConfigProperties = new NamedObjectType("SiteLogsConfigProperties", new ITypeProperty[]{new LazyTypeProperty("applicationLogs", () => ApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("httpLogs", () => HttpLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("failedRequestsTracing", () => EnabledConfig, TypePropertyFlags.None), new LazyTypeProperty("detailedErrorMessages", () => EnabledConfig, TypePropertyFlags.None)}, null);
            ApplicationLogsConfig = new NamedObjectType("ApplicationLogsConfig", new ITypeProperty[]{new LazyTypeProperty("fileSystem", () => FileSystemApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureTableStorage", () => AzureTableStorageApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureBlobStorage", () => AzureBlobStorageApplicationLogsConfig, TypePropertyFlags.None)}, null);
            FileSystemApplicationLogsConfig = new NamedObjectType("FileSystemApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", UnionType.Create(new StringLiteralType("'Off'"), new StringLiteralType("'Verbose'"), new StringLiteralType("'Information'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Error'")), TypePropertyFlags.None)}, null);
            AzureTableStorageApplicationLogsConfig = new NamedObjectType("AzureTableStorageApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", UnionType.Create(new StringLiteralType("'Off'"), new StringLiteralType("'Verbose'"), new StringLiteralType("'Information'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Error'")), TypePropertyFlags.None), new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AzureBlobStorageApplicationLogsConfig = new NamedObjectType("AzureBlobStorageApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", UnionType.Create(new StringLiteralType("'Off'"), new StringLiteralType("'Verbose'"), new StringLiteralType("'Information'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Error'")), TypePropertyFlags.None), new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            HttpLogsConfig = new NamedObjectType("HttpLogsConfig", new ITypeProperty[]{new LazyTypeProperty("fileSystem", () => FileSystemHttpLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureBlobStorage", () => AzureBlobStorageHttpLogsConfig, TypePropertyFlags.None)}, null);
            FileSystemHttpLogsConfig = new NamedObjectType("FileSystemHttpLogsConfig", new ITypeProperty[]{new TypeProperty("retentionInMb", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            AzureBlobStorageHttpLogsConfig = new NamedObjectType("AzureBlobStorageHttpLogsConfig", new ITypeProperty[]{new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            EnabledConfig = new NamedObjectType("EnabledConfig", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ArmPlan = new NamedObjectType("ArmPlan", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("product", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("promotionCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BackupRequestProperties = new NamedObjectType("BackupRequestProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageAccountUrl", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("backupSchedule", () => BackupSchedule, TypePropertyFlags.None), new LazyTypeProperty("databases", () => new TypedArrayType(DatabaseBackupSetting), TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Clone'"), new StringLiteralType("'Relocation'")), TypePropertyFlags.Required)}, null);
            BackupSchedule = new NamedObjectType("BackupSchedule", new ITypeProperty[]{new TypeProperty("frequencyInterval", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("frequencyUnit", UnionType.Create(new StringLiteralType("'Day'"), new StringLiteralType("'Hour'")), TypePropertyFlags.Required), new TypeProperty("keepAtLeastOneBackup", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("retentionPeriodInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastExecutionTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DatabaseBackupSetting = new NamedObjectType("DatabaseBackupSetting", new ITypeProperty[]{new TypeProperty("databaseType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionStringName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionString", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RestoreRequestProperties = new NamedObjectType("RestoreRequestProperties", new ITypeProperty[]{new TypeProperty("storageAccountUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("blobName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("overwrite", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("siteName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("databases", () => new TypedArrayType(DatabaseBackupSetting), TypePropertyFlags.None), new TypeProperty("ignoreConflictingHostNames", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("operationType", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Clone'"), new StringLiteralType("'Relocation'")), TypePropertyFlags.Required), new TypeProperty("adjustConnectionStrings", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hostingEnvironment", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RelayServiceConnectionEntityProperties = new NamedObjectType("RelayServiceConnectionEntityProperties", new ITypeProperty[]{new TypeProperty("entityName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("entityConnectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceConnectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostname", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("biztalkUri", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_certificates = new ResourceType("Microsoft.Web/certificates", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/certificates'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CertificateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_certificates);
            ResourceType_csrs = new ResourceType("Microsoft.Web/csrs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/csrs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CsrProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_csrs);
            ResourceType_hostingEnvironments = new ResourceType("Microsoft.Web/hostingEnvironments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostingEnvironmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments);
            ResourceType_managedHostingEnvironments = new ResourceType("Microsoft.Web/managedHostingEnvironments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/managedHostingEnvironments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostingEnvironmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedHostingEnvironments);
            ResourceType_serverfarms = new ResourceType("Microsoft.Web/serverfarms", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerFarmWithRichSkuProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms);
            ResourceType_sites = new ResourceType("Microsoft.Web/sites", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites);
            ResourceType_hostingEnvironments_multiRolePools = new ResourceType("Microsoft.Web/hostingEnvironments/multiRolePools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments/multiRolePools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => WorkerPoolProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments_multiRolePools);
            ResourceType_hostingEnvironments_workerPools = new ResourceType("Microsoft.Web/hostingEnvironments/workerPools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments/workerPools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => WorkerPoolProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments_workerPools);
            ResourceType_sites_virtualNetworkConnections = new ResourceType("Microsoft.Web/sites/virtualNetworkConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/virtualNetworkConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetInfoProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_virtualNetworkConnections);
            ResourceType_sites_config = new ResourceType("Microsoft.Web/sites/config", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/config'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_config);
            ResourceType_sites_slots = new ResourceType("Microsoft.Web/sites/slots", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots);
            ResourceType_sites_snapshots = new ResourceType("Microsoft.Web/sites/snapshots", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/snapshots'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_snapshots);
            ResourceType_sites_deployments = new ResourceType("Microsoft.Web/sites/deployments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/deployments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_deployments);
            ResourceType_sites_hostNameBindings = new ResourceType("Microsoft.Web/sites/hostNameBindings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/hostNameBindings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostNameBindingProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_hostNameBindings);
            ResourceType_sites_sourcecontrols = new ResourceType("Microsoft.Web/sites/sourcecontrols", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/sourcecontrols'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteSourceControlProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_sourcecontrols);
            ResourceType_sites_premieraddons = new ResourceType("Microsoft.Web/sites/premieraddons", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("plan", () => ArmPlan, TypePropertyFlags.None), new TypeProperty("properties", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/premieraddons'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_premieraddons);
            ResourceType_sites_backups = new ResourceType("Microsoft.Web/sites/backups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/backups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RestoreRequestProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_backups);
            ResourceType_sites_hybridconnection = new ResourceType("Microsoft.Web/sites/hybridconnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/hybridconnection'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RelayServiceConnectionEntityProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_hybridconnection);
            ResourceType_serverfarms_virtualNetworkConnections_routes = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/routes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms/virtualNetworkConnections/routes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetRouteProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_routes);
            ResourceType_serverfarms_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms/virtualNetworkConnections/gateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways);
            ResourceType_sites_slots_virtualNetworkConnections = new ResourceType("Microsoft.Web/sites/slots/virtualNetworkConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/virtualNetworkConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetInfoProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_virtualNetworkConnections);
            ResourceType_sites_slots_snapshots = new ResourceType("Microsoft.Web/sites/slots/snapshots", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/snapshots'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_snapshots);
            ResourceType_sites_instances_deployments = new ResourceType("Microsoft.Web/sites/instances/deployments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/instances/deployments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_instances_deployments);
            ResourceType_sites_slots_deployments = new ResourceType("Microsoft.Web/sites/slots/deployments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/deployments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_deployments);
            ResourceType_sites_slots_hostNameBindings = new ResourceType("Microsoft.Web/sites/slots/hostNameBindings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/hostNameBindings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostNameBindingProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_hostNameBindings);
            ResourceType_sites_slots_config = new ResourceType("Microsoft.Web/sites/slots/config", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/config'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_config);
            ResourceType_sites_slots_sourcecontrols = new ResourceType("Microsoft.Web/sites/slots/sourcecontrols", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/sourcecontrols'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteSourceControlProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_sourcecontrols);
            ResourceType_sites_slots_premieraddons = new ResourceType("Microsoft.Web/sites/slots/premieraddons", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("plan", () => ArmPlan, TypePropertyFlags.None), new TypeProperty("properties", LanguageConstants.Any, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/premieraddons'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_premieraddons);
            ResourceType_sites_slots_backups = new ResourceType("Microsoft.Web/sites/slots/backups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/backups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RestoreRequestProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_backups);
            ResourceType_sites_slots_hybridconnection = new ResourceType("Microsoft.Web/sites/slots/hybridconnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/hybridconnection'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RelayServiceConnectionEntityProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_hybridconnection);
            ResourceType_sites_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/sites/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/virtualNetworkConnections/gateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_virtualNetworkConnections_gateways);
            ResourceType_sites_slots_instances_deployments = new ResourceType("Microsoft.Web/sites/slots/instances/deployments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/instances/deployments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_instances_deployments);
            ResourceType_sites_slots_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/sites/slots/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/sites/slots/virtualNetworkConnections/gateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_certificates, () => InstanceLazy.Value.ResourceType_certificates);
            registrar.RegisterType(ResourceTypeReference_csrs, () => InstanceLazy.Value.ResourceType_csrs);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments, () => InstanceLazy.Value.ResourceType_hostingEnvironments);
            registrar.RegisterType(ResourceTypeReference_managedHostingEnvironments, () => InstanceLazy.Value.ResourceType_managedHostingEnvironments);
            registrar.RegisterType(ResourceTypeReference_serverfarms, () => InstanceLazy.Value.ResourceType_serverfarms);
            registrar.RegisterType(ResourceTypeReference_sites, () => InstanceLazy.Value.ResourceType_sites);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_multiRolePools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_multiRolePools);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_workerPools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_workerPools);
            registrar.RegisterType(ResourceTypeReference_sites_virtualNetworkConnections, () => InstanceLazy.Value.ResourceType_sites_virtualNetworkConnections);
            registrar.RegisterType(ResourceTypeReference_sites_config, () => InstanceLazy.Value.ResourceType_sites_config);
            registrar.RegisterType(ResourceTypeReference_sites_slots, () => InstanceLazy.Value.ResourceType_sites_slots);
            registrar.RegisterType(ResourceTypeReference_sites_snapshots, () => InstanceLazy.Value.ResourceType_sites_snapshots);
            registrar.RegisterType(ResourceTypeReference_sites_deployments, () => InstanceLazy.Value.ResourceType_sites_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_hostNameBindings, () => InstanceLazy.Value.ResourceType_sites_hostNameBindings);
            registrar.RegisterType(ResourceTypeReference_sites_sourcecontrols, () => InstanceLazy.Value.ResourceType_sites_sourcecontrols);
            registrar.RegisterType(ResourceTypeReference_sites_premieraddons, () => InstanceLazy.Value.ResourceType_sites_premieraddons);
            registrar.RegisterType(ResourceTypeReference_sites_backups, () => InstanceLazy.Value.ResourceType_sites_backups);
            registrar.RegisterType(ResourceTypeReference_sites_hybridconnection, () => InstanceLazy.Value.ResourceType_sites_hybridconnection);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_routes, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_routes);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_gateways);
            registrar.RegisterType(ResourceTypeReference_sites_slots_virtualNetworkConnections, () => InstanceLazy.Value.ResourceType_sites_slots_virtualNetworkConnections);
            registrar.RegisterType(ResourceTypeReference_sites_slots_snapshots, () => InstanceLazy.Value.ResourceType_sites_slots_snapshots);
            registrar.RegisterType(ResourceTypeReference_sites_instances_deployments, () => InstanceLazy.Value.ResourceType_sites_instances_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_slots_deployments, () => InstanceLazy.Value.ResourceType_sites_slots_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_slots_hostNameBindings, () => InstanceLazy.Value.ResourceType_sites_slots_hostNameBindings);
            registrar.RegisterType(ResourceTypeReference_sites_slots_config, () => InstanceLazy.Value.ResourceType_sites_slots_config);
            registrar.RegisterType(ResourceTypeReference_sites_slots_sourcecontrols, () => InstanceLazy.Value.ResourceType_sites_slots_sourcecontrols);
            registrar.RegisterType(ResourceTypeReference_sites_slots_premieraddons, () => InstanceLazy.Value.ResourceType_sites_slots_premieraddons);
            registrar.RegisterType(ResourceTypeReference_sites_slots_backups, () => InstanceLazy.Value.ResourceType_sites_slots_backups);
            registrar.RegisterType(ResourceTypeReference_sites_slots_hybridconnection, () => InstanceLazy.Value.ResourceType_sites_slots_hybridconnection);
            registrar.RegisterType(ResourceTypeReference_sites_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_sites_virtualNetworkConnections_gateways);
            registrar.RegisterType(ResourceTypeReference_sites_slots_instances_deployments, () => InstanceLazy.Value.ResourceType_sites_slots_instances_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_sites_slots_virtualNetworkConnections_gateways);
        }
        private readonly ResourceType ResourceType_certificates;
        private readonly ResourceType ResourceType_csrs;
        private readonly ResourceType ResourceType_hostingEnvironments;
        private readonly ResourceType ResourceType_managedHostingEnvironments;
        private readonly ResourceType ResourceType_serverfarms;
        private readonly ResourceType ResourceType_sites;
        private readonly ResourceType ResourceType_hostingEnvironments_multiRolePools;
        private readonly ResourceType ResourceType_hostingEnvironments_workerPools;
        private readonly ResourceType ResourceType_sites_virtualNetworkConnections;
        private readonly ResourceType ResourceType_sites_config;
        private readonly ResourceType ResourceType_sites_slots;
        private readonly ResourceType ResourceType_sites_snapshots;
        private readonly ResourceType ResourceType_sites_deployments;
        private readonly ResourceType ResourceType_sites_hostNameBindings;
        private readonly ResourceType ResourceType_sites_sourcecontrols;
        private readonly ResourceType ResourceType_sites_premieraddons;
        private readonly ResourceType ResourceType_sites_backups;
        private readonly ResourceType ResourceType_sites_hybridconnection;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_routes;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_gateways;
        private readonly ResourceType ResourceType_sites_slots_virtualNetworkConnections;
        private readonly ResourceType ResourceType_sites_slots_snapshots;
        private readonly ResourceType ResourceType_sites_instances_deployments;
        private readonly ResourceType ResourceType_sites_slots_deployments;
        private readonly ResourceType ResourceType_sites_slots_hostNameBindings;
        private readonly ResourceType ResourceType_sites_slots_config;
        private readonly ResourceType ResourceType_sites_slots_sourcecontrols;
        private readonly ResourceType ResourceType_sites_slots_premieraddons;
        private readonly ResourceType ResourceType_sites_slots_backups;
        private readonly ResourceType ResourceType_sites_slots_hybridconnection;
        private readonly ResourceType ResourceType_sites_virtualNetworkConnections_gateways;
        private readonly ResourceType ResourceType_sites_slots_instances_deployments;
        private readonly ResourceType ResourceType_sites_slots_virtualNetworkConnections_gateways;
        private readonly TypeSymbol CertificateProperties;
        private readonly TypeSymbol HostingEnvironmentProfile;
        private readonly TypeSymbol CsrProperties;
        private readonly TypeSymbol UserProperties;
        private readonly TypeSymbol HostingEnvironmentProperties;
        private readonly TypeSymbol VirtualNetworkProfile;
        private readonly TypeSymbol WorkerPool;
        private readonly TypeSymbol WorkerPoolProperties;
        private readonly TypeSymbol SkuDescription;
        private readonly TypeSymbol VirtualIPMapping;
        private readonly TypeSymbol StampCapacity;
        private readonly TypeSymbol NetworkAccessControlEntry;
        private readonly TypeSymbol NameValuePair;
        private readonly TypeSymbol SourceControlProperties;
        private readonly TypeSymbol ServerFarmWithRichSkuProperties;
        private readonly TypeSymbol VnetRouteProperties;
        private readonly TypeSymbol VnetGatewayProperties;
        private readonly TypeSymbol VnetInfoProperties;
        private readonly TypeSymbol VnetRoute;
        private readonly TypeSymbol SlotConfigNamesResourceProperties;
        private readonly TypeSymbol SiteProperties;
        private readonly TypeSymbol HostNameSslState;
        private readonly TypeSymbol SiteConfig;
        private readonly TypeSymbol SiteConfigProperties;
        private readonly TypeSymbol ConnStringInfo;
        private readonly TypeSymbol HandlerMapping;
        private readonly TypeSymbol VirtualApplication;
        private readonly TypeSymbol VirtualDirectory;
        private readonly TypeSymbol Experiments;
        private readonly TypeSymbol RampUpRule;
        private readonly TypeSymbol SiteLimits;
        private readonly TypeSymbol AutoHealRules;
        private readonly TypeSymbol AutoHealTriggers;
        private readonly TypeSymbol RequestsBasedTrigger;
        private readonly TypeSymbol StatusCodesBasedTrigger;
        private readonly TypeSymbol SlowRequestsBasedTrigger;
        private readonly TypeSymbol AutoHealActions;
        private readonly TypeSymbol AutoHealCustomAction;
        private readonly TypeSymbol CorsSettings;
        private readonly TypeSymbol ApiDefinitionInfo;
        private readonly TypeSymbol IpSecurityRestriction;
        private readonly TypeSymbol CloningInfo;
        private readonly TypeSymbol DeploymentProperties;
        private readonly TypeSymbol HostNameBindingProperties;
        private readonly TypeSymbol SiteSourceControlProperties;
        private readonly TypeSymbol ConnStringValueTypePair;
        private readonly TypeSymbol SiteLogsConfigProperties;
        private readonly TypeSymbol ApplicationLogsConfig;
        private readonly TypeSymbol FileSystemApplicationLogsConfig;
        private readonly TypeSymbol AzureTableStorageApplicationLogsConfig;
        private readonly TypeSymbol AzureBlobStorageApplicationLogsConfig;
        private readonly TypeSymbol HttpLogsConfig;
        private readonly TypeSymbol FileSystemHttpLogsConfig;
        private readonly TypeSymbol AzureBlobStorageHttpLogsConfig;
        private readonly TypeSymbol EnabledConfig;
        private readonly TypeSymbol ArmPlan;
        private readonly TypeSymbol BackupRequestProperties;
        private readonly TypeSymbol BackupSchedule;
        private readonly TypeSymbol DatabaseBackupSetting;
        private readonly TypeSymbol RestoreRequestProperties;
        private readonly TypeSymbol RelayServiceConnectionEntityProperties;
    }
}
