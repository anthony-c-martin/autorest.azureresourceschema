// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Web_2018_02_01
    {
        private const string ProviderNamespace = "Microsoft.Web";
        private const string ApiVersion = "2018-02-01";
        private static readonly ResourceTypeReference ResourceTypeReference_certificates = new ResourceTypeReference(ProviderNamespace, new[]{"certificates"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites = new ResourceTypeReference(ProviderNamespace, new[]{"sites"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_config = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "config"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_domainOwnershipIdentifiers = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "domainOwnershipIdentifiers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_functions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "functions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_hostNameBindings = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "hostNameBindings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_hybridconnection = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "hybridconnection"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_migrate = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "migrate"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_networkConfig = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "networkConfig"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_premieraddons = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "premieraddons"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_privateAccess = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "privateAccess"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_publicCertificates = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "publicCertificates"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_siteextensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "siteextensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_sourcecontrols = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "sourcecontrols"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_virtualNetworkConnections = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "virtualNetworkConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_multiRolePools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "multiRolePools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_workerPools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "workerPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_functions_keys = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "functions", "keys"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_hybridConnectionNamespaces_relays = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "hybridConnectionNamespaces", "relays"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_instances_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "instances", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_config = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "config"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_deployments = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "deployments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_domainOwnershipIdentifiers = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "domainOwnershipIdentifiers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_functions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "functions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_hostNameBindings = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "hostNameBindings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_hybridconnection = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "hybridconnection"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_networkConfig = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "networkConfig"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_premieraddons = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "premieraddons"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_privateAccess = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "privateAccess"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_publicCertificates = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "publicCertificates"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_siteextensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "siteextensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_sourcecontrols = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "sourcecontrols"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_virtualNetworkConnections = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "virtualNetworkConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_routes = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "routes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_functions_keys = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "functions", "keys"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_hybridConnectionNamespaces_relays = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "hybridConnectionNamespaces", "relays"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_instances_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "instances", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"sites", "slots", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static Lazy<Microsoft_Web_2018_02_01> InstanceLazy = new Lazy<Microsoft_Web_2018_02_01>(() => new Microsoft_Web_2018_02_01());
        private Microsoft_Web_2018_02_01()
        {
            CertificateProperties = new NamedObjectType("CertificateProperties", new ITypeProperty[]{new TypeProperty("hostNames", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("pfxBlob", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("keyVaultId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyVaultSecretName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serverFarmId", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            UserProperties = new NamedObjectType("UserProperties", new ITypeProperty[]{new TypeProperty("publishingUserName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("publishingPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publishingPasswordHash", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publishingPasswordHashSalt", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scmUri", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SourceControlProperties = new NamedObjectType("SourceControlProperties", new ITypeProperty[]{new TypeProperty("token", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tokenSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("refreshToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("expirationTime", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SiteProperties = new NamedObjectType("SiteProperties", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hostNameSslStates", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("serverFarmId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reserved", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isXenon", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hyperV", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("siteConfig", () => SiteConfig, TypePropertyFlags.None), new TypeProperty("scmSiteAlsoStopped", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None), new TypeProperty("clientAffinityEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("clientCertEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("clientCertExclusionPaths", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostNamesDisabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("containerSize", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("dailyMemoryTimeQuota", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("cloningInfo", () => CloningInfo, TypePropertyFlags.None), new TypeProperty("httpsOnly", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("redundancyMode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("geoDistributions", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HostNameSslState = new NamedObjectType("HostNameSslState", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sslState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualIP", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("toUpdate", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hostType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SiteConfig = new NamedObjectType("SiteConfig", new ITypeProperty[]{new TypeProperty("numberOfWorkers", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("defaultDocuments", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("netFrameworkVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("phpVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pythonVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nodeVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("linuxFxVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("windowsFxVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requestTracingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("requestTracingExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remoteDebuggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("remoteDebuggingVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("httpLoggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("logsDirectorySizeLimit", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("detailedErrorLoggingEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("publishingUsername", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appSettings", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("azureStorageAccounts", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("connectionStrings", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("handlerMappings", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("documentRoot", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scmType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("use32BitWorkerProcess", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("webSocketsEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("alwaysOn", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("javaVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("javaContainer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("javaContainerVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appCommandLine", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedPipelineMode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualApplications", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("loadBalancing", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("experiments", () => Experiments, TypePropertyFlags.None), new LazyTypeProperty("limits", () => SiteLimits, TypePropertyFlags.None), new TypeProperty("autoHealEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("autoHealRules", () => AutoHealRules, TypePropertyFlags.None), new TypeProperty("tracingOptions", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("cors", () => CorsSettings, TypePropertyFlags.None), new LazyTypeProperty("push", () => PushSettings, TypePropertyFlags.None), new LazyTypeProperty("apiDefinition", () => ApiDefinitionInfo, TypePropertyFlags.None), new TypeProperty("autoSwapSlotName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("localMySqlEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("managedServiceIdentityId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("xManagedServiceIdentityId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("ipSecurityRestrictions", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("scmIpSecurityRestrictions", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("scmIpSecurityRestrictionsUseMain", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("http20Enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("minTlsVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ftpsState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reservedInstanceCount", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NameValuePair = new NamedObjectType("NameValuePair", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureStorageInfoValue = new NamedObjectType("AzureStorageInfoValue", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("accountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("shareName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("accessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("mountPath", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ConnStringInfo = new NamedObjectType("ConnStringInfo", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HandlerMapping = new NamedObjectType("HandlerMapping", new ITypeProperty[]{new TypeProperty("extension", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scriptProcessor", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("arguments", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualApplication = new NamedObjectType("VirtualApplication", new ITypeProperty[]{new TypeProperty("virtualPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("physicalPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("preloadEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("virtualDirectories", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualDirectory = new NamedObjectType("VirtualDirectory", new ITypeProperty[]{new TypeProperty("virtualPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("physicalPath", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Experiments = new NamedObjectType("Experiments", new ITypeProperty[]{new TypeProperty("rampUpRules", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RampUpRule = new NamedObjectType("RampUpRule", new ITypeProperty[]{new TypeProperty("actionHostName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeStep", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeIntervalInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("minReroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxReroutePercentage", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("changeDecisionCallbackUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SiteLimits = new NamedObjectType("SiteLimits", new ITypeProperty[]{new TypeProperty("maxPercentageCpu", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxMemoryInMb", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxDiskSizeInMb", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoHealRules = new NamedObjectType("AutoHealRules", new ITypeProperty[]{new LazyTypeProperty("triggers", () => AutoHealTriggers, TypePropertyFlags.None), new LazyTypeProperty("actions", () => AutoHealActions, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoHealTriggers = new NamedObjectType("AutoHealTriggers", new ITypeProperty[]{new LazyTypeProperty("requests", () => RequestsBasedTrigger, TypePropertyFlags.None), new TypeProperty("privateBytesInKB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("statusCodes", LanguageConstants.Array, TypePropertyFlags.None), new LazyTypeProperty("slowRequests", () => SlowRequestsBasedTrigger, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RequestsBasedTrigger = new NamedObjectType("RequestsBasedTrigger", new ITypeProperty[]{new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StatusCodesBasedTrigger = new NamedObjectType("StatusCodesBasedTrigger", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("subStatus", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("win32Status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SlowRequestsBasedTrigger = new NamedObjectType("SlowRequestsBasedTrigger", new ITypeProperty[]{new TypeProperty("timeTaken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeInterval", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoHealActions = new NamedObjectType("AutoHealActions", new ITypeProperty[]{new TypeProperty("actionType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("customAction", () => AutoHealCustomAction, TypePropertyFlags.None), new TypeProperty("minProcessExecutionTime", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AutoHealCustomAction = new NamedObjectType("AutoHealCustomAction", new ITypeProperty[]{new TypeProperty("exe", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CorsSettings = new NamedObjectType("CorsSettings", new ITypeProperty[]{new TypeProperty("allowedOrigins", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("supportCredentials", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PushSettings = new NamedObjectType("PushSettings", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PushSettingsProperties, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PushSettingsProperties = new NamedObjectType("PushSettingsProperties", new ITypeProperty[]{new TypeProperty("isPushEnabled", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("tagWhitelistJson", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tagsRequiringAuth", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dynamicTagsJson", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ApiDefinitionInfo = new NamedObjectType("ApiDefinitionInfo", new ITypeProperty[]{new TypeProperty("url", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IpSecurityRestriction = new NamedObjectType("IpSecurityRestriction", new ITypeProperty[]{new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetMask", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetSubnetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetTrafficTag", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("subnetTrafficTag", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("action", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HostingEnvironmentProfile = new NamedObjectType("HostingEnvironmentProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            CloningInfo = new NamedObjectType("CloningInfo", new ITypeProperty[]{new TypeProperty("correlationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("overwrite", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("cloneCustomHostNames", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("cloneSourceControl", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sourceWebAppId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("sourceWebAppLocation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostingEnvironment", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appSettingsOverrides", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("configureLoadBalancing", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("trafficManagerProfileId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("trafficManagerProfileName", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            GeoDistribution = new NamedObjectType("GeoDistribution", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("numberOfWorkers", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ManagedServiceIdentity = new NamedObjectType("ManagedServiceIdentity", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userAssignedIdentities", LanguageConstants.Any, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties = new NamedObjectType("Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties", new ITypeProperty[]{}, null, TypePropertyFlags.None);
            SiteAuthSettingsProperties = new NamedObjectType("SiteAuthSettingsProperties", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("runtimeVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("unauthenticatedClientAction", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tokenStoreEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowedExternalRedirectUrls", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("defaultProvider", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tokenRefreshExtensionHours", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientSecretCertificateThumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("issuer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("validateIssuer", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowedAudiences", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("additionalLoginParams", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("googleClientId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("googleClientSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("googleOAuthScopes", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("facebookAppId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("facebookAppSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("facebookOAuthScopes", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("twitterConsumerKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("twitterConsumerSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("microsoftAccountClientId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("microsoftAccountClientSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("microsoftAccountOAuthScopes", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            BackupRequestProperties = new NamedObjectType("BackupRequestProperties", new ITypeProperty[]{new TypeProperty("backupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageAccountUrl", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("backupSchedule", () => BackupSchedule, TypePropertyFlags.None), new TypeProperty("databases", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            BackupSchedule = new NamedObjectType("BackupSchedule", new ITypeProperty[]{new TypeProperty("frequencyInterval", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("frequencyUnit", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("keepAtLeastOneBackup", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("retentionPeriodInDays", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DatabaseBackupSetting = new NamedObjectType("DatabaseBackupSetting", new ITypeProperty[]{new TypeProperty("databaseType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionStringName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionString", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ConnStringValueTypePair = new NamedObjectType("ConnStringValueTypePair", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            SiteLogsConfigProperties = new NamedObjectType("SiteLogsConfigProperties", new ITypeProperty[]{new LazyTypeProperty("applicationLogs", () => ApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("httpLogs", () => HttpLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("failedRequestsTracing", () => EnabledConfig, TypePropertyFlags.None), new LazyTypeProperty("detailedErrorMessages", () => EnabledConfig, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ApplicationLogsConfig = new NamedObjectType("ApplicationLogsConfig", new ITypeProperty[]{new LazyTypeProperty("fileSystem", () => FileSystemApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureTableStorage", () => AzureTableStorageApplicationLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureBlobStorage", () => AzureBlobStorageApplicationLogsConfig, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FileSystemApplicationLogsConfig = new NamedObjectType("FileSystemApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureTableStorageApplicationLogsConfig = new NamedObjectType("AzureTableStorageApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AzureBlobStorageApplicationLogsConfig = new NamedObjectType("AzureBlobStorageApplicationLogsConfig", new ITypeProperty[]{new TypeProperty("level", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HttpLogsConfig = new NamedObjectType("HttpLogsConfig", new ITypeProperty[]{new LazyTypeProperty("fileSystem", () => FileSystemHttpLogsConfig, TypePropertyFlags.None), new LazyTypeProperty("azureBlobStorage", () => AzureBlobStorageHttpLogsConfig, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FileSystemHttpLogsConfig = new NamedObjectType("FileSystemHttpLogsConfig", new ITypeProperty[]{new TypeProperty("retentionInMb", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AzureBlobStorageHttpLogsConfig = new NamedObjectType("AzureBlobStorageHttpLogsConfig", new ITypeProperty[]{new TypeProperty("sasUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            EnabledConfig = new NamedObjectType("EnabledConfig", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SlotConfigNames = new NamedObjectType("SlotConfigNames", new ITypeProperty[]{new TypeProperty("connectionStringNames", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("appSettingNames", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("azureStorageConfigNames", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DeploymentProperties = new NamedObjectType("DeploymentProperties", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deployer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author_email", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("start_time", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("end_time", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("active", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("details", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            IdentifierProperties = new NamedObjectType("IdentifierProperties", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            MSDeployCore = new NamedObjectType("MSDeployCore", new ITypeProperty[]{new TypeProperty("packageUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dbType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("setParametersXmlFileUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("setParameters", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("skipAppData", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("appOffline", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FunctionEnvelopeProperties = new NamedObjectType("FunctionEnvelopeProperties", new ITypeProperty[]{new TypeProperty("function_app_id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("script_root_path_href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("script_href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("config_href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("test_data_href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secrets_file_href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("href", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("config", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("files", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("test_data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("invoke_url_template", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("language", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isDisabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HostNameBindingProperties = new NamedObjectType("HostNameBindingProperties", new ITypeProperty[]{new TypeProperty("siteName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("domainId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureResourceName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureResourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customHostNameDnsRecordType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostNameType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sslState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            HybridConnectionProperties = new NamedObjectType("HybridConnectionProperties", new ITypeProperty[]{new TypeProperty("serviceBusNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("relayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("relayArmUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostname", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sendKeyName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sendKeyValue", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceBusSuffix", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            RelayServiceConnectionEntityProperties = new NamedObjectType("RelayServiceConnectionEntityProperties", new ITypeProperty[]{new TypeProperty("entityName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("entityConnectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceConnectionString", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostname", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("biztalkUri", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            StorageMigrationOptionsProperties = new NamedObjectType("StorageMigrationOptionsProperties", new ITypeProperty[]{new TypeProperty("azurefilesConnectionString", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("azurefilesShare", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("switchSiteAfterMigration", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("blockWriteAccessToSite", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SwiftVirtualNetworkProperties = new NamedObjectType("SwiftVirtualNetworkProperties", new ITypeProperty[]{new TypeProperty("subnetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("swiftSupported", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PremierAddOnProperties = new NamedObjectType("PremierAddOnProperties", new ITypeProperty[]{new TypeProperty("sku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("product", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vendor", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("marketplacePublisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("marketplaceOffer", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PrivateAccessProperties = new NamedObjectType("PrivateAccessProperties", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("virtualNetworks", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PrivateAccessVirtualNetwork = new NamedObjectType("PrivateAccessVirtualNetwork", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("key", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnets", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PrivateAccessSubnet = new NamedObjectType("PrivateAccessSubnet", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("key", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            PublicCertificateProperties = new NamedObjectType("PublicCertificateProperties", new ITypeProperty[]{new TypeProperty("blob", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("publicCertificateLocation", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SiteSourceControlProperties = new NamedObjectType("SiteSourceControlProperties", new ITypeProperty[]{new TypeProperty("repoUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("branch", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isManualIntegration", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("deploymentRollbackEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isMercurial", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VnetInfoProperties = new NamedObjectType("VnetInfoProperties", new ITypeProperty[]{new TypeProperty("vnetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("certBlob", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsServers", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isSwift", LanguageConstants.Bool, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VnetGatewayProperties = new NamedObjectType("VnetGatewayProperties", new ITypeProperty[]{new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vpnPackageUri", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            AppServiceEnvironment = new NamedObjectType("AppServiceEnvironment", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetResourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetSubnetName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("virtualNetwork", () => VirtualNetworkProfile, TypePropertyFlags.Required), new TypeProperty("internalLoadBalancingMode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("multiSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("multiRoleCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("workerPools", LanguageConstants.Array, TypePropertyFlags.Required), new TypeProperty("ipsslAddressCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("dnsSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("networkAccessControlList", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("frontEndScaleFactor", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("apiManagementAccountId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("suspended", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dynamicCacheEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("clusterSettings", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("userWhitelistedIpRanges", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("hasLinuxWorkers", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sslCertKeyVaultId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sslCertKeyVaultSecretName", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VirtualNetworkProfile = new NamedObjectType("VirtualNetworkProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnet", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            WorkerPool = new NamedObjectType("WorkerPool", new ITypeProperty[]{new TypeProperty("workerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("computeMode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("workerSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("workerCount", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            NetworkAccessControlEntry = new NamedObjectType("NetworkAccessControlEntry", new ITypeProperty[]{new TypeProperty("action", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("order", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("remoteSubnet", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SkuDescription = new NamedObjectType("SkuDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("skuCapacity", () => SkuCapacity, TypePropertyFlags.None), new TypeProperty("locations", LanguageConstants.Array, TypePropertyFlags.None), new TypeProperty("capabilities", LanguageConstants.Array, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            SkuCapacity = new NamedObjectType("SkuCapacity", new ITypeProperty[]{new TypeProperty("minimum", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maximum", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("default", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("scaleType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            Capability = new NamedObjectType("Capability", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reason", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            AppServicePlanProperties = new NamedObjectType("AppServicePlanProperties", new ITypeProperty[]{new TypeProperty("workerTierName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None), new TypeProperty("perSiteScaling", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("maximumElasticWorkerCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("isSpot", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("spotExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("freeOfferExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reserved", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isXenon", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hyperV", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("targetWorkerCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("targetWorkerSizeId", LanguageConstants.Int, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            VnetRouteProperties = new NamedObjectType("VnetRouteProperties", new ITypeProperty[]{new TypeProperty("startAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("routeType", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceType_certificates = new ResourceType("Microsoft.Web/certificates", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => CertificateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_certificates);
            ResourceType_sites = new ResourceType("Microsoft.Web/sites", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteProperties, TypePropertyFlags.Required), new LazyTypeProperty("identity", () => ManagedServiceIdentity, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites);
            ResourceType_hostingEnvironments = new ResourceType("Microsoft.Web/hostingEnvironments", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AppServiceEnvironment, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_hostingEnvironments);
            ResourceType_serverfarms = new ResourceType("Microsoft.Web/serverfarms", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AppServicePlanProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_serverfarms);
            ResourceType_sites_config = new ResourceType("Microsoft.Web/sites/config", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_config);
            ResourceType_sites_deployments = new ResourceType("Microsoft.Web/sites/deployments", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_deployments);
            ResourceType_sites_domainOwnershipIdentifiers = new ResourceType("Microsoft.Web/sites/domainOwnershipIdentifiers", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IdentifierProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_domainOwnershipIdentifiers);
            ResourceType_sites_extensions = new ResourceType("Microsoft.Web/sites/extensions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => MSDeployCore, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_extensions);
            ResourceType_sites_functions = new ResourceType("Microsoft.Web/sites/functions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FunctionEnvelopeProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_functions);
            ResourceType_sites_hostNameBindings = new ResourceType("Microsoft.Web/sites/hostNameBindings", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostNameBindingProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_hostNameBindings);
            ResourceType_sites_hybridconnection = new ResourceType("Microsoft.Web/sites/hybridconnection", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => RelayServiceConnectionEntityProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_hybridconnection);
            ResourceType_sites_migrate = new ResourceType("Microsoft.Web/sites/migrate", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => StorageMigrationOptionsProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_migrate);
            ResourceType_sites_networkConfig = new ResourceType("Microsoft.Web/sites/networkConfig", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SwiftVirtualNetworkProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_networkConfig);
            ResourceType_sites_premieraddons = new ResourceType("Microsoft.Web/sites/premieraddons", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PremierAddOnProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_premieraddons);
            ResourceType_sites_privateAccess = new ResourceType("Microsoft.Web/sites/privateAccess", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateAccessProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_privateAccess);
            ResourceType_sites_publicCertificates = new ResourceType("Microsoft.Web/sites/publicCertificates", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicCertificateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_publicCertificates);
            ResourceType_sites_siteextensions = new ResourceType("Microsoft.Web/sites/siteextensions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_siteextensions);
            ResourceType_sites_slots = new ResourceType("Microsoft.Web/sites/slots", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteProperties, TypePropertyFlags.Required), new LazyTypeProperty("identity", () => ManagedServiceIdentity, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots);
            ResourceType_sites_sourcecontrols = new ResourceType("Microsoft.Web/sites/sourcecontrols", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteSourceControlProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_sourcecontrols);
            ResourceType_sites_virtualNetworkConnections = new ResourceType("Microsoft.Web/sites/virtualNetworkConnections", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetInfoProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_virtualNetworkConnections);
            ResourceType_hostingEnvironments_multiRolePools = new ResourceType("Microsoft.Web/hostingEnvironments/multiRolePools", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => WorkerPool, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_hostingEnvironments_multiRolePools);
            ResourceType_hostingEnvironments_workerPools = new ResourceType("Microsoft.Web/hostingEnvironments/workerPools", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => WorkerPool, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_hostingEnvironments_workerPools);
            ResourceType_sites_functions_keys = new ResourceType("Microsoft.Web/sites/functions/keys", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_functions_keys);
            ResourceType_sites_hybridConnectionNamespaces_relays = new ResourceType("Microsoft.Web/sites/hybridConnectionNamespaces/relays", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => HybridConnectionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_hybridConnectionNamespaces_relays);
            ResourceType_sites_instances_extensions = new ResourceType("Microsoft.Web/sites/instances/extensions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => MSDeployCore, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_instances_extensions);
            ResourceType_sites_slots_config = new ResourceType("Microsoft.Web/sites/slots/config", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_config);
            ResourceType_sites_slots_deployments = new ResourceType("Microsoft.Web/sites/slots/deployments", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DeploymentProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_deployments);
            ResourceType_sites_slots_domainOwnershipIdentifiers = new ResourceType("Microsoft.Web/sites/slots/domainOwnershipIdentifiers", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IdentifierProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_domainOwnershipIdentifiers);
            ResourceType_sites_slots_extensions = new ResourceType("Microsoft.Web/sites/slots/extensions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => MSDeployCore, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_extensions);
            ResourceType_sites_slots_functions = new ResourceType("Microsoft.Web/sites/slots/functions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FunctionEnvelopeProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_functions);
            ResourceType_sites_slots_hostNameBindings = new ResourceType("Microsoft.Web/sites/slots/hostNameBindings", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => HostNameBindingProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_hostNameBindings);
            ResourceType_sites_slots_hybridconnection = new ResourceType("Microsoft.Web/sites/slots/hybridconnection", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => RelayServiceConnectionEntityProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_hybridconnection);
            ResourceType_sites_slots_networkConfig = new ResourceType("Microsoft.Web/sites/slots/networkConfig", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SwiftVirtualNetworkProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_networkConfig);
            ResourceType_sites_slots_premieraddons = new ResourceType("Microsoft.Web/sites/slots/premieraddons", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PremierAddOnProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_premieraddons);
            ResourceType_sites_slots_privateAccess = new ResourceType("Microsoft.Web/sites/slots/privateAccess", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateAccessProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_privateAccess);
            ResourceType_sites_slots_publicCertificates = new ResourceType("Microsoft.Web/sites/slots/publicCertificates", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicCertificateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_publicCertificates);
            ResourceType_sites_slots_siteextensions = new ResourceType("Microsoft.Web/sites/slots/siteextensions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_siteextensions);
            ResourceType_sites_slots_sourcecontrols = new ResourceType("Microsoft.Web/sites/slots/sourcecontrols", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SiteSourceControlProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_sourcecontrols);
            ResourceType_sites_slots_virtualNetworkConnections = new ResourceType("Microsoft.Web/sites/slots/virtualNetworkConnections", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetInfoProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_virtualNetworkConnections);
            ResourceType_sites_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/sites/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_virtualNetworkConnections_gateways);
            ResourceType_serverfarms_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways);
            ResourceType_serverfarms_virtualNetworkConnections_routes = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/routes", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetRouteProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_routes);
            ResourceType_sites_slots_functions_keys = new ResourceType("Microsoft.Web/sites/slots/functions/keys", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_functions_keys);
            ResourceType_sites_slots_hybridConnectionNamespaces_relays = new ResourceType("Microsoft.Web/sites/slots/hybridConnectionNamespaces/relays", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => HybridConnectionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_hybridConnectionNamespaces_relays);
            ResourceType_sites_slots_instances_extensions = new ResourceType("Microsoft.Web/sites/slots/instances/extensions", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => MSDeployCore, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_instances_extensions);
            ResourceType_sites_slots_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/sites/slots/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_certificates, () => InstanceLazy.Value.ResourceType_certificates);
            registrar.RegisterType(ResourceTypeReference_sites, () => InstanceLazy.Value.ResourceType_sites);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments, () => InstanceLazy.Value.ResourceType_hostingEnvironments);
            registrar.RegisterType(ResourceTypeReference_serverfarms, () => InstanceLazy.Value.ResourceType_serverfarms);
            registrar.RegisterType(ResourceTypeReference_sites_config, () => InstanceLazy.Value.ResourceType_sites_config);
            registrar.RegisterType(ResourceTypeReference_sites_deployments, () => InstanceLazy.Value.ResourceType_sites_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_domainOwnershipIdentifiers, () => InstanceLazy.Value.ResourceType_sites_domainOwnershipIdentifiers);
            registrar.RegisterType(ResourceTypeReference_sites_extensions, () => InstanceLazy.Value.ResourceType_sites_extensions);
            registrar.RegisterType(ResourceTypeReference_sites_functions, () => InstanceLazy.Value.ResourceType_sites_functions);
            registrar.RegisterType(ResourceTypeReference_sites_hostNameBindings, () => InstanceLazy.Value.ResourceType_sites_hostNameBindings);
            registrar.RegisterType(ResourceTypeReference_sites_hybridconnection, () => InstanceLazy.Value.ResourceType_sites_hybridconnection);
            registrar.RegisterType(ResourceTypeReference_sites_migrate, () => InstanceLazy.Value.ResourceType_sites_migrate);
            registrar.RegisterType(ResourceTypeReference_sites_networkConfig, () => InstanceLazy.Value.ResourceType_sites_networkConfig);
            registrar.RegisterType(ResourceTypeReference_sites_premieraddons, () => InstanceLazy.Value.ResourceType_sites_premieraddons);
            registrar.RegisterType(ResourceTypeReference_sites_privateAccess, () => InstanceLazy.Value.ResourceType_sites_privateAccess);
            registrar.RegisterType(ResourceTypeReference_sites_publicCertificates, () => InstanceLazy.Value.ResourceType_sites_publicCertificates);
            registrar.RegisterType(ResourceTypeReference_sites_siteextensions, () => InstanceLazy.Value.ResourceType_sites_siteextensions);
            registrar.RegisterType(ResourceTypeReference_sites_slots, () => InstanceLazy.Value.ResourceType_sites_slots);
            registrar.RegisterType(ResourceTypeReference_sites_sourcecontrols, () => InstanceLazy.Value.ResourceType_sites_sourcecontrols);
            registrar.RegisterType(ResourceTypeReference_sites_virtualNetworkConnections, () => InstanceLazy.Value.ResourceType_sites_virtualNetworkConnections);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_multiRolePools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_multiRolePools);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_workerPools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_workerPools);
            registrar.RegisterType(ResourceTypeReference_sites_functions_keys, () => InstanceLazy.Value.ResourceType_sites_functions_keys);
            registrar.RegisterType(ResourceTypeReference_sites_hybridConnectionNamespaces_relays, () => InstanceLazy.Value.ResourceType_sites_hybridConnectionNamespaces_relays);
            registrar.RegisterType(ResourceTypeReference_sites_instances_extensions, () => InstanceLazy.Value.ResourceType_sites_instances_extensions);
            registrar.RegisterType(ResourceTypeReference_sites_slots_config, () => InstanceLazy.Value.ResourceType_sites_slots_config);
            registrar.RegisterType(ResourceTypeReference_sites_slots_deployments, () => InstanceLazy.Value.ResourceType_sites_slots_deployments);
            registrar.RegisterType(ResourceTypeReference_sites_slots_domainOwnershipIdentifiers, () => InstanceLazy.Value.ResourceType_sites_slots_domainOwnershipIdentifiers);
            registrar.RegisterType(ResourceTypeReference_sites_slots_extensions, () => InstanceLazy.Value.ResourceType_sites_slots_extensions);
            registrar.RegisterType(ResourceTypeReference_sites_slots_functions, () => InstanceLazy.Value.ResourceType_sites_slots_functions);
            registrar.RegisterType(ResourceTypeReference_sites_slots_hostNameBindings, () => InstanceLazy.Value.ResourceType_sites_slots_hostNameBindings);
            registrar.RegisterType(ResourceTypeReference_sites_slots_hybridconnection, () => InstanceLazy.Value.ResourceType_sites_slots_hybridconnection);
            registrar.RegisterType(ResourceTypeReference_sites_slots_networkConfig, () => InstanceLazy.Value.ResourceType_sites_slots_networkConfig);
            registrar.RegisterType(ResourceTypeReference_sites_slots_premieraddons, () => InstanceLazy.Value.ResourceType_sites_slots_premieraddons);
            registrar.RegisterType(ResourceTypeReference_sites_slots_privateAccess, () => InstanceLazy.Value.ResourceType_sites_slots_privateAccess);
            registrar.RegisterType(ResourceTypeReference_sites_slots_publicCertificates, () => InstanceLazy.Value.ResourceType_sites_slots_publicCertificates);
            registrar.RegisterType(ResourceTypeReference_sites_slots_siteextensions, () => InstanceLazy.Value.ResourceType_sites_slots_siteextensions);
            registrar.RegisterType(ResourceTypeReference_sites_slots_sourcecontrols, () => InstanceLazy.Value.ResourceType_sites_slots_sourcecontrols);
            registrar.RegisterType(ResourceTypeReference_sites_slots_virtualNetworkConnections, () => InstanceLazy.Value.ResourceType_sites_slots_virtualNetworkConnections);
            registrar.RegisterType(ResourceTypeReference_sites_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_sites_virtualNetworkConnections_gateways);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_gateways);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_routes, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_routes);
            registrar.RegisterType(ResourceTypeReference_sites_slots_functions_keys, () => InstanceLazy.Value.ResourceType_sites_slots_functions_keys);
            registrar.RegisterType(ResourceTypeReference_sites_slots_hybridConnectionNamespaces_relays, () => InstanceLazy.Value.ResourceType_sites_slots_hybridConnectionNamespaces_relays);
            registrar.RegisterType(ResourceTypeReference_sites_slots_instances_extensions, () => InstanceLazy.Value.ResourceType_sites_slots_instances_extensions);
            registrar.RegisterType(ResourceTypeReference_sites_slots_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_sites_slots_virtualNetworkConnections_gateways);
        }
        private readonly ResourceType ResourceType_certificates;
        private readonly ResourceType ResourceType_sites;
        private readonly ResourceType ResourceType_hostingEnvironments;
        private readonly ResourceType ResourceType_serverfarms;
        private readonly ResourceType ResourceType_sites_config;
        private readonly ResourceType ResourceType_sites_deployments;
        private readonly ResourceType ResourceType_sites_domainOwnershipIdentifiers;
        private readonly ResourceType ResourceType_sites_extensions;
        private readonly ResourceType ResourceType_sites_functions;
        private readonly ResourceType ResourceType_sites_hostNameBindings;
        private readonly ResourceType ResourceType_sites_hybridconnection;
        private readonly ResourceType ResourceType_sites_migrate;
        private readonly ResourceType ResourceType_sites_networkConfig;
        private readonly ResourceType ResourceType_sites_premieraddons;
        private readonly ResourceType ResourceType_sites_privateAccess;
        private readonly ResourceType ResourceType_sites_publicCertificates;
        private readonly ResourceType ResourceType_sites_siteextensions;
        private readonly ResourceType ResourceType_sites_slots;
        private readonly ResourceType ResourceType_sites_sourcecontrols;
        private readonly ResourceType ResourceType_sites_virtualNetworkConnections;
        private readonly ResourceType ResourceType_hostingEnvironments_multiRolePools;
        private readonly ResourceType ResourceType_hostingEnvironments_workerPools;
        private readonly ResourceType ResourceType_sites_functions_keys;
        private readonly ResourceType ResourceType_sites_hybridConnectionNamespaces_relays;
        private readonly ResourceType ResourceType_sites_instances_extensions;
        private readonly ResourceType ResourceType_sites_slots_config;
        private readonly ResourceType ResourceType_sites_slots_deployments;
        private readonly ResourceType ResourceType_sites_slots_domainOwnershipIdentifiers;
        private readonly ResourceType ResourceType_sites_slots_extensions;
        private readonly ResourceType ResourceType_sites_slots_functions;
        private readonly ResourceType ResourceType_sites_slots_hostNameBindings;
        private readonly ResourceType ResourceType_sites_slots_hybridconnection;
        private readonly ResourceType ResourceType_sites_slots_networkConfig;
        private readonly ResourceType ResourceType_sites_slots_premieraddons;
        private readonly ResourceType ResourceType_sites_slots_privateAccess;
        private readonly ResourceType ResourceType_sites_slots_publicCertificates;
        private readonly ResourceType ResourceType_sites_slots_siteextensions;
        private readonly ResourceType ResourceType_sites_slots_sourcecontrols;
        private readonly ResourceType ResourceType_sites_slots_virtualNetworkConnections;
        private readonly ResourceType ResourceType_sites_virtualNetworkConnections_gateways;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_gateways;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_routes;
        private readonly ResourceType ResourceType_sites_slots_functions_keys;
        private readonly ResourceType ResourceType_sites_slots_hybridConnectionNamespaces_relays;
        private readonly ResourceType ResourceType_sites_slots_instances_extensions;
        private readonly ResourceType ResourceType_sites_slots_virtualNetworkConnections_gateways;
        private readonly TypeSymbol CertificateProperties;
        private readonly TypeSymbol UserProperties;
        private readonly TypeSymbol SourceControlProperties;
        private readonly TypeSymbol SiteProperties;
        private readonly TypeSymbol HostNameSslState;
        private readonly TypeSymbol SiteConfig;
        private readonly TypeSymbol NameValuePair;
        private readonly TypeSymbol AzureStorageInfoValue;
        private readonly TypeSymbol ConnStringInfo;
        private readonly TypeSymbol HandlerMapping;
        private readonly TypeSymbol VirtualApplication;
        private readonly TypeSymbol VirtualDirectory;
        private readonly TypeSymbol Experiments;
        private readonly TypeSymbol RampUpRule;
        private readonly TypeSymbol SiteLimits;
        private readonly TypeSymbol AutoHealRules;
        private readonly TypeSymbol AutoHealTriggers;
        private readonly TypeSymbol RequestsBasedTrigger;
        private readonly TypeSymbol StatusCodesBasedTrigger;
        private readonly TypeSymbol SlowRequestsBasedTrigger;
        private readonly TypeSymbol AutoHealActions;
        private readonly TypeSymbol AutoHealCustomAction;
        private readonly TypeSymbol CorsSettings;
        private readonly TypeSymbol PushSettings;
        private readonly TypeSymbol PushSettingsProperties;
        private readonly TypeSymbol ApiDefinitionInfo;
        private readonly TypeSymbol IpSecurityRestriction;
        private readonly TypeSymbol HostingEnvironmentProfile;
        private readonly TypeSymbol CloningInfo;
        private readonly TypeSymbol GeoDistribution;
        private readonly TypeSymbol ManagedServiceIdentity;
        private readonly TypeSymbol Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties;
        private readonly TypeSymbol SiteAuthSettingsProperties;
        private readonly TypeSymbol BackupRequestProperties;
        private readonly TypeSymbol BackupSchedule;
        private readonly TypeSymbol DatabaseBackupSetting;
        private readonly TypeSymbol ConnStringValueTypePair;
        private readonly TypeSymbol SiteLogsConfigProperties;
        private readonly TypeSymbol ApplicationLogsConfig;
        private readonly TypeSymbol FileSystemApplicationLogsConfig;
        private readonly TypeSymbol AzureTableStorageApplicationLogsConfig;
        private readonly TypeSymbol AzureBlobStorageApplicationLogsConfig;
        private readonly TypeSymbol HttpLogsConfig;
        private readonly TypeSymbol FileSystemHttpLogsConfig;
        private readonly TypeSymbol AzureBlobStorageHttpLogsConfig;
        private readonly TypeSymbol EnabledConfig;
        private readonly TypeSymbol SlotConfigNames;
        private readonly TypeSymbol DeploymentProperties;
        private readonly TypeSymbol IdentifierProperties;
        private readonly TypeSymbol MSDeployCore;
        private readonly TypeSymbol FunctionEnvelopeProperties;
        private readonly TypeSymbol HostNameBindingProperties;
        private readonly TypeSymbol HybridConnectionProperties;
        private readonly TypeSymbol RelayServiceConnectionEntityProperties;
        private readonly TypeSymbol StorageMigrationOptionsProperties;
        private readonly TypeSymbol SwiftVirtualNetworkProperties;
        private readonly TypeSymbol PremierAddOnProperties;
        private readonly TypeSymbol PrivateAccessProperties;
        private readonly TypeSymbol PrivateAccessVirtualNetwork;
        private readonly TypeSymbol PrivateAccessSubnet;
        private readonly TypeSymbol PublicCertificateProperties;
        private readonly TypeSymbol SiteSourceControlProperties;
        private readonly TypeSymbol VnetInfoProperties;
        private readonly TypeSymbol VnetGatewayProperties;
        private readonly TypeSymbol AppServiceEnvironment;
        private readonly TypeSymbol VirtualNetworkProfile;
        private readonly TypeSymbol WorkerPool;
        private readonly TypeSymbol NetworkAccessControlEntry;
        private readonly TypeSymbol SkuDescription;
        private readonly TypeSymbol SkuCapacity;
        private readonly TypeSymbol Capability;
        private readonly TypeSymbol AppServicePlanProperties;
        private readonly TypeSymbol VnetRouteProperties;
    }
}
