// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Web_2016_09_01
    {
        private const string ProviderNamespace = "Microsoft.Web";
        private const string ApiVersion = "2016-09-01";
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_multiRolePools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "multiRolePools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_hostingEnvironments_workerPools = new ResourceTypeReference(ProviderNamespace, new[]{"hostingEnvironments", "workerPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "gateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serverfarms_virtualNetworkConnections_routes = new ResourceTypeReference(ProviderNamespace, new[]{"serverfarms", "virtualNetworkConnections", "routes"}, ApiVersion);
        private static Lazy<Microsoft_Web_2016_09_01> InstanceLazy = new Lazy<Microsoft_Web_2016_09_01>(() => new Microsoft_Web_2016_09_01());
        private Microsoft_Web_2016_09_01()
        {
            AppServiceEnvironment = new NamedObjectType("AppServiceEnvironment", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'InProgress'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.ReadOnly), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Preparing'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Scaling'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.ReadOnly), new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetResourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vnetSubnetName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("virtualNetwork", () => VirtualNetworkProfile, TypePropertyFlags.Required), new TypeProperty("internalLoadBalancingMode", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Web'"), new StringLiteralType("'Publishing'")), TypePropertyFlags.None), new TypeProperty("multiSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("multiRoleCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("workerPools", () => new TypedArrayType(WorkerPool), TypePropertyFlags.Required), new TypeProperty("ipsslAddressCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("databaseEdition", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("databaseServiceObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("upgradeDomains", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("subscriptionId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("dnsSuffix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastAction", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastActionResult", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("allowedMultiSizes", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("allowedWorkerSizes", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("maximumNumberOfMachines", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("vipMappings", () => new TypedArrayType(VirtualIPMapping), TypePropertyFlags.ReadOnly), new LazyTypeProperty("environmentCapacities", () => new TypedArrayType(StampCapacity), TypePropertyFlags.ReadOnly), new LazyTypeProperty("networkAccessControlList", () => new TypedArrayType(NetworkAccessControlEntry), TypePropertyFlags.None), new TypeProperty("environmentIsHealthy", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("environmentStatus", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("resourceGroup", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("frontEndScaleFactor", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("defaultFrontEndScaleFactor", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("apiManagementAccountId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("suspended", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dynamicCacheEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("clusterSettings", () => new TypedArrayType(NameValuePair), TypePropertyFlags.None), new TypeProperty("userWhitelistedIpRanges", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            VirtualNetworkProfile = new NamedObjectType("VirtualNetworkProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("subnet", LanguageConstants.String, TypePropertyFlags.None)}, null);
            WorkerPool = new NamedObjectType("WorkerPool", new ITypeProperty[]{new TypeProperty("workerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("computeMode", UnionType.Create(new StringLiteralType("'Shared'"), new StringLiteralType("'Dedicated'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("workerSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("workerCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("instanceNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly)}, null);
            VirtualIPMapping = new NamedObjectType("VirtualIPMapping", new ITypeProperty[]{new TypeProperty("virtualIP", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalHttpPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("internalHttpsPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("inUse", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            StampCapacity = new NamedObjectType("StampCapacity", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("availableCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("unit", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("computeMode", UnionType.Create(new StringLiteralType("'Shared'"), new StringLiteralType("'Dedicated'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("workerSize", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Small'"), new StringLiteralType("'Medium'"), new StringLiteralType("'Large'"), new StringLiteralType("'D1'"), new StringLiteralType("'D2'"), new StringLiteralType("'D3'")), TypePropertyFlags.None), new TypeProperty("workerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("excludeFromCapacityAllocation", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isApplicableForAllComputeModes", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("siteMode", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkAccessControlEntry = new NamedObjectType("NetworkAccessControlEntry", new ITypeProperty[]{new TypeProperty("action", UnionType.Create(new StringLiteralType("'Permit'"), new StringLiteralType("'Deny'")), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("order", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("remoteSubnet", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NameValuePair = new NamedObjectType("NameValuePair", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SkuDescription = new NamedObjectType("SkuDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("skuCapacity", () => SkuCapacity, TypePropertyFlags.None), new TypeProperty("locations", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("capabilities", () => new TypedArrayType(Capability), TypePropertyFlags.None)}, null);
            SkuCapacity = new NamedObjectType("SkuCapacity", new ITypeProperty[]{new TypeProperty("minimum", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maximum", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("default", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("scaleType", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Capability = new NamedObjectType("Capability", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reason", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AppServicePlanProperties = new NamedObjectType("AppServicePlanProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("workerTierName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Ready'"), new StringLiteralType("'Pending'"), new StringLiteralType("'Creating'")), TypePropertyFlags.ReadOnly), new TypeProperty("subscription", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("adminSiteName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentProfile", () => HostingEnvironmentProfile, TypePropertyFlags.None), new TypeProperty("maximumNumberOfWorkers", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("geoRegion", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("perSiteScaling", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("numberOfSites", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("isSpot", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("spotExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceGroup", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("reserved", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("targetWorkerCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("targetWorkerSizeId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'InProgress'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.ReadOnly)}, null);
            HostingEnvironmentProfile = new NamedObjectType("HostingEnvironmentProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VnetGatewayProperties = new NamedObjectType("VnetGatewayProperties", new ITypeProperty[]{new TypeProperty("vnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vpnPackageUri", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            VnetRouteProperties = new NamedObjectType("VnetRouteProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("routeType", UnionType.Create(new StringLiteralType("'DEFAULT'"), new StringLiteralType("'INHERITED'"), new StringLiteralType("'STATIC'")), TypePropertyFlags.None)}, null);
            ResourceType_hostingEnvironments = new ResourceType("Microsoft.Web/hostingEnvironments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => AppServiceEnvironment, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments);
            ResourceType_serverfarms = new ResourceType("Microsoft.Web/serverfarms", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => AppServicePlanProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms);
            ResourceType_hostingEnvironments_multiRolePools = new ResourceType("Microsoft.Web/hostingEnvironments/multiRolePools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments/multiRolePools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => WorkerPool, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments_multiRolePools);
            ResourceType_hostingEnvironments_workerPools = new ResourceType("Microsoft.Web/hostingEnvironments/workerPools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/hostingEnvironments/workerPools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => WorkerPool, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_hostingEnvironments_workerPools);
            ResourceType_serverfarms_virtualNetworkConnections_gateways = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/gateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms/virtualNetworkConnections/gateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VnetGatewayProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways);
            ResourceType_serverfarms_virtualNetworkConnections_routes = new ResourceType("Microsoft.Web/serverfarms/virtualNetworkConnections/routes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/serverfarms/virtualNetworkConnections/routes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VnetRouteProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serverfarms_virtualNetworkConnections_routes);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments, () => InstanceLazy.Value.ResourceType_hostingEnvironments);
            registrar.RegisterType(ResourceTypeReference_serverfarms, () => InstanceLazy.Value.ResourceType_serverfarms);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_multiRolePools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_multiRolePools);
            registrar.RegisterType(ResourceTypeReference_hostingEnvironments_workerPools, () => InstanceLazy.Value.ResourceType_hostingEnvironments_workerPools);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_gateways, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_gateways);
            registrar.RegisterType(ResourceTypeReference_serverfarms_virtualNetworkConnections_routes, () => InstanceLazy.Value.ResourceType_serverfarms_virtualNetworkConnections_routes);
        }
        private readonly ResourceType ResourceType_hostingEnvironments;
        private readonly ResourceType ResourceType_serverfarms;
        private readonly ResourceType ResourceType_hostingEnvironments_multiRolePools;
        private readonly ResourceType ResourceType_hostingEnvironments_workerPools;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_gateways;
        private readonly ResourceType ResourceType_serverfarms_virtualNetworkConnections_routes;
        private readonly TypeSymbol AppServiceEnvironment;
        private readonly TypeSymbol VirtualNetworkProfile;
        private readonly TypeSymbol WorkerPool;
        private readonly TypeSymbol VirtualIPMapping;
        private readonly TypeSymbol StampCapacity;
        private readonly TypeSymbol NetworkAccessControlEntry;
        private readonly TypeSymbol NameValuePair;
        private readonly TypeSymbol SkuDescription;
        private readonly TypeSymbol SkuCapacity;
        private readonly TypeSymbol Capability;
        private readonly TypeSymbol AppServicePlanProperties;
        private readonly TypeSymbol HostingEnvironmentProfile;
        private readonly TypeSymbol VnetGatewayProperties;
        private readonly TypeSymbol VnetRouteProperties;
    }
}
