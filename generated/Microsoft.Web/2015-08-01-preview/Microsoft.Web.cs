// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Web_2015_08_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Web";
        private const string ApiVersion = "2015-08-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_connections = new ResourceTypeReference(ProviderNamespace, new[]{"connections"}, ApiVersion);
        private static Lazy<Microsoft_Web_2015_08_01_preview> InstanceLazy = new Lazy<Microsoft_Web_2015_08_01_preview>(() => new Microsoft_Web_2015_08_01_preview());
        private Microsoft_Web_2015_08_01_preview()
        {
            ConnectionProperties = new NamedObjectType("ConnectionProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("displayName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("statuses", () => new TypedArrayType(ConnectionStatus), TypePropertyFlags.None), new TypeProperty("customParameterValues", new NamedObjectType("customParameterValues", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ParameterCustomLoginSettingValues, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameterValues", new NamedObjectType("parameterValues", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("nonSecretParameterValues", new NamedObjectType("nonSecretParameterValues", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.Any, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("firstExpirationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keywords", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("api", () => ExpandedParentApiEntity, TypePropertyFlags.None)}, null);
            ConnectionStatus = new NamedObjectType("ConnectionStatus", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ConnectionStatusProperties, TypePropertyFlags.None)}, null);
            ConnectionStatusProperties = new NamedObjectType("ConnectionStatusProperties", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("error", () => ConnectionError, TypePropertyFlags.None)}, null);
            ConnectionError = new NamedObjectType("ConnectionError", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ConnectionErrorProperties, TypePropertyFlags.None)}, null);
            ConnectionErrorProperties = new NamedObjectType("ConnectionErrorProperties", new ITypeProperty[]{new TypeProperty("code", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ParameterCustomLoginSettingValues = new NamedObjectType("ParameterCustomLoginSettingValues", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ParameterCustomLoginSettingValuesProperties, TypePropertyFlags.None)}, null);
            ParameterCustomLoginSettingValuesProperties = new NamedObjectType("ParameterCustomLoginSettingValuesProperties", new ITypeProperty[]{new TypeProperty("customParameters", new NamedObjectType("customParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => CustomLoginSettingValue, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            CustomLoginSettingValue = new NamedObjectType("CustomLoginSettingValue", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CustomLoginSettingValueProperties, TypePropertyFlags.None)}, null);
            CustomLoginSettingValueProperties = new NamedObjectType("CustomLoginSettingValueProperties", new ITypeProperty[]{new TypeProperty("option", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpandedParentApiEntity = new NamedObjectType("ExpandedParentApiEntity", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpandedParentApiEntityProperties, TypePropertyFlags.None)}, null);
            ExpandedParentApiEntityProperties = new NamedObjectType("ExpandedParentApiEntityProperties", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("entity", () => ResponseMessageEnvelopeApiEntity, TypePropertyFlags.None)}, null);
            ResponseMessageEnvelopeApiEntity = new NamedObjectType("ResponseMessageEnvelopeApiEntity", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("plan", () => ArmPlan, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApiEntity, TypePropertyFlags.None), new LazyTypeProperty("sku", () => SkuDescription, TypePropertyFlags.None)}, null);
            ArmPlan = new NamedObjectType("ArmPlan", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("product", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("promotionCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApiEntity = new NamedObjectType("ApiEntity", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApiEntityProperties, TypePropertyFlags.None)}, null);
            ApiEntityProperties = new NamedObjectType("ApiEntityProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("generalInformation", () => GeneralApiInformation, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("runtimeUrls", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("protocols", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("policies", () => ApiPolicies, TypePropertyFlags.None), new LazyTypeProperty("backendService", () => BackendServiceDefinition, TypePropertyFlags.None), new TypeProperty("apiDefinitionUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("metadata", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("capabilities", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("connectionParameters", new NamedObjectType("connectionParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ConnectionParameter, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("createdTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("changedTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            GeneralApiInformation = new NamedObjectType("GeneralApiInformation", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => GeneralApiInformationProperties, TypePropertyFlags.None)}, null);
            GeneralApiInformationProperties = new NamedObjectType("GeneralApiInformationProperties", new ITypeProperty[]{new TypeProperty("iconUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("displayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("termsOfUseUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionDisplayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionPortalUrl", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ApiPolicies = new NamedObjectType("ApiPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApiPoliciesProperties, TypePropertyFlags.None)}, null);
            ApiPoliciesProperties = new NamedObjectType("ApiPoliciesProperties", new ITypeProperty[]{new TypeProperty("content", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BackendServiceDefinition = new NamedObjectType("BackendServiceDefinition", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => BackendServiceDefinitionProperties, TypePropertyFlags.None)}, null);
            BackendServiceDefinitionProperties = new NamedObjectType("BackendServiceDefinitionProperties", new ITypeProperty[]{new TypeProperty("serviceUrl", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("hostingEnvironmentServiceUrls", () => new TypedArrayType(HostingEnvironmentServiceDescriptions), TypePropertyFlags.None)}, null);
            HostingEnvironmentServiceDescriptions = new NamedObjectType("HostingEnvironmentServiceDescriptions", new ITypeProperty[]{new TypeProperty("hostingEnvironmentId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hostId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("useInternalRouting", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ConnectionParameter = new NamedObjectType("ConnectionParameter", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'string'"), new StringLiteralType("'securestring'"), new StringLiteralType("'secureobject'"), new StringLiteralType("'int'"), new StringLiteralType("'bool'"), new StringLiteralType("'object'"), new StringLiteralType("'array'"), new StringLiteralType("'oauthSetting'"), new StringLiteralType("'connection'")), TypePropertyFlags.None), new TypeProperty("defaultValue", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("oAuthSettings", () => ApiOAuthSettings, TypePropertyFlags.None), new TypeProperty("uiDefinition", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            ApiOAuthSettings = new NamedObjectType("ApiOAuthSettings", new ITypeProperty[]{new TypeProperty("identityProvider", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scopes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("redirectUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("properties", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("customParameters", new NamedObjectType("customParameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => ApiOAuthSettingsParameter, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ApiOAuthSettingsParameter = new NamedObjectType("ApiOAuthSettingsParameter", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("options", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("uiDefinition", LanguageConstants.Any, TypePropertyFlags.None)}, null);
            SkuDescription = new NamedObjectType("SkuDescription", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceType_connections = new ResourceType("Microsoft.Web/connections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Web/connections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ConnectionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-08-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_connections);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_connections, () => InstanceLazy.Value.ResourceType_connections);
        }
        private readonly ResourceType ResourceType_connections;
        private readonly TypeSymbol ConnectionProperties;
        private readonly TypeSymbol ConnectionStatus;
        private readonly TypeSymbol ConnectionStatusProperties;
        private readonly TypeSymbol ConnectionError;
        private readonly TypeSymbol ConnectionErrorProperties;
        private readonly TypeSymbol ParameterCustomLoginSettingValues;
        private readonly TypeSymbol ParameterCustomLoginSettingValuesProperties;
        private readonly TypeSymbol CustomLoginSettingValue;
        private readonly TypeSymbol CustomLoginSettingValueProperties;
        private readonly TypeSymbol ExpandedParentApiEntity;
        private readonly TypeSymbol ExpandedParentApiEntityProperties;
        private readonly TypeSymbol ResponseMessageEnvelopeApiEntity;
        private readonly TypeSymbol ArmPlan;
        private readonly TypeSymbol ApiEntity;
        private readonly TypeSymbol ApiEntityProperties;
        private readonly TypeSymbol GeneralApiInformation;
        private readonly TypeSymbol GeneralApiInformationProperties;
        private readonly TypeSymbol ApiPolicies;
        private readonly TypeSymbol ApiPoliciesProperties;
        private readonly TypeSymbol BackendServiceDefinition;
        private readonly TypeSymbol BackendServiceDefinitionProperties;
        private readonly TypeSymbol HostingEnvironmentServiceDescriptions;
        private readonly TypeSymbol ConnectionParameter;
        private readonly TypeSymbol ApiOAuthSettings;
        private readonly TypeSymbol ApiOAuthSettingsParameter;
        private readonly TypeSymbol SkuDescription;
    }
}
