// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Automation_2015_10_31
    {
        private const string ProviderNamespace = "Microsoft.Automation";
        private const string ApiVersion = "2015-10-31";
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_certificates = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "certificates"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_connections = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "connections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_connectionTypes = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "connectionTypes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_credentials = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "credentials"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_compilationjobs = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "compilationjobs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_configurations = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "configurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_nodeConfigurations = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "nodeConfigurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_jobs = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "jobs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_jobSchedules = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "jobSchedules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_modules = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "modules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_runbooks = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "runbooks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_schedules = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "schedules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_variables = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "variables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_webhooks = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "webhooks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_watchers = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "watchers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_automationAccounts_runbooks_draft = new ResourceTypeReference(ProviderNamespace, new[]{"automationAccounts", "runbooks", "draft"}, ApiVersion);
        private static Lazy<Microsoft_Automation_2015_10_31> InstanceLazy = new Lazy<Microsoft_Automation_2015_10_31>(() => new Microsoft_Automation_2015_10_31());
        private Microsoft_Automation_2015_10_31()
        {
            AutomationAccountCreateOrUpdateProperties = new NamedObjectType("AutomationAccountCreateOrUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Free'"), new StringLiteralType("'Basic'")), TypePropertyFlags.Required), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            CertificateCreateOrUpdateProperties = new NamedObjectType("CertificateCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("base64Value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isExportable", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ConnectionCreateOrUpdateProperties = new NamedObjectType("ConnectionCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("connectionType", () => ConnectionTypeAssociationProperty, TypePropertyFlags.Required), new TypeProperty("fieldDefinitionValues", new NamedObjectType("fieldDefinitionValues", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ConnectionTypeAssociationProperty = new NamedObjectType("ConnectionTypeAssociationProperty", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ConnectionTypeCreateOrUpdateProperties = new NamedObjectType("ConnectionTypeCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("isGlobal", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("fieldDefinitions", new NamedObjectType("fieldDefinitions", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => FieldDefinition, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            FieldDefinition = new NamedObjectType("FieldDefinition", new ITypeProperty[]{new TypeProperty("isEncrypted", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isOptional", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            CredentialCreateOrUpdateProperties = new NamedObjectType("CredentialCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DscCompilationJobCreateProperties = new NamedObjectType("DscCompilationJobCreateProperties", new ITypeProperty[]{new LazyTypeProperty("configuration", () => DscConfigurationAssociationProperty, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("incrementNodeConfigurationBuild", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            DscConfigurationAssociationProperty = new NamedObjectType("DscConfigurationAssociationProperty", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DscConfigurationCreateOrUpdateProperties = new NamedObjectType("DscConfigurationCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("logVerbose", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("logProgress", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("source", () => ContentSource, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => DscConfigurationParameter, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContentSource = new NamedObjectType("ContentSource", new ITypeProperty[]{new LazyTypeProperty("hash", () => ContentHash, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'embeddedContent'"), new StringLiteralType("'uri'")), TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContentHash = new NamedObjectType("ContentHash", new ITypeProperty[]{new TypeProperty("algorithm", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            DscConfigurationParameter = new NamedObjectType("DscConfigurationParameter", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isMandatory", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("position", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("defaultValue", LanguageConstants.String, TypePropertyFlags.None)}, null);
            JobCreateProperties = new NamedObjectType("JobCreateProperties", new ITypeProperty[]{new LazyTypeProperty("runbook", () => RunbookAssociationProperty, TypePropertyFlags.Required), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("runOn", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RunbookAssociationProperty = new NamedObjectType("RunbookAssociationProperty", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            JobScheduleCreateProperties = new NamedObjectType("JobScheduleCreateProperties", new ITypeProperty[]{new LazyTypeProperty("schedule", () => ScheduleAssociationProperty, TypePropertyFlags.Required), new LazyTypeProperty("runbook", () => RunbookAssociationProperty, TypePropertyFlags.Required), new TypeProperty("runOn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            ScheduleAssociationProperty = new NamedObjectType("ScheduleAssociationProperty", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ModuleCreateOrUpdateProperties = new NamedObjectType("ModuleCreateOrUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("contentLink", () => ContentLink, TypePropertyFlags.Required)}, null);
            ContentLink = new NamedObjectType("ContentLink", new ITypeProperty[]{new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("contentHash", () => ContentHash, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RunbookCreateOrUpdateProperties = new NamedObjectType("RunbookCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("logVerbose", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("logProgress", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("runbookType", UnionType.Create(new StringLiteralType("'Script'"), new StringLiteralType("'Graph'"), new StringLiteralType("'PowerShellWorkflow'"), new StringLiteralType("'PowerShell'"), new StringLiteralType("'GraphPowerShellWorkflow'"), new StringLiteralType("'GraphPowerShell'")), TypePropertyFlags.Required), new LazyTypeProperty("draft", () => RunbookDraft, TypePropertyFlags.None), new LazyTypeProperty("publishContentLink", () => ContentLink, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("logActivityTrace", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            RunbookDraft = new NamedObjectType("RunbookDraft", new ITypeProperty[]{new TypeProperty("inEdit", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("draftContentLink", () => ContentLink, TypePropertyFlags.None), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => RunbookParameter, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("outputTypes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            RunbookParameter = new NamedObjectType("RunbookParameter", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isMandatory", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("position", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("defaultValue", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ScheduleCreateOrUpdateProperties = new NamedObjectType("ScheduleCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("expiryTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interval", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("frequency", UnionType.Create(new StringLiteralType("'OneTime'"), new StringLiteralType("'Day'"), new StringLiteralType("'Hour'"), new StringLiteralType("'Week'"), new StringLiteralType("'Month'"), new StringLiteralType("'Minute'")), TypePropertyFlags.Required), new TypeProperty("timeZone", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("advancedSchedule", () => AdvancedSchedule, TypePropertyFlags.None)}, null);
            AdvancedSchedule = new NamedObjectType("AdvancedSchedule", new ITypeProperty[]{new TypeProperty("weekDays", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("monthDays", new TypedArrayType(LanguageConstants.Int), TypePropertyFlags.None), new LazyTypeProperty("monthlyOccurrences", () => new TypedArrayType(AdvancedScheduleMonthlyOccurrence), TypePropertyFlags.None)}, null);
            AdvancedScheduleMonthlyOccurrence = new NamedObjectType("AdvancedScheduleMonthlyOccurrence", new ITypeProperty[]{new TypeProperty("occurrence", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("day", UnionType.Create(new StringLiteralType("'Monday'"), new StringLiteralType("'Tuesday'"), new StringLiteralType("'Wednesday'"), new StringLiteralType("'Thursday'"), new StringLiteralType("'Friday'"), new StringLiteralType("'Saturday'"), new StringLiteralType("'Sunday'")), TypePropertyFlags.None)}, null);
            VariableCreateOrUpdateProperties = new NamedObjectType("VariableCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isEncrypted", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            WebhookCreateOrUpdateProperties = new NamedObjectType("WebhookCreateOrUpdateProperties", new ITypeProperty[]{new TypeProperty("isEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("expiryTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("parameters", new NamedObjectType("parameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("runbook", () => RunbookAssociationProperty, TypePropertyFlags.None), new TypeProperty("runOn", LanguageConstants.String, TypePropertyFlags.None)}, null);
            WatcherProperties = new NamedObjectType("WatcherProperties", new ITypeProperty[]{new TypeProperty("executionFrequencyInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("scriptName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scriptParameters", new NamedObjectType("scriptParameters", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("scriptRunOn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastModifiedBy", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_automationAccounts = new ResourceType("Microsoft.Automation/automationAccounts", new ITypeProperty[]{new LazyTypeProperty("properties", () => AutomationAccountCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts);
            ResourceType_automationAccounts_certificates = new ResourceType("Microsoft.Automation/automationAccounts/certificates", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => CertificateCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/certificates'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_certificates);
            ResourceType_automationAccounts_connections = new ResourceType("Microsoft.Automation/automationAccounts/connections", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => ConnectionCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/connections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_connections);
            ResourceType_automationAccounts_connectionTypes = new ResourceType("Microsoft.Automation/automationAccounts/connectionTypes", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => ConnectionTypeCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/connectionTypes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_connectionTypes);
            ResourceType_automationAccounts_credentials = new ResourceType("Microsoft.Automation/automationAccounts/credentials", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => CredentialCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/credentials'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_credentials);
            ResourceType_automationAccounts_compilationjobs = new ResourceType("Microsoft.Automation/automationAccounts/compilationjobs", new ITypeProperty[]{new LazyTypeProperty("properties", () => DscCompilationJobCreateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/compilationjobs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_compilationjobs);
            ResourceType_automationAccounts_configurations = new ResourceType("Microsoft.Automation/automationAccounts/configurations", new ITypeProperty[]{new LazyTypeProperty("properties", () => DscConfigurationCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/configurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_configurations);
            ResourceType_automationAccounts_nodeConfigurations = new ResourceType("Microsoft.Automation/automationAccounts/nodeConfigurations", new ITypeProperty[]{new LazyTypeProperty("source", () => ContentSource, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("configuration", () => DscConfigurationAssociationProperty, TypePropertyFlags.Required), new TypeProperty("incrementNodeConfigurationBuild", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/nodeConfigurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_nodeConfigurations);
            ResourceType_automationAccounts_jobs = new ResourceType("Microsoft.Automation/automationAccounts/jobs", new ITypeProperty[]{new LazyTypeProperty("properties", () => JobCreateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/jobs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_jobs);
            ResourceType_automationAccounts_jobSchedules = new ResourceType("Microsoft.Automation/automationAccounts/jobSchedules", new ITypeProperty[]{new LazyTypeProperty("properties", () => JobScheduleCreateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/jobSchedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_jobSchedules);
            ResourceType_automationAccounts_modules = new ResourceType("Microsoft.Automation/automationAccounts/modules", new ITypeProperty[]{new LazyTypeProperty("properties", () => ModuleCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/modules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_modules);
            ResourceType_automationAccounts_runbooks = new ResourceType("Microsoft.Automation/automationAccounts/runbooks", new ITypeProperty[]{new LazyTypeProperty("properties", () => RunbookCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/runbooks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_runbooks);
            ResourceType_automationAccounts_schedules = new ResourceType("Microsoft.Automation/automationAccounts/schedules", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => ScheduleCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/schedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_schedules);
            ResourceType_automationAccounts_variables = new ResourceType("Microsoft.Automation/automationAccounts/variables", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VariableCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/variables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_variables);
            ResourceType_automationAccounts_webhooks = new ResourceType("Microsoft.Automation/automationAccounts/webhooks", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => WebhookCreateOrUpdateProperties, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/webhooks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_webhooks);
            ResourceType_automationAccounts_watchers = new ResourceType("Microsoft.Automation/automationAccounts/watchers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/watchers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => WatcherProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_watchers);
            ResourceType_automationAccounts_runbooks_draft = new ResourceType("Microsoft.Automation/automationAccounts/runbooks/draft", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'Microsoft.Automation/automationAccounts/runbooks/draft'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2015-10-31'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_automationAccounts_runbooks_draft);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_automationAccounts, () => InstanceLazy.Value.ResourceType_automationAccounts);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_certificates, () => InstanceLazy.Value.ResourceType_automationAccounts_certificates);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_connections, () => InstanceLazy.Value.ResourceType_automationAccounts_connections);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_connectionTypes, () => InstanceLazy.Value.ResourceType_automationAccounts_connectionTypes);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_credentials, () => InstanceLazy.Value.ResourceType_automationAccounts_credentials);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_compilationjobs, () => InstanceLazy.Value.ResourceType_automationAccounts_compilationjobs);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_configurations, () => InstanceLazy.Value.ResourceType_automationAccounts_configurations);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_nodeConfigurations, () => InstanceLazy.Value.ResourceType_automationAccounts_nodeConfigurations);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_jobs, () => InstanceLazy.Value.ResourceType_automationAccounts_jobs);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_jobSchedules, () => InstanceLazy.Value.ResourceType_automationAccounts_jobSchedules);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_modules, () => InstanceLazy.Value.ResourceType_automationAccounts_modules);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_runbooks, () => InstanceLazy.Value.ResourceType_automationAccounts_runbooks);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_schedules, () => InstanceLazy.Value.ResourceType_automationAccounts_schedules);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_variables, () => InstanceLazy.Value.ResourceType_automationAccounts_variables);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_webhooks, () => InstanceLazy.Value.ResourceType_automationAccounts_webhooks);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_watchers, () => InstanceLazy.Value.ResourceType_automationAccounts_watchers);
            registrar.RegisterType(ResourceTypeReference_automationAccounts_runbooks_draft, () => InstanceLazy.Value.ResourceType_automationAccounts_runbooks_draft);
        }
        private readonly ResourceType ResourceType_automationAccounts;
        private readonly ResourceType ResourceType_automationAccounts_certificates;
        private readonly ResourceType ResourceType_automationAccounts_connections;
        private readonly ResourceType ResourceType_automationAccounts_connectionTypes;
        private readonly ResourceType ResourceType_automationAccounts_credentials;
        private readonly ResourceType ResourceType_automationAccounts_compilationjobs;
        private readonly ResourceType ResourceType_automationAccounts_configurations;
        private readonly ResourceType ResourceType_automationAccounts_nodeConfigurations;
        private readonly ResourceType ResourceType_automationAccounts_jobs;
        private readonly ResourceType ResourceType_automationAccounts_jobSchedules;
        private readonly ResourceType ResourceType_automationAccounts_modules;
        private readonly ResourceType ResourceType_automationAccounts_runbooks;
        private readonly ResourceType ResourceType_automationAccounts_schedules;
        private readonly ResourceType ResourceType_automationAccounts_variables;
        private readonly ResourceType ResourceType_automationAccounts_webhooks;
        private readonly ResourceType ResourceType_automationAccounts_watchers;
        private readonly ResourceType ResourceType_automationAccounts_runbooks_draft;
        private readonly TypeSymbol AutomationAccountCreateOrUpdateProperties;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol CertificateCreateOrUpdateProperties;
        private readonly TypeSymbol ConnectionCreateOrUpdateProperties;
        private readonly TypeSymbol ConnectionTypeAssociationProperty;
        private readonly TypeSymbol ConnectionTypeCreateOrUpdateProperties;
        private readonly TypeSymbol FieldDefinition;
        private readonly TypeSymbol CredentialCreateOrUpdateProperties;
        private readonly TypeSymbol DscCompilationJobCreateProperties;
        private readonly TypeSymbol DscConfigurationAssociationProperty;
        private readonly TypeSymbol DscConfigurationCreateOrUpdateProperties;
        private readonly TypeSymbol ContentSource;
        private readonly TypeSymbol ContentHash;
        private readonly TypeSymbol DscConfigurationParameter;
        private readonly TypeSymbol JobCreateProperties;
        private readonly TypeSymbol RunbookAssociationProperty;
        private readonly TypeSymbol JobScheduleCreateProperties;
        private readonly TypeSymbol ScheduleAssociationProperty;
        private readonly TypeSymbol ModuleCreateOrUpdateProperties;
        private readonly TypeSymbol ContentLink;
        private readonly TypeSymbol RunbookCreateOrUpdateProperties;
        private readonly TypeSymbol RunbookDraft;
        private readonly TypeSymbol RunbookParameter;
        private readonly TypeSymbol ScheduleCreateOrUpdateProperties;
        private readonly TypeSymbol AdvancedSchedule;
        private readonly TypeSymbol AdvancedScheduleMonthlyOccurrence;
        private readonly TypeSymbol VariableCreateOrUpdateProperties;
        private readonly TypeSymbol WebhookCreateOrUpdateProperties;
        private readonly TypeSymbol WatcherProperties;
    }
}
