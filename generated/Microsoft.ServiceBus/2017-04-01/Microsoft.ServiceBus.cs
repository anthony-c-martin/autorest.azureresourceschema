// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_ServiceBus_2017_04_01
    {
        private const string ProviderNamespace = "Microsoft.ServiceBus";
        private const string ApiVersion = "2017-04-01";
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_AuthorizationRules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "AuthorizationRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_networkRuleSets = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "networkRuleSets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_disasterRecoveryConfigs = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "disasterRecoveryConfigs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_migrationConfigurations = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "migrationConfigurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_queues = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "queues"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_topics = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "topics"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_queues_authorizationRules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "queues", "authorizationRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_topics_authorizationRules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "topics", "authorizationRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_topics_subscriptions = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "topics", "subscriptions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_namespaces_topics_subscriptions_rules = new ResourceTypeReference(ProviderNamespace, new[]{"namespaces", "topics", "subscriptions", "rules"}, ApiVersion);
        private static Lazy<Microsoft_ServiceBus_2017_04_01> InstanceLazy = new Lazy<Microsoft_ServiceBus_2017_04_01>(() => new Microsoft_ServiceBus_2017_04_01());
        private Microsoft_ServiceBus_2017_04_01()
        {
            SBSku = new NamedObjectType("SBSku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.Required), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            SBNamespaceProperties = new NamedObjectType("SBNamespaceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("serviceBusEndpoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metricId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SBAuthorizationRuleProperties = new NamedObjectType("SBAuthorizationRuleProperties", new ITypeProperty[]{new TypeProperty("rights", new TypedArrayType(UnionType.Create(new StringLiteralType("'Manage'"), new StringLiteralType("'Send'"), new StringLiteralType("'Listen'"))), TypePropertyFlags.Required)}, null);
            NetworkRuleSetProperties = new NamedObjectType("NetworkRuleSetProperties", new ITypeProperty[]{new TypeProperty("defaultAction", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkRules", () => new TypedArrayType(NWRuleSetVirtualNetworkRules), TypePropertyFlags.None), new LazyTypeProperty("ipRules", () => new TypedArrayType(NWRuleSetIpRules), TypePropertyFlags.None)}, null);
            NWRuleSetVirtualNetworkRules = new NamedObjectType("NWRuleSetVirtualNetworkRules", new ITypeProperty[]{new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("ignoreMissingVnetServiceEndpoint", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            NWRuleSetIpRules = new NamedObjectType("NWRuleSetIpRules", new ITypeProperty[]{new TypeProperty("ipMask", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("action", new StringLiteralType("'Allow'"), TypePropertyFlags.None)}, null);
            ArmDisasterRecoveryProperties = new NamedObjectType("ArmDisasterRecoveryProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Accepted'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("pendingReplicationOperationsCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("partnerNamespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("alternateName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("role", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'PrimaryNotReplicating'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly)}, null);
            MigrationConfigPropertiesProperties = new NamedObjectType("MigrationConfigPropertiesProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("pendingReplicationOperationsCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("targetNamespace", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("postMigrationName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("migrationState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SBQueueProperties = new NamedObjectType("SBQueueProperties", new ITypeProperty[]{new LazyTypeProperty("countDetails", () => MessageCountDetails, TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("accessedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sizeInBytes", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("messageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("lockDuration", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxSizeInMegabytes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requiresDuplicateDetection", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("requiresSession", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("defaultMessageTimeToLive", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deadLetteringOnMessageExpiration", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("duplicateDetectionHistoryTimeWindow", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxDeliveryCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Active'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'SendDisabled'"), new StringLiteralType("'ReceiveDisabled'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Renaming'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.None), new TypeProperty("enableBatchedOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("autoDeleteOnIdle", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enablePartitioning", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableExpress", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("forwardTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("forwardDeadLetteredMessagesTo", LanguageConstants.String, TypePropertyFlags.None)}, null);
            MessageCountDetails = new NamedObjectType("MessageCountDetails", new ITypeProperty[]{new TypeProperty("activeMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("deadLetterMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("scheduledMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("transferMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("transferDeadLetterMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            SBTopicProperties = new NamedObjectType("SBTopicProperties", new ITypeProperty[]{new TypeProperty("sizeInBytes", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("accessedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("subscriptionCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("countDetails", () => MessageCountDetails, TypePropertyFlags.ReadOnly), new TypeProperty("defaultMessageTimeToLive", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxSizeInMegabytes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requiresDuplicateDetection", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("duplicateDetectionHistoryTimeWindow", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enableBatchedOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Active'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'SendDisabled'"), new StringLiteralType("'ReceiveDisabled'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Renaming'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.None), new TypeProperty("supportOrdering", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("autoDeleteOnIdle", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enablePartitioning", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableExpress", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SBSubscriptionProperties = new NamedObjectType("SBSubscriptionProperties", new ITypeProperty[]{new TypeProperty("messageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("createdAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("accessedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updatedAt", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("countDetails", () => MessageCountDetails, TypePropertyFlags.ReadOnly), new TypeProperty("lockDuration", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requiresSession", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("defaultMessageTimeToLive", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deadLetteringOnFilterEvaluationExceptions", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("deadLetteringOnMessageExpiration", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("duplicateDetectionHistoryTimeWindow", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxDeliveryCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Active'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'SendDisabled'"), new StringLiteralType("'ReceiveDisabled'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Renaming'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.None), new TypeProperty("enableBatchedOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("autoDeleteOnIdle", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("forwardTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("forwardDeadLetteredMessagesTo", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Ruleproperties = new NamedObjectType("Ruleproperties", new ITypeProperty[]{new LazyTypeProperty("action", () => Action, TypePropertyFlags.None), new TypeProperty("filterType", UnionType.Create(new StringLiteralType("'SqlFilter'"), new StringLiteralType("'CorrelationFilter'")), TypePropertyFlags.None), new LazyTypeProperty("sqlFilter", () => SqlFilter, TypePropertyFlags.None), new LazyTypeProperty("correlationFilter", () => CorrelationFilter, TypePropertyFlags.None)}, null);
            Action = new NamedObjectType("Action", new ITypeProperty[]{new TypeProperty("sqlExpression", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("compatibilityLevel", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requiresPreprocessing", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SqlFilter = new NamedObjectType("SqlFilter", new ITypeProperty[]{new TypeProperty("sqlExpression", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("compatibilityLevel", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requiresPreprocessing", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            CorrelationFilter = new NamedObjectType("CorrelationFilter", new ITypeProperty[]{new TypeProperty("properties", new NamedObjectType("properties", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("correlationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("messageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("to", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replyTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("label", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sessionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replyToSessionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contentType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requiresPreprocessing", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ResourceType_namespaces = new ResourceType("Microsoft.ServiceBus/namespaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => SBSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SBNamespaceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces);
            ResourceType_namespaces_AuthorizationRules = new ResourceType("Microsoft.ServiceBus/namespaces/AuthorizationRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/AuthorizationRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBAuthorizationRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_AuthorizationRules);
            ResourceType_namespaces_networkRuleSets = new ResourceType("Microsoft.ServiceBus/namespaces/networkRuleSets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/networkRuleSets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => NetworkRuleSetProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_networkRuleSets);
            ResourceType_namespaces_disasterRecoveryConfigs = new ResourceType("Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ArmDisasterRecoveryProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_disasterRecoveryConfigs);
            ResourceType_namespaces_migrationConfigurations = new ResourceType("Microsoft.ServiceBus/namespaces/migrationConfigurations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/migrationConfigurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => MigrationConfigPropertiesProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_migrationConfigurations);
            ResourceType_namespaces_queues = new ResourceType("Microsoft.ServiceBus/namespaces/queues", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/queues'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBQueueProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_queues);
            ResourceType_namespaces_topics = new ResourceType("Microsoft.ServiceBus/namespaces/topics", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/topics'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBTopicProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_topics);
            ResourceType_namespaces_queues_authorizationRules = new ResourceType("Microsoft.ServiceBus/namespaces/queues/authorizationRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/queues/authorizationRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBAuthorizationRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_queues_authorizationRules);
            ResourceType_namespaces_topics_authorizationRules = new ResourceType("Microsoft.ServiceBus/namespaces/topics/authorizationRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/topics/authorizationRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBAuthorizationRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_topics_authorizationRules);
            ResourceType_namespaces_topics_subscriptions = new ResourceType("Microsoft.ServiceBus/namespaces/topics/subscriptions", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/topics/subscriptions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SBSubscriptionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_topics_subscriptions);
            ResourceType_namespaces_topics_subscriptions_rules = new ResourceType("Microsoft.ServiceBus/namespaces/topics/subscriptions/rules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceBus/namespaces/topics/subscriptions/rules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => Ruleproperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_namespaces_topics_subscriptions_rules);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_namespaces, () => InstanceLazy.Value.ResourceType_namespaces);
            registrar.RegisterType(ResourceTypeReference_namespaces_AuthorizationRules, () => InstanceLazy.Value.ResourceType_namespaces_AuthorizationRules);
            registrar.RegisterType(ResourceTypeReference_namespaces_networkRuleSets, () => InstanceLazy.Value.ResourceType_namespaces_networkRuleSets);
            registrar.RegisterType(ResourceTypeReference_namespaces_disasterRecoveryConfigs, () => InstanceLazy.Value.ResourceType_namespaces_disasterRecoveryConfigs);
            registrar.RegisterType(ResourceTypeReference_namespaces_migrationConfigurations, () => InstanceLazy.Value.ResourceType_namespaces_migrationConfigurations);
            registrar.RegisterType(ResourceTypeReference_namespaces_queues, () => InstanceLazy.Value.ResourceType_namespaces_queues);
            registrar.RegisterType(ResourceTypeReference_namespaces_topics, () => InstanceLazy.Value.ResourceType_namespaces_topics);
            registrar.RegisterType(ResourceTypeReference_namespaces_queues_authorizationRules, () => InstanceLazy.Value.ResourceType_namespaces_queues_authorizationRules);
            registrar.RegisterType(ResourceTypeReference_namespaces_topics_authorizationRules, () => InstanceLazy.Value.ResourceType_namespaces_topics_authorizationRules);
            registrar.RegisterType(ResourceTypeReference_namespaces_topics_subscriptions, () => InstanceLazy.Value.ResourceType_namespaces_topics_subscriptions);
            registrar.RegisterType(ResourceTypeReference_namespaces_topics_subscriptions_rules, () => InstanceLazy.Value.ResourceType_namespaces_topics_subscriptions_rules);
        }
        private readonly ResourceType ResourceType_namespaces;
        private readonly ResourceType ResourceType_namespaces_AuthorizationRules;
        private readonly ResourceType ResourceType_namespaces_networkRuleSets;
        private readonly ResourceType ResourceType_namespaces_disasterRecoveryConfigs;
        private readonly ResourceType ResourceType_namespaces_migrationConfigurations;
        private readonly ResourceType ResourceType_namespaces_queues;
        private readonly ResourceType ResourceType_namespaces_topics;
        private readonly ResourceType ResourceType_namespaces_queues_authorizationRules;
        private readonly ResourceType ResourceType_namespaces_topics_authorizationRules;
        private readonly ResourceType ResourceType_namespaces_topics_subscriptions;
        private readonly ResourceType ResourceType_namespaces_topics_subscriptions_rules;
        private readonly TypeSymbol SBSku;
        private readonly TypeSymbol SBNamespaceProperties;
        private readonly TypeSymbol SBAuthorizationRuleProperties;
        private readonly TypeSymbol NetworkRuleSetProperties;
        private readonly TypeSymbol NWRuleSetVirtualNetworkRules;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol NWRuleSetIpRules;
        private readonly TypeSymbol ArmDisasterRecoveryProperties;
        private readonly TypeSymbol MigrationConfigPropertiesProperties;
        private readonly TypeSymbol SBQueueProperties;
        private readonly TypeSymbol MessageCountDetails;
        private readonly TypeSymbol SBTopicProperties;
        private readonly TypeSymbol SBSubscriptionProperties;
        private readonly TypeSymbol Ruleproperties;
        private readonly TypeSymbol Action;
        private readonly TypeSymbol SqlFilter;
        private readonly TypeSymbol CorrelationFilter;
    }
}
