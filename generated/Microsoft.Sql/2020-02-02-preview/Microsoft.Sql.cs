// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2020_02_02_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2020-02-02-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_azureADOnlyAuthentications = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "azureADOnlyAuthentications"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_azureADOnlyAuthentications = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "azureADOnlyAuthentications"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "backupShortTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "securityAlertPolicies"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2020_02_02_preview> InstanceLazy = new Lazy<Microsoft_Sql_2020_02_02_preview>(() => new Microsoft_Sql_2020_02_02_preview());
        private Microsoft_Sql_2020_02_02_preview()
        {
            BackupShortTermRetentionPolicyProperties = new NamedObjectType("BackupShortTermRetentionPolicyProperties", new ITypeProperty[]{new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("diffBackupIntervalInHours", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ManagedDatabaseProperties = new NamedObjectType("ManagedDatabaseProperties", new ITypeProperty[]{new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'Updating'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestorePoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("storageContainerUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("autoCompleteRestore", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("lastBackupName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AzureADOnlyAuthProperties = new NamedObjectType("AzureADOnlyAuthProperties", new ITypeProperty[]{new TypeProperty("azureADOnlyAuthentication", LanguageConstants.Bool, TypePropertyFlags.Required)}, null);
            ResourceIdentity = new NamedObjectType("ResourceIdentity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ManagedInstanceProperties = new NamedObjectType("ManagedInstanceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Unknown'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("managedInstanceCreateMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'PointInTimeRestore'")), TypePropertyFlags.None), new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None), new TypeProperty("vCores", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageSizeInGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsZone", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("dnsZonePartner", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicDataEndpointEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sourceManagedInstanceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyOverride", UnionType.Create(new StringLiteralType("'Proxy'"), new StringLiteralType("'Redirect'"), new StringLiteralType("'Default'")), TypePropertyFlags.None), new TypeProperty("timezoneId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("instancePoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maintenanceConfigurationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("minimalTlsVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountType", UnionType.Create(new StringLiteralType("'GRS'"), new StringLiteralType("'LRS'"), new StringLiteralType("'ZRS'")), TypePropertyFlags.None)}, null);
            ManagedInstanceAzureADOnlyAuthProperties = new NamedObjectType("ManagedInstanceAzureADOnlyAuthProperties", new ITypeProperty[]{new TypeProperty("azureADOnlyAuthentication", LanguageConstants.Bool, TypePropertyFlags.Required)}, null);
            SecurityAlertsPolicyProperties = new NamedObjectType("SecurityAlertsPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceType_managedInstances = new ResourceType("Microsoft.Sql/managedInstances", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedInstanceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances);
            ResourceType_managedInstances_databases = new ResourceType("Microsoft.Sql/managedInstances/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedDatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases);
            ResourceType_servers_azureADOnlyAuthentications = new ResourceType("Microsoft.Sql/servers/azureADOnlyAuthentications", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/azureADOnlyAuthentications'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AzureADOnlyAuthProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_azureADOnlyAuthentications);
            ResourceType_managedInstances_azureADOnlyAuthentications = new ResourceType("Microsoft.Sql/managedInstances/azureADOnlyAuthentications", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/azureADOnlyAuthentications'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagedInstanceAzureADOnlyAuthProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_azureADOnlyAuthentications);
            ResourceType_managedInstances_securityAlertPolicies = new ResourceType("Microsoft.Sql/managedInstances/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertsPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_securityAlertPolicies);
            ResourceType_servers_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertsPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_securityAlertPolicies);
            ResourceType_servers_databases_backupShortTermRetentionPolicies = new ResourceType("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => BackupShortTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies);
            ResourceType_servers_databases_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/databases/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertsPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2020-02-02-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_securityAlertPolicies);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_managedInstances, () => InstanceLazy.Value.ResourceType_managedInstances);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases, () => InstanceLazy.Value.ResourceType_managedInstances_databases);
            registrar.RegisterType(ResourceTypeReference_servers_azureADOnlyAuthentications, () => InstanceLazy.Value.ResourceType_servers_azureADOnlyAuthentications);
            registrar.RegisterType(ResourceTypeReference_managedInstances_azureADOnlyAuthentications, () => InstanceLazy.Value.ResourceType_managedInstances_azureADOnlyAuthentications);
            registrar.RegisterType(ResourceTypeReference_managedInstances_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_backupShortTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_securityAlertPolicies);
        }
        private readonly ResourceType ResourceType_managedInstances;
        private readonly ResourceType ResourceType_managedInstances_databases;
        private readonly ResourceType ResourceType_servers_azureADOnlyAuthentications;
        private readonly ResourceType ResourceType_managedInstances_azureADOnlyAuthentications;
        private readonly ResourceType ResourceType_managedInstances_securityAlertPolicies;
        private readonly ResourceType ResourceType_servers_securityAlertPolicies;
        private readonly ResourceType ResourceType_servers_databases_backupShortTermRetentionPolicies;
        private readonly ResourceType ResourceType_servers_databases_securityAlertPolicies;
        private readonly TypeSymbol BackupShortTermRetentionPolicyProperties;
        private readonly TypeSymbol ManagedDatabaseProperties;
        private readonly TypeSymbol AzureADOnlyAuthProperties;
        private readonly TypeSymbol ResourceIdentity;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol ManagedInstanceProperties;
        private readonly TypeSymbol ManagedInstanceAzureADOnlyAuthProperties;
        private readonly TypeSymbol SecurityAlertsPolicyProperties;
    }
}
