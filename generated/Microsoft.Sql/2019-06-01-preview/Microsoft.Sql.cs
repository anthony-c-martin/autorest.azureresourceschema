// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2019_06_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2019-06-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_servers = new ResourceTypeReference(ProviderNamespace, new[]{"servers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_administrators = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "administrators"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_workloadGroups = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "workloadGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_syncGroups = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "syncGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_workloadGroups_workloadClassifiers = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "workloadGroups", "workloadClassifiers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_syncGroups_syncMembers = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "syncGroups", "syncMembers"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2019_06_01_preview> InstanceLazy = new Lazy<Microsoft_Sql_2019_06_01_preview>(() => new Microsoft_Sql_2019_06_01_preview());
        private Microsoft_Sql_2019_06_01_preview()
        {
            ResourceIdentity = new NamedObjectType("ResourceIdentity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ServerProperties = new NamedObjectType("ServerProperties", new ITypeProperty[]{new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("privateEndpointConnections", () => new TypedArrayType(ServerPrivateEndpointConnection), TypePropertyFlags.ReadOnly), new TypeProperty("minimalTlsVersion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicNetworkAccess", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None)}, null);
            ServerPrivateEndpointConnection = new NamedObjectType("ServerPrivateEndpointConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => PrivateEndpointConnectionProperties, TypePropertyFlags.ReadOnly)}, null);
            PrivateEndpointConnectionProperties = new NamedObjectType("PrivateEndpointConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("privateEndpoint", () => PrivateEndpointProperty, TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnectionState", () => PrivateLinkServiceConnectionStateProperty, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Approving'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Dropping'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Rejecting'")), TypePropertyFlags.ReadOnly)}, null);
            PrivateEndpointProperty = new NamedObjectType("PrivateEndpointProperty", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PrivateLinkServiceConnectionStateProperty = new NamedObjectType("PrivateLinkServiceConnectionStateProperty", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Approved'"), new StringLiteralType("'Pending'"), new StringLiteralType("'Rejected'"), new StringLiteralType("'Disconnected'")), TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("actionsRequired", new StringLiteralType("'None'"), TypePropertyFlags.ReadOnly)}, null);
            WorkloadGroupProperties = new NamedObjectType("WorkloadGroupProperties", new ITypeProperty[]{new TypeProperty("minResourcePercent", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("maxResourcePercent", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("minResourcePercentPerRequest", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("maxResourcePercentPerRequest", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("importance", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("queryExecutionTimeout", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            WorkloadClassifierProperties = new NamedObjectType("WorkloadClassifierProperties", new ITypeProperty[]{new TypeProperty("memberName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("label", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("context", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("importance", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AdministratorProperties = new NamedObjectType("AdministratorProperties", new ITypeProperty[]{new TypeProperty("administratorType", new StringLiteralType("'ActiveDirectory'"), TypePropertyFlags.Required), new TypeProperty("login", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("sid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("azureADOnlyAuthentication", LanguageConstants.Bool, TypePropertyFlags.ReadOnly)}, null);
            SyncGroupProperties = new NamedObjectType("SyncGroupProperties", new ITypeProperty[]{new TypeProperty("interval", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("lastSyncTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("conflictResolutionPolicy", UnionType.Create(new StringLiteralType("'HubWin'"), new StringLiteralType("'MemberWin'")), TypePropertyFlags.None), new TypeProperty("syncDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hubDatabaseUserName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hubDatabasePassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("syncState", UnionType.Create(new StringLiteralType("'NotReady'"), new StringLiteralType("'Error'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Progressing'"), new StringLiteralType("'Good'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("schema", () => SyncGroupSchema, TypePropertyFlags.None), new TypeProperty("usePrivateLinkConnection", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SyncGroupSchema = new NamedObjectType("SyncGroupSchema", new ITypeProperty[]{new LazyTypeProperty("tables", () => new TypedArrayType(SyncGroupSchemaTable), TypePropertyFlags.None), new TypeProperty("masterSyncMemberName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncGroupSchemaTable = new NamedObjectType("SyncGroupSchemaTable", new ITypeProperty[]{new LazyTypeProperty("columns", () => new TypedArrayType(SyncGroupSchemaTableColumn), TypePropertyFlags.None), new TypeProperty("quotedName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncGroupSchemaTableColumn = new NamedObjectType("SyncGroupSchemaTableColumn", new ITypeProperty[]{new TypeProperty("quotedName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataType", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncMemberProperties = new NamedObjectType("SyncMemberProperties", new ITypeProperty[]{new TypeProperty("databaseType", UnionType.Create(new StringLiteralType("'AzureSqlDatabase'"), new StringLiteralType("'SqlServerDatabase'")), TypePropertyFlags.None), new TypeProperty("syncAgentId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlServerDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("syncMemberAzureDatabaseResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("usePrivateLinkConnection", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("serverName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("databaseName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("syncDirection", UnionType.Create(new StringLiteralType("'Bidirectional'"), new StringLiteralType("'OneWayMemberToHub'"), new StringLiteralType("'OneWayHubToMember'")), TypePropertyFlags.None), new TypeProperty("syncState", UnionType.Create(new StringLiteralType("'SyncInProgress'"), new StringLiteralType("'SyncSucceeded'"), new StringLiteralType("'SyncFailed'"), new StringLiteralType("'DisabledTombstoneCleanup'"), new StringLiteralType("'DisabledBackupRestore'"), new StringLiteralType("'SyncSucceededWithWarnings'"), new StringLiteralType("'SyncCancelling'"), new StringLiteralType("'SyncCancelled'"), new StringLiteralType("'UnProvisioned'"), new StringLiteralType("'Provisioning'"), new StringLiteralType("'Provisioned'"), new StringLiteralType("'ProvisionFailed'"), new StringLiteralType("'DeProvisioning'"), new StringLiteralType("'DeProvisioned'"), new StringLiteralType("'DeProvisionFailed'"), new StringLiteralType("'Reprovisioning'"), new StringLiteralType("'ReprovisionFailed'"), new StringLiteralType("'UnReprovisioned'")), TypePropertyFlags.ReadOnly)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            DatabaseProperties = new NamedObjectType("DatabaseProperties", new ITypeProperty[]{new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Copy'"), new StringLiteralType("'Secondary'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Restore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'RestoreExternalBackupSecondary'"), new StringLiteralType("'RestoreLongTermRetentionBackup'"), new StringLiteralType("'OnlineSecondary'")), TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxSizeBytes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sampleName", UnionType.Create(new StringLiteralType("'AdventureWorksLT'"), new StringLiteralType("'WideWorldImportersStd'"), new StringLiteralType("'WideWorldImportersFull'")), TypePropertyFlags.None), new TypeProperty("elasticPoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'RecoveryPending'"), new StringLiteralType("'Recovering'"), new StringLiteralType("'Suspect'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Standby'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'EmergencyMode'"), new StringLiteralType("'AutoClosed'"), new StringLiteralType("'Copying'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'OfflineSecondary'"), new StringLiteralType("'Pausing'"), new StringLiteralType("'Paused'"), new StringLiteralType("'Resuming'"), new StringLiteralType("'Scaling'"), new StringLiteralType("'OfflineChangingDwPerformanceTiers'"), new StringLiteralType("'OnlineChangingDwPerformanceTiers'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly), new TypeProperty("databaseId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceObjectiveName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("requestedServiceObjectiveName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseDeletionDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoveryServicesRecoveryPointId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None), new TypeProperty("maxLogSizeBytes", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestoreDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("readScale", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("readReplicaCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("currentSku", () => Sku, TypePropertyFlags.ReadOnly), new TypeProperty("autoPauseDelay", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageAccountType", UnionType.Create(new StringLiteralType("'GRS'"), new StringLiteralType("'LRS'"), new StringLiteralType("'ZRS'")), TypePropertyFlags.None), new TypeProperty("minCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("pausedDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("resumedDate", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ManagedDatabaseProperties = new NamedObjectType("ManagedDatabaseProperties", new ITypeProperty[]{new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'Updating'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestorePoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("storageContainerUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_servers = new ResourceType("Microsoft.Sql/servers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers);
            ResourceType_servers_administrators = new ResourceType("Microsoft.Sql/servers/administrators", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/administrators'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AdministratorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_administrators);
            ResourceType_servers_databases = new ResourceType("Microsoft.Sql/servers/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedBy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases);
            ResourceType_managedInstances_databases = new ResourceType("Microsoft.Sql/managedInstances/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedDatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases);
            ResourceType_servers_databases_workloadGroups = new ResourceType("Microsoft.Sql/servers/databases/workloadGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/workloadGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => WorkloadGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_workloadGroups);
            ResourceType_servers_databases_syncGroups = new ResourceType("Microsoft.Sql/servers/databases/syncGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/syncGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SyncGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_syncGroups);
            ResourceType_servers_databases_workloadGroups_workloadClassifiers = new ResourceType("Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/workloadGroups/workloadClassifiers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => WorkloadClassifierProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_workloadGroups_workloadClassifiers);
            ResourceType_servers_databases_syncGroups_syncMembers = new ResourceType("Microsoft.Sql/servers/databases/syncGroups/syncMembers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/syncGroups/syncMembers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SyncMemberProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_syncGroups_syncMembers);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers, () => InstanceLazy.Value.ResourceType_servers);
            registrar.RegisterType(ResourceTypeReference_servers_administrators, () => InstanceLazy.Value.ResourceType_servers_administrators);
            registrar.RegisterType(ResourceTypeReference_servers_databases, () => InstanceLazy.Value.ResourceType_servers_databases);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases, () => InstanceLazy.Value.ResourceType_managedInstances_databases);
            registrar.RegisterType(ResourceTypeReference_servers_databases_workloadGroups, () => InstanceLazy.Value.ResourceType_servers_databases_workloadGroups);
            registrar.RegisterType(ResourceTypeReference_servers_databases_syncGroups, () => InstanceLazy.Value.ResourceType_servers_databases_syncGroups);
            registrar.RegisterType(ResourceTypeReference_servers_databases_workloadGroups_workloadClassifiers, () => InstanceLazy.Value.ResourceType_servers_databases_workloadGroups_workloadClassifiers);
            registrar.RegisterType(ResourceTypeReference_servers_databases_syncGroups_syncMembers, () => InstanceLazy.Value.ResourceType_servers_databases_syncGroups_syncMembers);
        }
        private readonly ResourceType ResourceType_servers;
        private readonly ResourceType ResourceType_servers_administrators;
        private readonly ResourceType ResourceType_servers_databases;
        private readonly ResourceType ResourceType_managedInstances_databases;
        private readonly ResourceType ResourceType_servers_databases_workloadGroups;
        private readonly ResourceType ResourceType_servers_databases_syncGroups;
        private readonly ResourceType ResourceType_servers_databases_workloadGroups_workloadClassifiers;
        private readonly ResourceType ResourceType_servers_databases_syncGroups_syncMembers;
        private readonly TypeSymbol ResourceIdentity;
        private readonly TypeSymbol ServerProperties;
        private readonly TypeSymbol ServerPrivateEndpointConnection;
        private readonly TypeSymbol PrivateEndpointConnectionProperties;
        private readonly TypeSymbol PrivateEndpointProperty;
        private readonly TypeSymbol PrivateLinkServiceConnectionStateProperty;
        private readonly TypeSymbol WorkloadGroupProperties;
        private readonly TypeSymbol WorkloadClassifierProperties;
        private readonly TypeSymbol AdministratorProperties;
        private readonly TypeSymbol SyncGroupProperties;
        private readonly TypeSymbol SyncGroupSchema;
        private readonly TypeSymbol SyncGroupSchemaTable;
        private readonly TypeSymbol SyncGroupSchemaTableColumn;
        private readonly TypeSymbol SyncMemberProperties;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol DatabaseProperties;
        private readonly TypeSymbol ManagedDatabaseProperties;
    }
}
