// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2017_03_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2017-03-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_servers_extendedAuditingSettings = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "extendedAuditingSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_auditingSettings = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "auditingSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_dnsAliases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "dnsAliases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_administrators = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "administrators"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_extendedAuditingSettings = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "extendedAuditingSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_auditingSettings = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "auditingSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_vulnerabilityAssessments = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "vulnerabilityAssessments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents_credentials = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents", "credentials"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents_jobs = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents", "jobs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents_targetGroups = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents", "targetGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_backupLongTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "backupLongTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_backupShortTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "backupShortTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "restorableDroppedDatabases", "backupShortTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents_jobs_executions = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents", "jobs", "executions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_jobAgents_jobs_steps = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "jobAgents", "jobs", "steps"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_vulnerabilityAssessments_rules_baselines = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "vulnerabilityAssessments", "rules", "baselines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_schemas_tables_columns_sensitivityLabels = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "schemas", "tables", "columns", "sensitivityLabels"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2017_03_01_preview> InstanceLazy = new Lazy<Microsoft_Sql_2017_03_01_preview>(() => new Microsoft_Sql_2017_03_01_preview());
        private Microsoft_Sql_2017_03_01_preview()
        {
            ExtendedDatabaseBlobAuditingPolicyProperties = new NamedObjectType("ExtendedDatabaseBlobAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("predicateExpression", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("auditActionsAndGroups", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isStorageSecondaryKeyInUse", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isAzureMonitorTargetEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("queueDelayMs", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ExtendedServerBlobAuditingPolicyProperties = new NamedObjectType("ExtendedServerBlobAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("predicateExpression", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("auditActionsAndGroups", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isStorageSecondaryKeyInUse", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isAzureMonitorTargetEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("queueDelayMs", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ServerBlobAuditingPolicyProperties = new NamedObjectType("ServerBlobAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("auditActionsAndGroups", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isStorageSecondaryKeyInUse", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isAzureMonitorTargetEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("queueDelayMs", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            DatabaseBlobAuditingPolicyProperties = new NamedObjectType("DatabaseBlobAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("auditActionsAndGroups", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isStorageSecondaryKeyInUse", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isAzureMonitorTargetEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("queueDelayMs", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            DatabaseVulnerabilityAssessmentRuleBaselineProperties = new NamedObjectType("DatabaseVulnerabilityAssessmentRuleBaselineProperties", new ITypeProperty[]{new LazyTypeProperty("baselineResults", () => new TypedArrayType(DatabaseVulnerabilityAssessmentRuleBaselineItem), TypePropertyFlags.Required)}, null);
            DatabaseVulnerabilityAssessmentRuleBaselineItem = new NamedObjectType("DatabaseVulnerabilityAssessmentRuleBaselineItem", new ITypeProperty[]{new TypeProperty("result", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required)}, null);
            DatabaseVulnerabilityAssessmentProperties = new NamedObjectType("DatabaseVulnerabilityAssessmentProperties", new ITypeProperty[]{new TypeProperty("storageContainerPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("recurringScans", () => VulnerabilityAssessmentRecurringScansProperties, TypePropertyFlags.None)}, null);
            VulnerabilityAssessmentRecurringScansProperties = new NamedObjectType("VulnerabilityAssessmentRecurringScansProperties", new ITypeProperty[]{new TypeProperty("isEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emailSubscriptionAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emails", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            JobAgentProperties = new NamedObjectType("JobAgentProperties", new ITypeProperty[]{new TypeProperty("databaseId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly)}, null);
            JobCredentialProperties = new NamedObjectType("JobCredentialProperties", new ITypeProperty[]{new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            JobProperties = new NamedObjectType("JobProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("schedule", () => JobSchedule, TypePropertyFlags.None)}, null);
            JobSchedule = new NamedObjectType("JobSchedule", new ITypeProperty[]{new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'Once'"), new StringLiteralType("'Recurring'")), TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("interval", LanguageConstants.String, TypePropertyFlags.None)}, null);
            JobStepProperties = new NamedObjectType("JobStepProperties", new ITypeProperty[]{new TypeProperty("stepId", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("targetGroup", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("credential", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("action", () => JobStepAction, TypePropertyFlags.Required), new LazyTypeProperty("output", () => JobStepOutput, TypePropertyFlags.None), new LazyTypeProperty("executionOptions", () => JobStepExecutionOptions, TypePropertyFlags.None)}, null);
            JobStepAction = new NamedObjectType("JobStepAction", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'TSql'"), TypePropertyFlags.None), new TypeProperty("source", new StringLiteralType("'Inline'"), TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            JobStepOutput = new NamedObjectType("JobStepOutput", new ITypeProperty[]{new TypeProperty("type", new StringLiteralType("'SqlDatabase'"), TypePropertyFlags.None), new TypeProperty("subscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serverName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("databaseName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("schemaName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tableName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("credential", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            JobStepExecutionOptions = new NamedObjectType("JobStepExecutionOptions", new ITypeProperty[]{new TypeProperty("timeoutSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("retryAttempts", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("initialRetryIntervalSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maximumRetryIntervalSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("retryIntervalBackoffMultiplier", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            JobTargetGroupProperties = new NamedObjectType("JobTargetGroupProperties", new ITypeProperty[]{new LazyTypeProperty("members", () => new TypedArrayType(JobTarget), TypePropertyFlags.Required)}, null);
            JobTarget = new NamedObjectType("JobTarget", new ITypeProperty[]{new TypeProperty("membershipType", UnionType.Create(new StringLiteralType("'Include'"), new StringLiteralType("'Exclude'")), TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'TargetGroup'"), new StringLiteralType("'SqlDatabase'"), new StringLiteralType("'SqlElasticPool'"), new StringLiteralType("'SqlShardMap'"), new StringLiteralType("'SqlServer'")), TypePropertyFlags.Required), new TypeProperty("serverName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("databaseName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("elasticPoolName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("shardMapName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("refreshCredential", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LongTermRetentionPolicyProperties = new NamedObjectType("LongTermRetentionPolicyProperties", new ITypeProperty[]{new TypeProperty("weeklyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("monthlyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("yearlyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("weekOfYear", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ManagedBackupShortTermRetentionPolicyProperties = new NamedObjectType("ManagedBackupShortTermRetentionPolicyProperties", new ITypeProperty[]{new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            SecurityAlertPolicyProperties = new NamedObjectType("SecurityAlertPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'New'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("disabledAlerts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAccountAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SensitivityLabelProperties = new NamedObjectType("SensitivityLabelProperties", new ITypeProperty[]{new TypeProperty("labelName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labelId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("informationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("informationTypeId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isDisabled", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("rank", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Low'"), new StringLiteralType("'Medium'"), new StringLiteralType("'High'"), new StringLiteralType("'Critical'")), TypePropertyFlags.None)}, null);
            ManagedInstanceAdministratorProperties = new NamedObjectType("ManagedInstanceAdministratorProperties", new ITypeProperty[]{new TypeProperty("administratorType", new StringLiteralType("'ActiveDirectory'"), TypePropertyFlags.Required), new TypeProperty("login", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("sid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DatabaseProperties = new NamedObjectType("DatabaseProperties", new ITypeProperty[]{new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Copy'"), new StringLiteralType("'Secondary'"), new StringLiteralType("'OnlineSecondary'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Restore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'RestoreExternalBackupSecondary'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxSizeBytes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sampleName", UnionType.Create(new StringLiteralType("'AdventureWorksLT'"), new StringLiteralType("'WideWorldImportersStd'"), new StringLiteralType("'WideWorldImportersFull'")), TypePropertyFlags.None), new TypeProperty("elasticPoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'RecoveryPending'"), new StringLiteralType("'Recovering'"), new StringLiteralType("'Suspect'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Standby'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'EmergencyMode'"), new StringLiteralType("'AutoClosed'"), new StringLiteralType("'Copying'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'OfflineSecondary'"), new StringLiteralType("'Pausing'"), new StringLiteralType("'Paused'"), new StringLiteralType("'Resuming'"), new StringLiteralType("'Scaling'")), TypePropertyFlags.ReadOnly), new TypeProperty("databaseId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceObjectiveName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseDeletionDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoveryServicesRecoveryPointId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ManagedDatabaseProperties = new NamedObjectType("ManagedDatabaseProperties", new ITypeProperty[]{new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'Updating'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestorePoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("storageContainerUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_servers_extendedAuditingSettings = new ResourceType("Microsoft.Sql/servers/extendedAuditingSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/extendedAuditingSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExtendedServerBlobAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_extendedAuditingSettings);
            ResourceType_servers_auditingSettings = new ResourceType("Microsoft.Sql/servers/auditingSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/auditingSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerBlobAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_auditingSettings);
            ResourceType_servers_jobAgents = new ResourceType("Microsoft.Sql/servers/jobAgents", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => JobAgentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents);
            ResourceType_servers_dnsAliases = new ResourceType("Microsoft.Sql/servers/dnsAliases", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/dnsAliases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_dnsAliases);
            ResourceType_servers_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_securityAlertPolicies);
            ResourceType_managedInstances_securityAlertPolicies = new ResourceType("Microsoft.Sql/managedInstances/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_securityAlertPolicies);
            ResourceType_managedInstances_administrators = new ResourceType("Microsoft.Sql/managedInstances/administrators", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/administrators'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagedInstanceAdministratorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_administrators);
            ResourceType_servers_databases = new ResourceType("Microsoft.Sql/servers/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases);
            ResourceType_managedInstances_databases = new ResourceType("Microsoft.Sql/managedInstances/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedDatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases);
            ResourceType_servers_databases_extendedAuditingSettings = new ResourceType("Microsoft.Sql/servers/databases/extendedAuditingSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/extendedAuditingSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExtendedDatabaseBlobAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_extendedAuditingSettings);
            ResourceType_servers_databases_auditingSettings = new ResourceType("Microsoft.Sql/servers/databases/auditingSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/auditingSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseBlobAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_auditingSettings);
            ResourceType_servers_databases_vulnerabilityAssessments = new ResourceType("Microsoft.Sql/servers/databases/vulnerabilityAssessments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/vulnerabilityAssessments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DatabaseVulnerabilityAssessmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_vulnerabilityAssessments);
            ResourceType_servers_jobAgents_credentials = new ResourceType("Microsoft.Sql/servers/jobAgents/credentials", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents/credentials'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => JobCredentialProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents_credentials);
            ResourceType_servers_jobAgents_jobs = new ResourceType("Microsoft.Sql/servers/jobAgents/jobs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents/jobs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => JobProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents_jobs);
            ResourceType_servers_jobAgents_targetGroups = new ResourceType("Microsoft.Sql/servers/jobAgents/targetGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents/targetGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => JobTargetGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents_targetGroups);
            ResourceType_servers_databases_backupLongTermRetentionPolicies = new ResourceType("Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/backupLongTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => LongTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_backupLongTermRetentionPolicies);
            ResourceType_managedInstances_databases_backupShortTermRetentionPolicies = new ResourceType("Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/backupShortTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagedBackupShortTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_backupShortTermRetentionPolicies);
            ResourceType_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies = new ResourceType("Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/restorableDroppedDatabases/backupShortTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagedBackupShortTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies);
            ResourceType_managedInstances_databases_securityAlertPolicies = new ResourceType("Microsoft.Sql/managedInstances/databases/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_securityAlertPolicies);
            ResourceType_servers_jobAgents_jobs_executions = new ResourceType("Microsoft.Sql/servers/jobAgents/jobs/executions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents/jobs/executions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents_jobs_executions);
            ResourceType_servers_jobAgents_jobs_steps = new ResourceType("Microsoft.Sql/servers/jobAgents/jobs/steps", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/jobAgents/jobs/steps'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => JobStepProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_jobAgents_jobs_steps);
            ResourceType_servers_databases_vulnerabilityAssessments_rules_baselines = new ResourceType("Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", UnionType.Create(new StringLiteralType("'master'"), new StringLiteralType("'default'")), TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/vulnerabilityAssessments/rules/baselines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DatabaseVulnerabilityAssessmentRuleBaselineProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_vulnerabilityAssessments_rules_baselines);
            ResourceType_servers_databases_schemas_tables_columns_sensitivityLabels = new ResourceType("Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SensitivityLabelProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-03-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_schemas_tables_columns_sensitivityLabels);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers_extendedAuditingSettings, () => InstanceLazy.Value.ResourceType_servers_extendedAuditingSettings);
            registrar.RegisterType(ResourceTypeReference_servers_auditingSettings, () => InstanceLazy.Value.ResourceType_servers_auditingSettings);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents, () => InstanceLazy.Value.ResourceType_servers_jobAgents);
            registrar.RegisterType(ResourceTypeReference_servers_dnsAliases, () => InstanceLazy.Value.ResourceType_servers_dnsAliases);
            registrar.RegisterType(ResourceTypeReference_servers_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_administrators, () => InstanceLazy.Value.ResourceType_managedInstances_administrators);
            registrar.RegisterType(ResourceTypeReference_servers_databases, () => InstanceLazy.Value.ResourceType_servers_databases);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases, () => InstanceLazy.Value.ResourceType_managedInstances_databases);
            registrar.RegisterType(ResourceTypeReference_servers_databases_extendedAuditingSettings, () => InstanceLazy.Value.ResourceType_servers_databases_extendedAuditingSettings);
            registrar.RegisterType(ResourceTypeReference_servers_databases_auditingSettings, () => InstanceLazy.Value.ResourceType_servers_databases_auditingSettings);
            registrar.RegisterType(ResourceTypeReference_servers_databases_vulnerabilityAssessments, () => InstanceLazy.Value.ResourceType_servers_databases_vulnerabilityAssessments);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents_credentials, () => InstanceLazy.Value.ResourceType_servers_jobAgents_credentials);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents_jobs, () => InstanceLazy.Value.ResourceType_servers_jobAgents_jobs);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents_targetGroups, () => InstanceLazy.Value.ResourceType_servers_jobAgents_targetGroups);
            registrar.RegisterType(ResourceTypeReference_servers_databases_backupLongTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_backupLongTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_backupShortTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_databases_backupShortTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_databases_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents_jobs_executions, () => InstanceLazy.Value.ResourceType_servers_jobAgents_jobs_executions);
            registrar.RegisterType(ResourceTypeReference_servers_jobAgents_jobs_steps, () => InstanceLazy.Value.ResourceType_servers_jobAgents_jobs_steps);
            registrar.RegisterType(ResourceTypeReference_servers_databases_vulnerabilityAssessments_rules_baselines, () => InstanceLazy.Value.ResourceType_servers_databases_vulnerabilityAssessments_rules_baselines);
            registrar.RegisterType(ResourceTypeReference_servers_databases_schemas_tables_columns_sensitivityLabels, () => InstanceLazy.Value.ResourceType_servers_databases_schemas_tables_columns_sensitivityLabels);
        }
        private readonly ResourceType ResourceType_servers_extendedAuditingSettings;
        private readonly ResourceType ResourceType_servers_auditingSettings;
        private readonly ResourceType ResourceType_servers_jobAgents;
        private readonly ResourceType ResourceType_servers_dnsAliases;
        private readonly ResourceType ResourceType_servers_securityAlertPolicies;
        private readonly ResourceType ResourceType_managedInstances_securityAlertPolicies;
        private readonly ResourceType ResourceType_managedInstances_administrators;
        private readonly ResourceType ResourceType_servers_databases;
        private readonly ResourceType ResourceType_managedInstances_databases;
        private readonly ResourceType ResourceType_servers_databases_extendedAuditingSettings;
        private readonly ResourceType ResourceType_servers_databases_auditingSettings;
        private readonly ResourceType ResourceType_servers_databases_vulnerabilityAssessments;
        private readonly ResourceType ResourceType_servers_jobAgents_credentials;
        private readonly ResourceType ResourceType_servers_jobAgents_jobs;
        private readonly ResourceType ResourceType_servers_jobAgents_targetGroups;
        private readonly ResourceType ResourceType_servers_databases_backupLongTermRetentionPolicies;
        private readonly ResourceType ResourceType_managedInstances_databases_backupShortTermRetentionPolicies;
        private readonly ResourceType ResourceType_managedInstances_restorableDroppedDatabases_backupShortTermRetentionPolicies;
        private readonly ResourceType ResourceType_managedInstances_databases_securityAlertPolicies;
        private readonly ResourceType ResourceType_servers_jobAgents_jobs_executions;
        private readonly ResourceType ResourceType_servers_jobAgents_jobs_steps;
        private readonly ResourceType ResourceType_servers_databases_vulnerabilityAssessments_rules_baselines;
        private readonly ResourceType ResourceType_servers_databases_schemas_tables_columns_sensitivityLabels;
        private readonly TypeSymbol ExtendedDatabaseBlobAuditingPolicyProperties;
        private readonly TypeSymbol ExtendedServerBlobAuditingPolicyProperties;
        private readonly TypeSymbol ServerBlobAuditingPolicyProperties;
        private readonly TypeSymbol DatabaseBlobAuditingPolicyProperties;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentRuleBaselineProperties;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentRuleBaselineItem;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentProperties;
        private readonly TypeSymbol VulnerabilityAssessmentRecurringScansProperties;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol JobAgentProperties;
        private readonly TypeSymbol JobCredentialProperties;
        private readonly TypeSymbol JobProperties;
        private readonly TypeSymbol JobSchedule;
        private readonly TypeSymbol JobStepProperties;
        private readonly TypeSymbol JobStepAction;
        private readonly TypeSymbol JobStepOutput;
        private readonly TypeSymbol JobStepExecutionOptions;
        private readonly TypeSymbol JobTargetGroupProperties;
        private readonly TypeSymbol JobTarget;
        private readonly TypeSymbol LongTermRetentionPolicyProperties;
        private readonly TypeSymbol ManagedBackupShortTermRetentionPolicyProperties;
        private readonly TypeSymbol SecurityAlertPolicyProperties;
        private readonly TypeSymbol SensitivityLabelProperties;
        private readonly TypeSymbol ManagedInstanceAdministratorProperties;
        private readonly TypeSymbol DatabaseProperties;
        private readonly TypeSymbol ManagedDatabaseProperties;
    }
}
