// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2017_10_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2017-10-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_elasticPools = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "elasticPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_locations_instanceFailoverGroups = new ResourceTypeReference(ProviderNamespace, new[]{"locations", "instanceFailoverGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_keys = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "keys"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_encryptionProtector = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "encryptionProtector"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "vulnerabilityAssessments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "backupShortTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments_rules_baselines = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "vulnerabilityAssessments", "rules", "baselines"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2017_10_01_preview> InstanceLazy = new Lazy<Microsoft_Sql_2017_10_01_preview>(() => new Microsoft_Sql_2017_10_01_preview());
        private Microsoft_Sql_2017_10_01_preview()
        {
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            DatabaseProperties = new NamedObjectType("DatabaseProperties", new ITypeProperty[]{new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Copy'"), new StringLiteralType("'Secondary'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Restore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'RestoreExternalBackupSecondary'"), new StringLiteralType("'RestoreLongTermRetentionBackup'"), new StringLiteralType("'OnlineSecondary'")), TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maxSizeBytes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sampleName", UnionType.Create(new StringLiteralType("'AdventureWorksLT'"), new StringLiteralType("'WideWorldImportersStd'"), new StringLiteralType("'WideWorldImportersFull'")), TypePropertyFlags.None), new TypeProperty("elasticPoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'RecoveryPending'"), new StringLiteralType("'Recovering'"), new StringLiteralType("'Suspect'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Standby'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'EmergencyMode'"), new StringLiteralType("'AutoClosed'"), new StringLiteralType("'Copying'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'OfflineSecondary'"), new StringLiteralType("'Pausing'"), new StringLiteralType("'Paused'"), new StringLiteralType("'Resuming'"), new StringLiteralType("'Scaling'"), new StringLiteralType("'OfflineChangingDwPerformanceTiers'"), new StringLiteralType("'OnlineChangingDwPerformanceTiers'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly), new TypeProperty("databaseId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceObjectiveName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("requestedServiceObjectiveName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseDeletionDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoveryServicesRecoveryPointId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None), new TypeProperty("maxLogSizeBytes", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestoreDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("readScale", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("readReplicaCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("currentSku", () => Sku, TypePropertyFlags.ReadOnly), new TypeProperty("autoPauseDelay", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("minCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("pausedDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("resumedDate", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ElasticPoolProperties = new NamedObjectType("ElasticPoolProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("maxSizeBytes", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("perDatabaseSettings", () => ElasticPoolPerDatabaseSettings, TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None)}, null);
            ElasticPoolPerDatabaseSettings = new NamedObjectType("ElasticPoolPerDatabaseSettings", new ITypeProperty[]{new TypeProperty("minCapacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxCapacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            DatabaseVulnerabilityAssessmentRuleBaselineProperties = new NamedObjectType("DatabaseVulnerabilityAssessmentRuleBaselineProperties", new ITypeProperty[]{new LazyTypeProperty("baselineResults", () => new TypedArrayType(DatabaseVulnerabilityAssessmentRuleBaselineItem), TypePropertyFlags.Required)}, null);
            DatabaseVulnerabilityAssessmentRuleBaselineItem = new NamedObjectType("DatabaseVulnerabilityAssessmentRuleBaselineItem", new ITypeProperty[]{new TypeProperty("result", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required)}, null);
            DatabaseVulnerabilityAssessmentProperties = new NamedObjectType("DatabaseVulnerabilityAssessmentProperties", new ITypeProperty[]{new TypeProperty("storageContainerPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("recurringScans", () => VulnerabilityAssessmentRecurringScansProperties, TypePropertyFlags.None)}, null);
            VulnerabilityAssessmentRecurringScansProperties = new NamedObjectType("VulnerabilityAssessmentRecurringScansProperties", new ITypeProperty[]{new TypeProperty("isEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emailSubscriptionAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emails", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            InstanceFailoverGroupProperties = new NamedObjectType("InstanceFailoverGroupProperties", new ITypeProperty[]{new LazyTypeProperty("readWriteEndpoint", () => InstanceFailoverGroupReadWriteEndpoint, TypePropertyFlags.Required), new LazyTypeProperty("readOnlyEndpoint", () => InstanceFailoverGroupReadOnlyEndpoint, TypePropertyFlags.None), new TypeProperty("replicationRole", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly), new TypeProperty("replicationState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("partnerRegions", () => new TypedArrayType(PartnerRegionInfo), TypePropertyFlags.Required), new LazyTypeProperty("managedInstancePairs", () => new TypedArrayType(ManagedInstancePairInfo), TypePropertyFlags.Required)}, null);
            InstanceFailoverGroupReadWriteEndpoint = new NamedObjectType("InstanceFailoverGroupReadWriteEndpoint", new ITypeProperty[]{new TypeProperty("failoverPolicy", UnionType.Create(new StringLiteralType("'Manual'"), new StringLiteralType("'Automatic'")), TypePropertyFlags.Required), new TypeProperty("failoverWithDataLossGracePeriodMinutes", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            InstanceFailoverGroupReadOnlyEndpoint = new NamedObjectType("InstanceFailoverGroupReadOnlyEndpoint", new ITypeProperty[]{new TypeProperty("failoverPolicy", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None)}, null);
            PartnerRegionInfo = new NamedObjectType("PartnerRegionInfo", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replicationRole", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly)}, null);
            ManagedInstancePairInfo = new NamedObjectType("ManagedInstancePairInfo", new ITypeProperty[]{new TypeProperty("primaryManagedInstanceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("partnerManagedInstanceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ManagedInstanceKeyProperties = new NamedObjectType("ManagedInstanceKeyProperties", new ITypeProperty[]{new TypeProperty("serverKeyType", UnionType.Create(new StringLiteralType("'ServiceManaged'"), new StringLiteralType("'AzureKeyVault'")), TypePropertyFlags.Required), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ManagedInstanceEncryptionProtectorProperties = new NamedObjectType("ManagedInstanceEncryptionProtectorProperties", new ITypeProperty[]{new TypeProperty("serverKeyName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serverKeyType", UnionType.Create(new StringLiteralType("'ServiceManaged'"), new StringLiteralType("'AzureKeyVault'")), TypePropertyFlags.Required), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            BackupShortTermRetentionPolicyProperties = new NamedObjectType("BackupShortTermRetentionPolicyProperties", new ITypeProperty[]{new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceType_servers_databases = new ResourceType("Microsoft.Sql/servers/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedBy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases);
            ResourceType_servers_elasticPools = new ResourceType("Microsoft.Sql/servers/elasticPools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/elasticPools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ElasticPoolProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_elasticPools);
            ResourceType_locations_instanceFailoverGroups = new ResourceType("Microsoft.Sql/locations/instanceFailoverGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/locations/instanceFailoverGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => InstanceFailoverGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_locations_instanceFailoverGroups);
            ResourceType_managedInstances_keys = new ResourceType("Microsoft.Sql/managedInstances/keys", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/keys'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedInstanceKeyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_keys);
            ResourceType_managedInstances_encryptionProtector = new ResourceType("Microsoft.Sql/managedInstances/encryptionProtector", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/encryptionProtector'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedInstanceEncryptionProtectorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_encryptionProtector);
            ResourceType_managedInstances_databases_vulnerabilityAssessments = new ResourceType("Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DatabaseVulnerabilityAssessmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments);
            ResourceType_servers_databases_backupShortTermRetentionPolicies = new ResourceType("Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => BackupShortTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies);
            ResourceType_managedInstances_databases_vulnerabilityAssessments_rules_baselines = new ResourceType("Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments/rules/baselines", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", UnionType.Create(new StringLiteralType("'master'"), new StringLiteralType("'default'")), TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments/rules/baselines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DatabaseVulnerabilityAssessmentRuleBaselineProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2017-10-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments_rules_baselines);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers_databases, () => InstanceLazy.Value.ResourceType_servers_databases);
            registrar.RegisterType(ResourceTypeReference_servers_elasticPools, () => InstanceLazy.Value.ResourceType_servers_elasticPools);
            registrar.RegisterType(ResourceTypeReference_locations_instanceFailoverGroups, () => InstanceLazy.Value.ResourceType_locations_instanceFailoverGroups);
            registrar.RegisterType(ResourceTypeReference_managedInstances_keys, () => InstanceLazy.Value.ResourceType_managedInstances_keys);
            registrar.RegisterType(ResourceTypeReference_managedInstances_encryptionProtector, () => InstanceLazy.Value.ResourceType_managedInstances_encryptionProtector);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments, () => InstanceLazy.Value.ResourceType_managedInstances_databases_vulnerabilityAssessments);
            registrar.RegisterType(ResourceTypeReference_servers_databases_backupShortTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_backupShortTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_vulnerabilityAssessments_rules_baselines, () => InstanceLazy.Value.ResourceType_managedInstances_databases_vulnerabilityAssessments_rules_baselines);
        }
        private readonly ResourceType ResourceType_servers_databases;
        private readonly ResourceType ResourceType_servers_elasticPools;
        private readonly ResourceType ResourceType_locations_instanceFailoverGroups;
        private readonly ResourceType ResourceType_managedInstances_keys;
        private readonly ResourceType ResourceType_managedInstances_encryptionProtector;
        private readonly ResourceType ResourceType_managedInstances_databases_vulnerabilityAssessments;
        private readonly ResourceType ResourceType_servers_databases_backupShortTermRetentionPolicies;
        private readonly ResourceType ResourceType_managedInstances_databases_vulnerabilityAssessments_rules_baselines;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol DatabaseProperties;
        private readonly TypeSymbol ElasticPoolProperties;
        private readonly TypeSymbol ElasticPoolPerDatabaseSettings;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentRuleBaselineProperties;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentRuleBaselineItem;
        private readonly TypeSymbol DatabaseVulnerabilityAssessmentProperties;
        private readonly TypeSymbol VulnerabilityAssessmentRecurringScansProperties;
        private readonly TypeSymbol InstanceFailoverGroupProperties;
        private readonly TypeSymbol InstanceFailoverGroupReadWriteEndpoint;
        private readonly TypeSymbol InstanceFailoverGroupReadOnlyEndpoint;
        private readonly TypeSymbol PartnerRegionInfo;
        private readonly TypeSymbol ManagedInstancePairInfo;
        private readonly TypeSymbol ManagedInstanceKeyProperties;
        private readonly TypeSymbol ManagedInstanceEncryptionProtectorProperties;
        private readonly TypeSymbol BackupShortTermRetentionPolicyProperties;
    }
}
