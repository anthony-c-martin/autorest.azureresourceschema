// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2015_05_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2015-05-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers = new ResourceTypeReference(ProviderNamespace, new[]{"servers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_encryptionProtector = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "encryptionProtector"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_failoverGroups = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "failoverGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_keys = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "keys"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_syncAgents = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "syncAgents"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_virtualNetworkRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "virtualNetworkRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_firewallRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "firewallRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_syncGroups = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "syncGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_auditingSettings = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "auditingSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_syncGroups_syncMembers = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "syncGroups", "syncMembers"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2015_05_01_preview> InstanceLazy = new Lazy<Microsoft_Sql_2015_05_01_preview>(() => new Microsoft_Sql_2015_05_01_preview());
        private Microsoft_Sql_2015_05_01_preview()
        {
            EncryptionProtectorProperties = new NamedObjectType("EncryptionProtectorProperties", new ITypeProperty[]{new TypeProperty("subregion", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("serverKeyName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serverKeyType", UnionType.Create(new StringLiteralType("'ServiceManaged'"), new StringLiteralType("'AzureKeyVault'")), TypePropertyFlags.Required), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            FailoverGroupProperties = new NamedObjectType("FailoverGroupProperties", new ITypeProperty[]{new LazyTypeProperty("readWriteEndpoint", () => FailoverGroupReadWriteEndpoint, TypePropertyFlags.Required), new LazyTypeProperty("readOnlyEndpoint", () => FailoverGroupReadOnlyEndpoint, TypePropertyFlags.None), new TypeProperty("replicationRole", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly), new TypeProperty("replicationState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("partnerServers", () => new TypedArrayType(PartnerInfo), TypePropertyFlags.Required), new TypeProperty("databases", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            FailoverGroupReadWriteEndpoint = new NamedObjectType("FailoverGroupReadWriteEndpoint", new ITypeProperty[]{new TypeProperty("failoverPolicy", UnionType.Create(new StringLiteralType("'Manual'"), new StringLiteralType("'Automatic'")), TypePropertyFlags.Required), new TypeProperty("failoverWithDataLossGracePeriodMinutes", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            FailoverGroupReadOnlyEndpoint = new NamedObjectType("FailoverGroupReadOnlyEndpoint", new ITypeProperty[]{new TypeProperty("failoverPolicy", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None)}, null);
            PartnerInfo = new NamedObjectType("PartnerInfo", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("replicationRole", UnionType.Create(new StringLiteralType("'Primary'"), new StringLiteralType("'Secondary'")), TypePropertyFlags.ReadOnly)}, null);
            ServerKeyProperties = new NamedObjectType("ServerKeyProperties", new ITypeProperty[]{new TypeProperty("subregion", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("serverKeyType", UnionType.Create(new StringLiteralType("'ServiceManaged'"), new StringLiteralType("'AzureKeyVault'")), TypePropertyFlags.Required), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncAgentProperties = new NamedObjectType("SyncAgentProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("syncDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastAliveTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Offline'"), new StringLiteralType("'NeverConnected'")), TypePropertyFlags.ReadOnly), new TypeProperty("isUpToDate", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("expiryTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkRuleProperties = new NamedObjectType("VirtualNetworkRuleProperties", new ITypeProperty[]{new TypeProperty("virtualNetworkSubnetId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("ignoreMissingVnetServiceEndpoint", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Initializing'"), new StringLiteralType("'InProgress'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.ReadOnly)}, null);
            ResourceIdentity = new NamedObjectType("ResourceIdentity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ManagedInstanceProperties = new NamedObjectType("ManagedInstanceProperties", new ITypeProperty[]{new TypeProperty("managedInstanceCreateMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'PointInTimeRestore'")), TypePropertyFlags.None), new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None), new TypeProperty("vCores", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageSizeInGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsZone", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("dnsZonePartner", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicDataEndpointEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sourceManagedInstanceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyOverride", UnionType.Create(new StringLiteralType("'Proxy'"), new StringLiteralType("'Redirect'"), new StringLiteralType("'Default'")), TypePropertyFlags.None), new TypeProperty("timezoneId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("instancePoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maintenanceConfigurationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("minimalTlsVersion", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServerProperties = new NamedObjectType("ServerProperties", new ITypeProperty[]{new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SyncGroupProperties = new NamedObjectType("SyncGroupProperties", new ITypeProperty[]{new TypeProperty("interval", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("lastSyncTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("conflictResolutionPolicy", UnionType.Create(new StringLiteralType("'HubWin'"), new StringLiteralType("'MemberWin'")), TypePropertyFlags.None), new TypeProperty("syncDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hubDatabaseUserName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("hubDatabasePassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("syncState", UnionType.Create(new StringLiteralType("'NotReady'"), new StringLiteralType("'Error'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Progressing'"), new StringLiteralType("'Good'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("schema", () => SyncGroupSchema, TypePropertyFlags.None)}, null);
            SyncGroupSchema = new NamedObjectType("SyncGroupSchema", new ITypeProperty[]{new LazyTypeProperty("tables", () => new TypedArrayType(SyncGroupSchemaTable), TypePropertyFlags.None), new TypeProperty("masterSyncMemberName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncGroupSchemaTable = new NamedObjectType("SyncGroupSchemaTable", new ITypeProperty[]{new LazyTypeProperty("columns", () => new TypedArrayType(SyncGroupSchemaTableColumn), TypePropertyFlags.None), new TypeProperty("quotedName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncGroupSchemaTableColumn = new NamedObjectType("SyncGroupSchemaTableColumn", new ITypeProperty[]{new TypeProperty("quotedName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataType", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SyncMemberProperties = new NamedObjectType("SyncMemberProperties", new ITypeProperty[]{new TypeProperty("databaseType", UnionType.Create(new StringLiteralType("'AzureSqlDatabase'"), new StringLiteralType("'SqlServerDatabase'")), TypePropertyFlags.None), new TypeProperty("syncAgentId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sqlServerDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serverName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("databaseName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("syncDirection", UnionType.Create(new StringLiteralType("'Bidirectional'"), new StringLiteralType("'OneWayMemberToHub'"), new StringLiteralType("'OneWayHubToMember'")), TypePropertyFlags.None), new TypeProperty("syncState", UnionType.Create(new StringLiteralType("'SyncInProgress'"), new StringLiteralType("'SyncSucceeded'"), new StringLiteralType("'SyncFailed'"), new StringLiteralType("'DisabledTombstoneCleanup'"), new StringLiteralType("'DisabledBackupRestore'"), new StringLiteralType("'SyncSucceededWithWarnings'"), new StringLiteralType("'SyncCancelling'"), new StringLiteralType("'SyncCancelled'"), new StringLiteralType("'UnProvisioned'"), new StringLiteralType("'Provisioning'"), new StringLiteralType("'Provisioned'"), new StringLiteralType("'ProvisionFailed'"), new StringLiteralType("'DeProvisioning'"), new StringLiteralType("'DeProvisioned'"), new StringLiteralType("'DeProvisionFailed'"), new StringLiteralType("'Reprovisioning'"), new StringLiteralType("'ReprovisionFailed'"), new StringLiteralType("'UnReprovisioned'")), TypePropertyFlags.ReadOnly)}, null);
            DatabaseBlobAuditingPolicyProperties = new NamedObjectType("DatabaseBlobAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("auditActionsAndGroups", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isStorageSecondaryKeyInUse", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isAzureMonitorTargetEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("queueDelayMs", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ServerFirewallRuleProperties = new NamedObjectType("ServerFirewallRuleProperties", new ITypeProperty[]{new TypeProperty("startIpAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endIpAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FirewallRule = new NamedObjectType("FirewallRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerFirewallRuleProperties, TypePropertyFlags.None)}, null);
            ResourceType_managedInstances = new ResourceType("Microsoft.Sql/managedInstances", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedInstanceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances);
            ResourceType_servers = new ResourceType("Microsoft.Sql/servers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers);
            ResourceType_servers_encryptionProtector = new ResourceType("Microsoft.Sql/servers/encryptionProtector", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/encryptionProtector'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => EncryptionProtectorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_encryptionProtector);
            ResourceType_servers_failoverGroups = new ResourceType("Microsoft.Sql/servers/failoverGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/failoverGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => FailoverGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_failoverGroups);
            ResourceType_servers_keys = new ResourceType("Microsoft.Sql/servers/keys", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/keys'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerKeyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_keys);
            ResourceType_servers_syncAgents = new ResourceType("Microsoft.Sql/servers/syncAgents", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/syncAgents'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SyncAgentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_syncAgents);
            ResourceType_servers_virtualNetworkRules = new ResourceType("Microsoft.Sql/servers/virtualNetworkRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/virtualNetworkRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualNetworkRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_virtualNetworkRules);
            ResourceType_servers_firewallRules = new ResourceType("Microsoft.Sql/servers/firewallRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/firewallRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerFirewallRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_firewallRules);
            ResourceType_servers_databases_syncGroups = new ResourceType("Microsoft.Sql/servers/databases/syncGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/syncGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SyncGroupProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_syncGroups);
            ResourceType_servers_databases_auditingSettings = new ResourceType("Microsoft.Sql/servers/databases/auditingSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/auditingSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseBlobAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_auditingSettings);
            ResourceType_servers_databases_syncGroups_syncMembers = new ResourceType("Microsoft.Sql/servers/databases/syncGroups/syncMembers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/syncGroups/syncMembers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SyncMemberProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_syncGroups_syncMembers);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_managedInstances, () => InstanceLazy.Value.ResourceType_managedInstances);
            registrar.RegisterType(ResourceTypeReference_servers, () => InstanceLazy.Value.ResourceType_servers);
            registrar.RegisterType(ResourceTypeReference_servers_encryptionProtector, () => InstanceLazy.Value.ResourceType_servers_encryptionProtector);
            registrar.RegisterType(ResourceTypeReference_servers_failoverGroups, () => InstanceLazy.Value.ResourceType_servers_failoverGroups);
            registrar.RegisterType(ResourceTypeReference_servers_keys, () => InstanceLazy.Value.ResourceType_servers_keys);
            registrar.RegisterType(ResourceTypeReference_servers_syncAgents, () => InstanceLazy.Value.ResourceType_servers_syncAgents);
            registrar.RegisterType(ResourceTypeReference_servers_virtualNetworkRules, () => InstanceLazy.Value.ResourceType_servers_virtualNetworkRules);
            registrar.RegisterType(ResourceTypeReference_servers_firewallRules, () => InstanceLazy.Value.ResourceType_servers_firewallRules);
            registrar.RegisterType(ResourceTypeReference_servers_databases_syncGroups, () => InstanceLazy.Value.ResourceType_servers_databases_syncGroups);
            registrar.RegisterType(ResourceTypeReference_servers_databases_auditingSettings, () => InstanceLazy.Value.ResourceType_servers_databases_auditingSettings);
            registrar.RegisterType(ResourceTypeReference_servers_databases_syncGroups_syncMembers, () => InstanceLazy.Value.ResourceType_servers_databases_syncGroups_syncMembers);
        }
        private readonly ResourceType ResourceType_managedInstances;
        private readonly ResourceType ResourceType_servers;
        private readonly ResourceType ResourceType_servers_encryptionProtector;
        private readonly ResourceType ResourceType_servers_failoverGroups;
        private readonly ResourceType ResourceType_servers_keys;
        private readonly ResourceType ResourceType_servers_syncAgents;
        private readonly ResourceType ResourceType_servers_virtualNetworkRules;
        private readonly ResourceType ResourceType_servers_firewallRules;
        private readonly ResourceType ResourceType_servers_databases_syncGroups;
        private readonly ResourceType ResourceType_servers_databases_auditingSettings;
        private readonly ResourceType ResourceType_servers_databases_syncGroups_syncMembers;
        private readonly TypeSymbol EncryptionProtectorProperties;
        private readonly TypeSymbol FailoverGroupProperties;
        private readonly TypeSymbol FailoverGroupReadWriteEndpoint;
        private readonly TypeSymbol FailoverGroupReadOnlyEndpoint;
        private readonly TypeSymbol PartnerInfo;
        private readonly TypeSymbol ServerKeyProperties;
        private readonly TypeSymbol SyncAgentProperties;
        private readonly TypeSymbol VirtualNetworkRuleProperties;
        private readonly TypeSymbol ResourceIdentity;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol ManagedInstanceProperties;
        private readonly TypeSymbol ServerProperties;
        private readonly TypeSymbol SyncGroupProperties;
        private readonly TypeSymbol SyncGroupSchema;
        private readonly TypeSymbol SyncGroupSchemaTable;
        private readonly TypeSymbol SyncGroupSchemaTableColumn;
        private readonly TypeSymbol SyncMemberProperties;
        private readonly TypeSymbol DatabaseBlobAuditingPolicyProperties;
        private readonly TypeSymbol ServerFirewallRuleProperties;
        private readonly TypeSymbol FirewallRule;
    }
}
