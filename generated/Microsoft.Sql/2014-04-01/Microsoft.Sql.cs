// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2014_04_01
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2014-04-01";
        private static readonly ResourceTypeReference ResourceTypeReference_servers = new ResourceTypeReference(ProviderNamespace, new[]{"servers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_connectionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "connectionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_firewallRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "firewallRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_elasticPools = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "elasticPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_communicationLinks = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "communicationLinks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_administrators = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "administrators"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_advisors = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "advisors"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_disasterRecoveryConfiguration = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "disasterRecoveryConfiguration"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_auditingPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "auditingPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_dataMaskingPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "dataMaskingPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_geoBackupPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "geoBackupPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_transparentDataEncryption = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "transparentDataEncryption"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_advisors = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "advisors"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_auditingPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "auditingPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_connectionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "connectionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_dataMaskingPolicies_rules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "dataMaskingPolicies", "rules"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2014_04_01> InstanceLazy = new Lazy<Microsoft_Sql_2014_04_01>(() => new Microsoft_Sql_2014_04_01());
        private Microsoft_Sql_2014_04_01()
        {
            ServerConnectionPolicyProperties = new NamedObjectType("ServerConnectionPolicyProperties", new ITypeProperty[]{new TypeProperty("connectionType", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Proxy'"), new StringLiteralType("'Redirect'")), TypePropertyFlags.Required)}, null);
            DatabaseSecurityAlertPolicyProperties = new NamedObjectType("DatabaseSecurityAlertPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'New'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("disabledAlerts", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("emailAddresses", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("emailAccountAdmins", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("useServerDefault", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None)}, null);
            DataMaskingPolicyProperties = new NamedObjectType("DataMaskingPolicyProperties", new ITypeProperty[]{new TypeProperty("dataMaskingState", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.Required), new TypeProperty("exemptPrincipals", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("applicationPrincipals", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("maskingLevel", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            DataMaskingRuleProperties = new NamedObjectType("DataMaskingRuleProperties", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("aliasName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ruleState", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("schemaName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tableName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("columnName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("maskingFunction", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'CCN'"), new StringLiteralType("'Email'"), new StringLiteralType("'Number'"), new StringLiteralType("'SSN'"), new StringLiteralType("'Text'")), TypePropertyFlags.Required), new TypeProperty("numberFrom", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("numberTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("prefixSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("suffixSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replacementString", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FirewallRuleProperties = new NamedObjectType("FirewallRuleProperties", new ITypeProperty[]{new TypeProperty("startIpAddress", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("endIpAddress", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            GeoBackupPolicyProperties = new NamedObjectType("GeoBackupPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.Required), new TypeProperty("storageType", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            DatabaseProperties = new NamedObjectType("DatabaseProperties", new ITypeProperty[]{new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("containmentState", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("databaseId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestoreDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Copy'"), new StringLiteralType("'Default'"), new StringLiteralType("'NonReadableSecondary'"), new StringLiteralType("'OnlineSecondary'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'Restore'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseDeletionDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("recoveryServicesRecoveryPointResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("edition", UnionType.Create(new StringLiteralType("'Web'"), new StringLiteralType("'Business'"), new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'"), new StringLiteralType("'PremiumRS'"), new StringLiteralType("'Free'"), new StringLiteralType("'Stretch'"), new StringLiteralType("'DataWarehouse'"), new StringLiteralType("'System'"), new StringLiteralType("'System2'"), new StringLiteralType("'GeneralPurpose'"), new StringLiteralType("'BusinessCritical'"), new StringLiteralType("'Hyperscale'")), TypePropertyFlags.None), new TypeProperty("maxSizeBytes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requestedServiceObjectiveId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("requestedServiceObjectiveName", UnionType.Create(new StringLiteralType("'System'"), new StringLiteralType("'System0'"), new StringLiteralType("'System1'"), new StringLiteralType("'System2'"), new StringLiteralType("'System3'"), new StringLiteralType("'System4'"), new StringLiteralType("'System2L'"), new StringLiteralType("'System3L'"), new StringLiteralType("'System4L'"), new StringLiteralType("'Free'"), new StringLiteralType("'Basic'"), new StringLiteralType("'S0'"), new StringLiteralType("'S1'"), new StringLiteralType("'S2'"), new StringLiteralType("'S3'"), new StringLiteralType("'S4'"), new StringLiteralType("'S6'"), new StringLiteralType("'S7'"), new StringLiteralType("'S9'"), new StringLiteralType("'S12'"), new StringLiteralType("'P1'"), new StringLiteralType("'P2'"), new StringLiteralType("'P3'"), new StringLiteralType("'P4'"), new StringLiteralType("'P6'"), new StringLiteralType("'P11'"), new StringLiteralType("'P15'"), new StringLiteralType("'PRS1'"), new StringLiteralType("'PRS2'"), new StringLiteralType("'PRS4'"), new StringLiteralType("'PRS6'"), new StringLiteralType("'DW100'"), new StringLiteralType("'DW200'"), new StringLiteralType("'DW300'"), new StringLiteralType("'DW400'"), new StringLiteralType("'DW500'"), new StringLiteralType("'DW600'"), new StringLiteralType("'DW1000'"), new StringLiteralType("'DW1200'"), new StringLiteralType("'DW1000c'"), new StringLiteralType("'DW1500'"), new StringLiteralType("'DW1500c'"), new StringLiteralType("'DW2000'"), new StringLiteralType("'DW2000c'"), new StringLiteralType("'DW3000'"), new StringLiteralType("'DW2500c'"), new StringLiteralType("'DW3000c'"), new StringLiteralType("'DW6000'"), new StringLiteralType("'DW5000c'"), new StringLiteralType("'DW6000c'"), new StringLiteralType("'DW7500c'"), new StringLiteralType("'DW10000c'"), new StringLiteralType("'DW15000c'"), new StringLiteralType("'DW30000c'"), new StringLiteralType("'DS100'"), new StringLiteralType("'DS200'"), new StringLiteralType("'DS300'"), new StringLiteralType("'DS400'"), new StringLiteralType("'DS500'"), new StringLiteralType("'DS600'"), new StringLiteralType("'DS1000'"), new StringLiteralType("'DS1200'"), new StringLiteralType("'DS1500'"), new StringLiteralType("'DS2000'"), new StringLiteralType("'ElasticPool'")), TypePropertyFlags.None), new TypeProperty("serviceLevelObjective", UnionType.Create(new StringLiteralType("'System'"), new StringLiteralType("'System0'"), new StringLiteralType("'System1'"), new StringLiteralType("'System2'"), new StringLiteralType("'System3'"), new StringLiteralType("'System4'"), new StringLiteralType("'System2L'"), new StringLiteralType("'System3L'"), new StringLiteralType("'System4L'"), new StringLiteralType("'Free'"), new StringLiteralType("'Basic'"), new StringLiteralType("'S0'"), new StringLiteralType("'S1'"), new StringLiteralType("'S2'"), new StringLiteralType("'S3'"), new StringLiteralType("'S4'"), new StringLiteralType("'S6'"), new StringLiteralType("'S7'"), new StringLiteralType("'S9'"), new StringLiteralType("'S12'"), new StringLiteralType("'P1'"), new StringLiteralType("'P2'"), new StringLiteralType("'P3'"), new StringLiteralType("'P4'"), new StringLiteralType("'P6'"), new StringLiteralType("'P11'"), new StringLiteralType("'P15'"), new StringLiteralType("'PRS1'"), new StringLiteralType("'PRS2'"), new StringLiteralType("'PRS4'"), new StringLiteralType("'PRS6'"), new StringLiteralType("'DW100'"), new StringLiteralType("'DW200'"), new StringLiteralType("'DW300'"), new StringLiteralType("'DW400'"), new StringLiteralType("'DW500'"), new StringLiteralType("'DW600'"), new StringLiteralType("'DW1000'"), new StringLiteralType("'DW1200'"), new StringLiteralType("'DW1000c'"), new StringLiteralType("'DW1500'"), new StringLiteralType("'DW1500c'"), new StringLiteralType("'DW2000'"), new StringLiteralType("'DW2000c'"), new StringLiteralType("'DW3000'"), new StringLiteralType("'DW2500c'"), new StringLiteralType("'DW3000c'"), new StringLiteralType("'DW6000'"), new StringLiteralType("'DW5000c'"), new StringLiteralType("'DW6000c'"), new StringLiteralType("'DW7500c'"), new StringLiteralType("'DW10000c'"), new StringLiteralType("'DW15000c'"), new StringLiteralType("'DW30000c'"), new StringLiteralType("'DS100'"), new StringLiteralType("'DS200'"), new StringLiteralType("'DS300'"), new StringLiteralType("'DS400'"), new StringLiteralType("'DS500'"), new StringLiteralType("'DS600'"), new StringLiteralType("'DS1000'"), new StringLiteralType("'DS1200'"), new StringLiteralType("'DS1500'"), new StringLiteralType("'DS2000'"), new StringLiteralType("'ElasticPool'")), TypePropertyFlags.ReadOnly), new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("elasticPoolName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("serviceTierAdvisors", () => new TypedArrayType(ServiceTierAdvisor), TypePropertyFlags.ReadOnly), new LazyTypeProperty("transparentDataEncryption", () => new TypedArrayType(TransparentDataEncryption), TypePropertyFlags.ReadOnly), new LazyTypeProperty("recommendedIndex", () => new TypedArrayType(RecommendedIndex), TypePropertyFlags.ReadOnly), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("readScale", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("sampleName", new StringLiteralType("'AdventureWorksLT'"), TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ServiceTierAdvisor = new NamedObjectType("ServiceTierAdvisor", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServiceTierAdvisorProperties, TypePropertyFlags.ReadOnly)}, null);
            ServiceTierAdvisorProperties = new NamedObjectType("ServiceTierAdvisorProperties", new ITypeProperty[]{new TypeProperty("observationPeriodStart", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("observationPeriodEnd", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("activeTimeRatio", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("minDtu", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("avgDtu", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("maxDtu", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("maxSizeInGB", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("serviceLevelObjectiveUsageMetrics", () => new TypedArrayType(SloUsageMetric), TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceLevelObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("currentServiceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("usageBasedRecommendationServiceLevelObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("usageBasedRecommendationServiceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("databaseSizeBasedRecommendationServiceLevelObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("databaseSizeBasedRecommendationServiceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("disasterPlanBasedRecommendationServiceLevelObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("disasterPlanBasedRecommendationServiceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("overallRecommendationServiceLevelObjective", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("overallRecommendationServiceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("confidence", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            SloUsageMetric = new NamedObjectType("SloUsageMetric", new ITypeProperty[]{new TypeProperty("serviceLevelObjective", UnionType.Create(new StringLiteralType("'System'"), new StringLiteralType("'System0'"), new StringLiteralType("'System1'"), new StringLiteralType("'System2'"), new StringLiteralType("'System3'"), new StringLiteralType("'System4'"), new StringLiteralType("'System2L'"), new StringLiteralType("'System3L'"), new StringLiteralType("'System4L'"), new StringLiteralType("'Free'"), new StringLiteralType("'Basic'"), new StringLiteralType("'S0'"), new StringLiteralType("'S1'"), new StringLiteralType("'S2'"), new StringLiteralType("'S3'"), new StringLiteralType("'S4'"), new StringLiteralType("'S6'"), new StringLiteralType("'S7'"), new StringLiteralType("'S9'"), new StringLiteralType("'S12'"), new StringLiteralType("'P1'"), new StringLiteralType("'P2'"), new StringLiteralType("'P3'"), new StringLiteralType("'P4'"), new StringLiteralType("'P6'"), new StringLiteralType("'P11'"), new StringLiteralType("'P15'"), new StringLiteralType("'PRS1'"), new StringLiteralType("'PRS2'"), new StringLiteralType("'PRS4'"), new StringLiteralType("'PRS6'"), new StringLiteralType("'DW100'"), new StringLiteralType("'DW200'"), new StringLiteralType("'DW300'"), new StringLiteralType("'DW400'"), new StringLiteralType("'DW500'"), new StringLiteralType("'DW600'"), new StringLiteralType("'DW1000'"), new StringLiteralType("'DW1200'"), new StringLiteralType("'DW1000c'"), new StringLiteralType("'DW1500'"), new StringLiteralType("'DW1500c'"), new StringLiteralType("'DW2000'"), new StringLiteralType("'DW2000c'"), new StringLiteralType("'DW3000'"), new StringLiteralType("'DW2500c'"), new StringLiteralType("'DW3000c'"), new StringLiteralType("'DW6000'"), new StringLiteralType("'DW5000c'"), new StringLiteralType("'DW6000c'"), new StringLiteralType("'DW7500c'"), new StringLiteralType("'DW10000c'"), new StringLiteralType("'DW15000c'"), new StringLiteralType("'DW30000c'"), new StringLiteralType("'DS100'"), new StringLiteralType("'DS200'"), new StringLiteralType("'DS300'"), new StringLiteralType("'DS400'"), new StringLiteralType("'DS500'"), new StringLiteralType("'DS600'"), new StringLiteralType("'DS1000'"), new StringLiteralType("'DS1200'"), new StringLiteralType("'DS1500'"), new StringLiteralType("'DS2000'"), new StringLiteralType("'ElasticPool'")), TypePropertyFlags.ReadOnly), new TypeProperty("serviceLevelObjectiveId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("inRangeTimeRatio", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            TransparentDataEncryption = new NamedObjectType("TransparentDataEncryption", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => TransparentDataEncryptionProperties, TypePropertyFlags.None)}, null);
            TransparentDataEncryptionProperties = new NamedObjectType("TransparentDataEncryptionProperties", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None)}, null);
            RecommendedIndex = new NamedObjectType("RecommendedIndex", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => RecommendedIndexProperties, TypePropertyFlags.ReadOnly)}, null);
            RecommendedIndexProperties = new NamedObjectType("RecommendedIndexProperties", new ITypeProperty[]{new TypeProperty("action", UnionType.Create(new StringLiteralType("'Create'"), new StringLiteralType("'Drop'"), new StringLiteralType("'Rebuild'")), TypePropertyFlags.ReadOnly), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Active'"), new StringLiteralType("'Pending'"), new StringLiteralType("'Executing'"), new StringLiteralType("'Verifying'"), new StringLiteralType("'Pending Revert'"), new StringLiteralType("'Reverting'"), new StringLiteralType("'Reverted'"), new StringLiteralType("'Ignored'"), new StringLiteralType("'Expired'"), new StringLiteralType("'Blocked'"), new StringLiteralType("'Success'")), TypePropertyFlags.ReadOnly), new TypeProperty("created", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastModified", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("indexType", UnionType.Create(new StringLiteralType("'CLUSTERED'"), new StringLiteralType("'NONCLUSTERED'"), new StringLiteralType("'COLUMNSTORE'"), new StringLiteralType("'CLUSTERED COLUMNSTORE'")), TypePropertyFlags.ReadOnly), new TypeProperty("schema", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("table", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("columns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("includedColumns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("indexScript", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("estimatedImpact", () => new TypedArrayType(OperationImpact), TypePropertyFlags.ReadOnly), new LazyTypeProperty("reportedImpact", () => new TypedArrayType(OperationImpact), TypePropertyFlags.ReadOnly)}, null);
            OperationImpact = new NamedObjectType("OperationImpact", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("unit", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("changeValueAbsolute", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("changeValueRelative", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            ImportExtensionProperties = new NamedObjectType("ImportExtensionProperties", new ITypeProperty[]{new TypeProperty("storageKeyType", UnionType.Create(new StringLiteralType("'StorageAccessKey'"), new StringLiteralType("'SharedAccessKey'")), TypePropertyFlags.Required), new TypeProperty("storageKey", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("storageUri", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("authenticationType", UnionType.Create(new StringLiteralType("'SQL'"), new StringLiteralType("'ADPassword'")), TypePropertyFlags.None), new TypeProperty("operationMode", new StringLiteralType("'Import'"), TypePropertyFlags.Required)}, null);
            ElasticPoolProperties = new NamedObjectType("ElasticPoolProperties", new ITypeProperty[]{new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly), new TypeProperty("edition", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'"), new StringLiteralType("'GeneralPurpose'"), new StringLiteralType("'BusinessCritical'")), TypePropertyFlags.None), new TypeProperty("dtu", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("databaseDtuMax", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("databaseDtuMin", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageMB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("zoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ServerCommunicationLinkProperties = new NamedObjectType("ServerCommunicationLinkProperties", new ITypeProperty[]{new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("partnerServer", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ServerProperties = new NamedObjectType("ServerProperties", new ITypeProperty[]{new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("version", UnionType.Create(new StringLiteralType("'2.0'"), new StringLiteralType("'12.0'")), TypePropertyFlags.None), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("externalAdministratorSid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("externalAdministratorLogin", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Ready'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.ReadOnly)}, null);
            ServerAdministratorProperties = new NamedObjectType("ServerAdministratorProperties", new ITypeProperty[]{new TypeProperty("administratorType", new StringLiteralType("'ActiveDirectory'"), TypePropertyFlags.Required), new TypeProperty("login", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("sid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            AdvisorProperties = new NamedObjectType("AdvisorProperties", new ITypeProperty[]{new TypeProperty("advisorStatus", UnionType.Create(new StringLiteralType("'GA'"), new StringLiteralType("'PublicPreview'"), new StringLiteralType("'LimitedPublicPreview'"), new StringLiteralType("'PrivatePreview'")), TypePropertyFlags.ReadOnly), new TypeProperty("autoExecuteValue", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Default'")), TypePropertyFlags.Required), new TypeProperty("recommendationsStatus", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastChecked", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ServerTableAuditingPolicyProperties = new NamedObjectType("ServerTableAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("auditingState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("auditLogsTableName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("eventTypesToAudit", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fullAuditLogsTableName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountResourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountSecondaryKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageTableEndpoint", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DatabaseTableAuditingPolicyProperties = new NamedObjectType("DatabaseTableAuditingPolicyProperties", new ITypeProperty[]{new TypeProperty("auditingState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("auditLogsTableName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("eventTypesToAudit", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fullAuditLogsTableName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountResourceGroupName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountSecondaryKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountSubscriptionId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageTableEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("useServerDefault", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DatabaseConnectionPolicyProperties = new NamedObjectType("DatabaseConnectionPolicyProperties", new ITypeProperty[]{new TypeProperty("securityEnabledAccess", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyDnsName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyPort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("visibility", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("useServerDefault", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("redirectionState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_servers = new ResourceType("Microsoft.Sql/servers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers);
            ResourceType_servers_connectionPolicies = new ResourceType("Microsoft.Sql/servers/connectionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/connectionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerConnectionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_connectionPolicies);
            ResourceType_servers_firewallRules = new ResourceType("Microsoft.Sql/servers/firewallRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/firewallRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FirewallRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_firewallRules);
            ResourceType_servers_databases = new ResourceType("Microsoft.Sql/servers/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases);
            ResourceType_servers_elasticPools = new ResourceType("Microsoft.Sql/servers/elasticPools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/elasticPools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ElasticPoolProperties, TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_elasticPools);
            ResourceType_servers_communicationLinks = new ResourceType("Microsoft.Sql/servers/communicationLinks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/communicationLinks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerCommunicationLinkProperties, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_communicationLinks);
            ResourceType_servers_administrators = new ResourceType("Microsoft.Sql/servers/administrators", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/administrators'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerAdministratorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_administrators);
            ResourceType_servers_advisors = new ResourceType("Microsoft.Sql/servers/advisors", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/advisors'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AdvisorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_advisors);
            ResourceType_servers_disasterRecoveryConfiguration = new ResourceType("Microsoft.Sql/servers/disasterRecoveryConfiguration", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/disasterRecoveryConfiguration'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_disasterRecoveryConfiguration);
            ResourceType_servers_auditingPolicies = new ResourceType("Microsoft.Sql/servers/auditingPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/auditingPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerTableAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_auditingPolicies);
            ResourceType_servers_databases_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/databases/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseSecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_securityAlertPolicies);
            ResourceType_servers_databases_dataMaskingPolicies = new ResourceType("Microsoft.Sql/servers/databases/dataMaskingPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/dataMaskingPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DataMaskingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_dataMaskingPolicies);
            ResourceType_servers_databases_geoBackupPolicies = new ResourceType("Microsoft.Sql/servers/databases/geoBackupPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/geoBackupPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => GeoBackupPolicyProperties, TypePropertyFlags.Required), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_geoBackupPolicies);
            ResourceType_servers_databases_extensions = new ResourceType("Microsoft.Sql/servers/databases/extensions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/extensions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ImportExtensionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_extensions);
            ResourceType_servers_databases_transparentDataEncryption = new ResourceType("Microsoft.Sql/servers/databases/transparentDataEncryption", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/transparentDataEncryption'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => TransparentDataEncryptionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_transparentDataEncryption);
            ResourceType_servers_databases_advisors = new ResourceType("Microsoft.Sql/servers/databases/advisors", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/advisors'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AdvisorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_advisors);
            ResourceType_servers_databases_auditingPolicies = new ResourceType("Microsoft.Sql/servers/databases/auditingPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/auditingPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseTableAuditingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_auditingPolicies);
            ResourceType_servers_databases_connectionPolicies = new ResourceType("Microsoft.Sql/servers/databases/connectionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/connectionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseConnectionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_connectionPolicies);
            ResourceType_servers_databases_dataMaskingPolicies_rules = new ResourceType("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/dataMaskingPolicies/rules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DataMaskingRuleProperties, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2014-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_dataMaskingPolicies_rules);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers, () => InstanceLazy.Value.ResourceType_servers);
            registrar.RegisterType(ResourceTypeReference_servers_connectionPolicies, () => InstanceLazy.Value.ResourceType_servers_connectionPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_firewallRules, () => InstanceLazy.Value.ResourceType_servers_firewallRules);
            registrar.RegisterType(ResourceTypeReference_servers_databases, () => InstanceLazy.Value.ResourceType_servers_databases);
            registrar.RegisterType(ResourceTypeReference_servers_elasticPools, () => InstanceLazy.Value.ResourceType_servers_elasticPools);
            registrar.RegisterType(ResourceTypeReference_servers_communicationLinks, () => InstanceLazy.Value.ResourceType_servers_communicationLinks);
            registrar.RegisterType(ResourceTypeReference_servers_administrators, () => InstanceLazy.Value.ResourceType_servers_administrators);
            registrar.RegisterType(ResourceTypeReference_servers_advisors, () => InstanceLazy.Value.ResourceType_servers_advisors);
            registrar.RegisterType(ResourceTypeReference_servers_disasterRecoveryConfiguration, () => InstanceLazy.Value.ResourceType_servers_disasterRecoveryConfiguration);
            registrar.RegisterType(ResourceTypeReference_servers_auditingPolicies, () => InstanceLazy.Value.ResourceType_servers_auditingPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_dataMaskingPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_dataMaskingPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_geoBackupPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_geoBackupPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_extensions, () => InstanceLazy.Value.ResourceType_servers_databases_extensions);
            registrar.RegisterType(ResourceTypeReference_servers_databases_transparentDataEncryption, () => InstanceLazy.Value.ResourceType_servers_databases_transparentDataEncryption);
            registrar.RegisterType(ResourceTypeReference_servers_databases_advisors, () => InstanceLazy.Value.ResourceType_servers_databases_advisors);
            registrar.RegisterType(ResourceTypeReference_servers_databases_auditingPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_auditingPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_connectionPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_connectionPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_dataMaskingPolicies_rules, () => InstanceLazy.Value.ResourceType_servers_databases_dataMaskingPolicies_rules);
        }
        private readonly ResourceType ResourceType_servers;
        private readonly ResourceType ResourceType_servers_connectionPolicies;
        private readonly ResourceType ResourceType_servers_firewallRules;
        private readonly ResourceType ResourceType_servers_databases;
        private readonly ResourceType ResourceType_servers_elasticPools;
        private readonly ResourceType ResourceType_servers_communicationLinks;
        private readonly ResourceType ResourceType_servers_administrators;
        private readonly ResourceType ResourceType_servers_advisors;
        private readonly ResourceType ResourceType_servers_disasterRecoveryConfiguration;
        private readonly ResourceType ResourceType_servers_auditingPolicies;
        private readonly ResourceType ResourceType_servers_databases_securityAlertPolicies;
        private readonly ResourceType ResourceType_servers_databases_dataMaskingPolicies;
        private readonly ResourceType ResourceType_servers_databases_geoBackupPolicies;
        private readonly ResourceType ResourceType_servers_databases_extensions;
        private readonly ResourceType ResourceType_servers_databases_transparentDataEncryption;
        private readonly ResourceType ResourceType_servers_databases_advisors;
        private readonly ResourceType ResourceType_servers_databases_auditingPolicies;
        private readonly ResourceType ResourceType_servers_databases_connectionPolicies;
        private readonly ResourceType ResourceType_servers_databases_dataMaskingPolicies_rules;
        private readonly TypeSymbol ServerConnectionPolicyProperties;
        private readonly TypeSymbol DatabaseSecurityAlertPolicyProperties;
        private readonly TypeSymbol DataMaskingPolicyProperties;
        private readonly TypeSymbol DataMaskingRuleProperties;
        private readonly TypeSymbol FirewallRuleProperties;
        private readonly TypeSymbol GeoBackupPolicyProperties;
        private readonly TypeSymbol DatabaseProperties;
        private readonly TypeSymbol ServiceTierAdvisor;
        private readonly TypeSymbol ServiceTierAdvisorProperties;
        private readonly TypeSymbol SloUsageMetric;
        private readonly TypeSymbol TransparentDataEncryption;
        private readonly TypeSymbol TransparentDataEncryptionProperties;
        private readonly TypeSymbol RecommendedIndex;
        private readonly TypeSymbol RecommendedIndexProperties;
        private readonly TypeSymbol OperationImpact;
        private readonly TypeSymbol ImportExtensionProperties;
        private readonly TypeSymbol ElasticPoolProperties;
        private readonly TypeSymbol ServerCommunicationLinkProperties;
        private readonly TypeSymbol ServerProperties;
        private readonly TypeSymbol ServerAdministratorProperties;
        private readonly TypeSymbol AdvisorProperties;
        private readonly TypeSymbol ServerTableAuditingPolicyProperties;
        private readonly TypeSymbol DatabaseTableAuditingPolicyProperties;
        private readonly TypeSymbol DatabaseConnectionPolicyProperties;
    }
}
