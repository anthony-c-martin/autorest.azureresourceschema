// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2014_04_01
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2014-04-01";
        private static readonly ResourceTypeReference ResourceTypeReference_servers_connectionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "connectionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_firewallRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "firewallRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_communicationLinks = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "communicationLinks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_dataMaskingPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "dataMaskingPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_geoBackupPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "geoBackupPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_extensions = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "extensions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_transparentDataEncryption = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "transparentDataEncryption"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_dataMaskingPolicies_rules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "dataMaskingPolicies", "rules"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2014_04_01> InstanceLazy = new Lazy<Microsoft_Sql_2014_04_01>(() => new Microsoft_Sql_2014_04_01());
        private Microsoft_Sql_2014_04_01()
        {
            ServerConnectionPolicyProperties = new NamedObjectType("ServerConnectionPolicyProperties", new ITypeProperty[]{new TypeProperty("connectionType", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            DatabaseSecurityAlertPolicyProperties = new NamedObjectType("DatabaseSecurityAlertPolicyProperties", new ITypeProperty[]{new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("disabledAlerts", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("emailAddresses", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("emailAccountAdmins", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("useServerDefault", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DataMaskingPolicyProperties = new NamedObjectType("DataMaskingPolicyProperties", new ITypeProperty[]{new TypeProperty("dataMaskingState", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("exemptPrincipals", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            DataMaskingRuleProperties = new NamedObjectType("DataMaskingRuleProperties", new ITypeProperty[]{new TypeProperty("aliasName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ruleState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("schemaName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tableName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("columnName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("maskingFunction", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("numberFrom", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("numberTo", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("prefixSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("suffixSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replacementString", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            FirewallRuleProperties = new NamedObjectType("FirewallRuleProperties", new ITypeProperty[]{new TypeProperty("startIpAddress", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("endIpAddress", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            GeoBackupPolicyProperties = new NamedObjectType("GeoBackupPolicyProperties", new ITypeProperty[]{new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ImportExtensionProperties = new NamedObjectType("ImportExtensionProperties", new ITypeProperty[]{new TypeProperty("storageKeyType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("storageKey", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("storageUri", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("authenticationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("operationMode", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            ServerCommunicationLinkProperties = new NamedObjectType("ServerCommunicationLinkProperties", new ITypeProperty[]{new TypeProperty("partnerServer", LanguageConstants.String, TypePropertyFlags.Required)}, null, TypePropertyFlags.None);
            TransparentDataEncryptionProperties = new NamedObjectType("TransparentDataEncryptionProperties", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.None)}, null, TypePropertyFlags.None);
            ResourceType_servers_connectionPolicies = new ResourceType("Microsoft.Sql/servers/connectionPolicies", new ITypeProperty[]{new LazyTypeProperty("properties", () => ServerConnectionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_connectionPolicies);
            ResourceType_servers_firewallRules = new ResourceType("Microsoft.Sql/servers/firewallRules", new ITypeProperty[]{new LazyTypeProperty("properties", () => FirewallRuleProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_firewallRules);
            ResourceType_servers_communicationLinks = new ResourceType("Microsoft.Sql/servers/communicationLinks", new ITypeProperty[]{new LazyTypeProperty("properties", () => ServerCommunicationLinkProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_communicationLinks);
            ResourceType_servers_databases_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/databases/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseSecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_securityAlertPolicies);
            ResourceType_servers_databases_dataMaskingPolicies = new ResourceType("Microsoft.Sql/servers/databases/dataMaskingPolicies", new ITypeProperty[]{new LazyTypeProperty("properties", () => DataMaskingPolicyProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_dataMaskingPolicies);
            ResourceType_servers_databases_geoBackupPolicies = new ResourceType("Microsoft.Sql/servers/databases/geoBackupPolicies", new ITypeProperty[]{new LazyTypeProperty("properties", () => GeoBackupPolicyProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_geoBackupPolicies);
            ResourceType_servers_databases_extensions = new ResourceType("Microsoft.Sql/servers/databases/extensions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ImportExtensionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_extensions);
            ResourceType_servers_databases_transparentDataEncryption = new ResourceType("Microsoft.Sql/servers/databases/transparentDataEncryption", new ITypeProperty[]{new LazyTypeProperty("properties", () => TransparentDataEncryptionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_transparentDataEncryption);
            ResourceType_servers_databases_dataMaskingPolicies_rules = new ResourceType("Microsoft.Sql/servers/databases/dataMaskingPolicies/rules", new ITypeProperty[]{new LazyTypeProperty("properties", () => DataMaskingRuleProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_servers_databases_dataMaskingPolicies_rules);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers_connectionPolicies, () => InstanceLazy.Value.ResourceType_servers_connectionPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_firewallRules, () => InstanceLazy.Value.ResourceType_servers_firewallRules);
            registrar.RegisterType(ResourceTypeReference_servers_communicationLinks, () => InstanceLazy.Value.ResourceType_servers_communicationLinks);
            registrar.RegisterType(ResourceTypeReference_servers_databases_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_dataMaskingPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_dataMaskingPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_geoBackupPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_geoBackupPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_extensions, () => InstanceLazy.Value.ResourceType_servers_databases_extensions);
            registrar.RegisterType(ResourceTypeReference_servers_databases_transparentDataEncryption, () => InstanceLazy.Value.ResourceType_servers_databases_transparentDataEncryption);
            registrar.RegisterType(ResourceTypeReference_servers_databases_dataMaskingPolicies_rules, () => InstanceLazy.Value.ResourceType_servers_databases_dataMaskingPolicies_rules);
        }
        private readonly ResourceType ResourceType_servers_connectionPolicies;
        private readonly ResourceType ResourceType_servers_firewallRules;
        private readonly ResourceType ResourceType_servers_communicationLinks;
        private readonly ResourceType ResourceType_servers_databases_securityAlertPolicies;
        private readonly ResourceType ResourceType_servers_databases_dataMaskingPolicies;
        private readonly ResourceType ResourceType_servers_databases_geoBackupPolicies;
        private readonly ResourceType ResourceType_servers_databases_extensions;
        private readonly ResourceType ResourceType_servers_databases_transparentDataEncryption;
        private readonly ResourceType ResourceType_servers_databases_dataMaskingPolicies_rules;
        private readonly TypeSymbol ServerConnectionPolicyProperties;
        private readonly TypeSymbol DatabaseSecurityAlertPolicyProperties;
        private readonly TypeSymbol DataMaskingPolicyProperties;
        private readonly TypeSymbol DataMaskingRuleProperties;
        private readonly TypeSymbol FirewallRuleProperties;
        private readonly TypeSymbol GeoBackupPolicyProperties;
        private readonly TypeSymbol ImportExtensionProperties;
        private readonly TypeSymbol ServerCommunicationLinkProperties;
        private readonly TypeSymbol TransparentDataEncryptionProperties;
    }
}
