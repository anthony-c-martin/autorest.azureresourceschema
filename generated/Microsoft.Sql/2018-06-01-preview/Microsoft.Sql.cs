// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Sql_2018_06_01_preview
    {
        private const string ProviderNamespace = "Microsoft.Sql";
        private const string ApiVersion = "2018-06-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_instancePools = new ResourceTypeReference(ProviderNamespace, new[]{"instancePools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_vulnerabilityAssessments = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "vulnerabilityAssessments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_vulnerabilityAssessments = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "vulnerabilityAssessments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_privateEndpointConnections = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "privateEndpointConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_administrators = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "administrators"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_backupLongTermRetentionPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "backupLongTermRetentionPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases", "securityAlertPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_managedInstances_databases_schemas_tables_columns_sensitivityLabels = new ResourceTypeReference(ProviderNamespace, new[]{"managedInstances", "databases", "schemas", "tables", "columns", "sensitivityLabels"}, ApiVersion);
        private static Lazy<Microsoft_Sql_2018_06_01_preview> InstanceLazy = new Lazy<Microsoft_Sql_2018_06_01_preview>(() => new Microsoft_Sql_2018_06_01_preview());
        private Microsoft_Sql_2018_06_01_preview()
        {
            ManagedInstanceVulnerabilityAssessmentProperties = new NamedObjectType("ManagedInstanceVulnerabilityAssessmentProperties", new ITypeProperty[]{new TypeProperty("storageContainerPath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("storageContainerSasKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("recurringScans", () => VulnerabilityAssessmentRecurringScansProperties, TypePropertyFlags.None)}, null);
            VulnerabilityAssessmentRecurringScansProperties = new NamedObjectType("VulnerabilityAssessmentRecurringScansProperties", new ITypeProperty[]{new TypeProperty("isEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emailSubscriptionAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("emails", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            ServerVulnerabilityAssessmentProperties = new NamedObjectType("ServerVulnerabilityAssessmentProperties", new ITypeProperty[]{new TypeProperty("storageContainerPath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("storageContainerSasKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("recurringScans", () => VulnerabilityAssessmentRecurringScansProperties, TypePropertyFlags.None)}, null);
            SensitivityLabelProperties = new NamedObjectType("SensitivityLabelProperties", new ITypeProperty[]{new TypeProperty("labelName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labelId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("informationType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("informationTypeId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isDisabled", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("rank", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Low'"), new StringLiteralType("'Medium'"), new StringLiteralType("'High'"), new StringLiteralType("'Critical'")), TypePropertyFlags.None)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            InstancePoolProperties = new NamedObjectType("InstancePoolProperties", new ITypeProperty[]{new TypeProperty("subnetId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("vCores", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.Required)}, null);
            PrivateEndpointConnectionProperties = new NamedObjectType("PrivateEndpointConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("privateEndpoint", () => PrivateEndpointProperty, TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnectionState", () => PrivateLinkServiceConnectionStateProperty, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateEndpointProperty = new NamedObjectType("PrivateEndpointProperty", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PrivateLinkServiceConnectionStateProperty = new NamedObjectType("PrivateLinkServiceConnectionStateProperty", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("actionsRequired", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            BaseLongTermRetentionPolicyProperties = new NamedObjectType("BaseLongTermRetentionPolicyProperties", new ITypeProperty[]{new TypeProperty("weeklyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("monthlyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("yearlyRetention", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("weekOfYear", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            SecurityAlertPolicyProperties = new NamedObjectType("SecurityAlertPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'New'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("disabledAlerts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAccountAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceIdentity = new NamedObjectType("ResourceIdentity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ManagedInstanceProperties = new NamedObjectType("ManagedInstanceProperties", new ITypeProperty[]{new TypeProperty("managedInstanceCreateMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'PointInTimeRestore'")), TypePropertyFlags.None), new TypeProperty("fullyQualifiedDomainName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("licenseType", UnionType.Create(new StringLiteralType("'LicenseIncluded'"), new StringLiteralType("'BasePrice'")), TypePropertyFlags.None), new TypeProperty("vCores", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageSizeInGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsZone", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("dnsZonePartner", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicDataEndpointEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sourceManagedInstanceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("proxyOverride", UnionType.Create(new StringLiteralType("'Proxy'"), new StringLiteralType("'Redirect'"), new StringLiteralType("'Default'")), TypePropertyFlags.None), new TypeProperty("timezoneId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("instancePoolId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maintenanceConfigurationId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("minimalTlsVersion", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ManagedDatabaseProperties = new NamedObjectType("ManagedDatabaseProperties", new ITypeProperty[]{new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Online'"), new StringLiteralType("'Offline'"), new StringLiteralType("'Shutdown'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Inaccessible'"), new StringLiteralType("'Restoring'"), new StringLiteralType("'Updating'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("earliestRestorePoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("defaultSecondaryLocation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("catalogCollation", UnionType.Create(new StringLiteralType("'DATABASE_DEFAULT'"), new StringLiteralType("'SQL_Latin1_General_CP1_CI_AS'")), TypePropertyFlags.None), new TypeProperty("createMode", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'RestoreExternalBackup'"), new StringLiteralType("'PointInTimeRestore'"), new StringLiteralType("'Recovery'"), new StringLiteralType("'RestoreLongTermRetentionBackup'")), TypePropertyFlags.None), new TypeProperty("storageContainerUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("restorableDroppedDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageContainerSasToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("failoverGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("recoverableDatabaseId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("longTermRetentionBackupResourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AdministratorProperties = new NamedObjectType("AdministratorProperties", new ITypeProperty[]{new TypeProperty("administratorType", new StringLiteralType("'ActiveDirectory'"), TypePropertyFlags.Required), new TypeProperty("login", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("sid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceType_instancePools = new ResourceType("Microsoft.Sql/instancePools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/instancePools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => InstancePoolProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_instancePools);
            ResourceType_managedInstances = new ResourceType("Microsoft.Sql/managedInstances", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ResourceIdentity, TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedInstanceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances);
            ResourceType_managedInstances_vulnerabilityAssessments = new ResourceType("Microsoft.Sql/managedInstances/vulnerabilityAssessments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/vulnerabilityAssessments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagedInstanceVulnerabilityAssessmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_vulnerabilityAssessments);
            ResourceType_servers_vulnerabilityAssessments = new ResourceType("Microsoft.Sql/servers/vulnerabilityAssessments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/vulnerabilityAssessments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServerVulnerabilityAssessmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_vulnerabilityAssessments);
            ResourceType_servers_privateEndpointConnections = new ResourceType("Microsoft.Sql/servers/privateEndpointConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/privateEndpointConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => PrivateEndpointConnectionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_privateEndpointConnections);
            ResourceType_managedInstances_databases = new ResourceType("Microsoft.Sql/managedInstances/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ManagedDatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases);
            ResourceType_servers_administrators = new ResourceType("Microsoft.Sql/servers/administrators", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/administrators'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AdministratorProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_administrators);
            ResourceType_managedInstances_databases_backupLongTermRetentionPolicies = new ResourceType("Microsoft.Sql/managedInstances/databases/backupLongTermRetentionPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/backupLongTermRetentionPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => BaseLongTermRetentionPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_backupLongTermRetentionPolicies);
            ResourceType_servers_databases_securityAlertPolicies = new ResourceType("Microsoft.Sql/servers/databases/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/servers/databases/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases_securityAlertPolicies);
            ResourceType_managedInstances_databases_schemas_tables_columns_sensitivityLabels = new ResourceType("Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SensitivityLabelProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_managedInstances_databases_schemas_tables_columns_sensitivityLabels);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_instancePools, () => InstanceLazy.Value.ResourceType_instancePools);
            registrar.RegisterType(ResourceTypeReference_managedInstances, () => InstanceLazy.Value.ResourceType_managedInstances);
            registrar.RegisterType(ResourceTypeReference_managedInstances_vulnerabilityAssessments, () => InstanceLazy.Value.ResourceType_managedInstances_vulnerabilityAssessments);
            registrar.RegisterType(ResourceTypeReference_servers_vulnerabilityAssessments, () => InstanceLazy.Value.ResourceType_servers_vulnerabilityAssessments);
            registrar.RegisterType(ResourceTypeReference_servers_privateEndpointConnections, () => InstanceLazy.Value.ResourceType_servers_privateEndpointConnections);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases, () => InstanceLazy.Value.ResourceType_managedInstances_databases);
            registrar.RegisterType(ResourceTypeReference_servers_administrators, () => InstanceLazy.Value.ResourceType_servers_administrators);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_backupLongTermRetentionPolicies, () => InstanceLazy.Value.ResourceType_managedInstances_databases_backupLongTermRetentionPolicies);
            registrar.RegisterType(ResourceTypeReference_servers_databases_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_databases_securityAlertPolicies);
            registrar.RegisterType(ResourceTypeReference_managedInstances_databases_schemas_tables_columns_sensitivityLabels, () => InstanceLazy.Value.ResourceType_managedInstances_databases_schemas_tables_columns_sensitivityLabels);
        }
        private readonly ResourceType ResourceType_instancePools;
        private readonly ResourceType ResourceType_managedInstances;
        private readonly ResourceType ResourceType_managedInstances_vulnerabilityAssessments;
        private readonly ResourceType ResourceType_servers_vulnerabilityAssessments;
        private readonly ResourceType ResourceType_servers_privateEndpointConnections;
        private readonly ResourceType ResourceType_managedInstances_databases;
        private readonly ResourceType ResourceType_servers_administrators;
        private readonly ResourceType ResourceType_managedInstances_databases_backupLongTermRetentionPolicies;
        private readonly ResourceType ResourceType_servers_databases_securityAlertPolicies;
        private readonly ResourceType ResourceType_managedInstances_databases_schemas_tables_columns_sensitivityLabels;
        private readonly TypeSymbol ManagedInstanceVulnerabilityAssessmentProperties;
        private readonly TypeSymbol VulnerabilityAssessmentRecurringScansProperties;
        private readonly TypeSymbol ServerVulnerabilityAssessmentProperties;
        private readonly TypeSymbol SensitivityLabelProperties;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol InstancePoolProperties;
        private readonly TypeSymbol PrivateEndpointConnectionProperties;
        private readonly TypeSymbol PrivateEndpointProperty;
        private readonly TypeSymbol PrivateLinkServiceConnectionStateProperty;
        private readonly TypeSymbol BaseLongTermRetentionPolicyProperties;
        private readonly TypeSymbol SecurityAlertPolicyProperties;
        private readonly TypeSymbol ResourceIdentity;
        private readonly TypeSymbol ManagedInstanceProperties;
        private readonly TypeSymbol ManagedDatabaseProperties;
        private readonly TypeSymbol AdministratorProperties;
    }
}
