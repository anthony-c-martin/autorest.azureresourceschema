// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DocumentDB_2019_08_01
    {
        private const string ProviderNamespace = "Microsoft.DocumentDB";
        private const string ApiVersion = "2019-08-01";
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_mongodbDatabases = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "mongodbDatabases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_tables = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "tables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_cassandraKeyspaces = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "cassandraKeyspaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_gremlinDatabases = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "gremlinDatabases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_notebookWorkspaces = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "notebookWorkspaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_containers = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "containers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_mongodbDatabases_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "mongodbDatabases", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_mongodbDatabases_collections = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "mongodbDatabases", "collections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_tables_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "tables", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_cassandraKeyspaces_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "cassandraKeyspaces", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "cassandraKeyspaces", "tables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_gremlinDatabases_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "gremlinDatabases", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "gremlinDatabases", "graphs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_containers_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "containers", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_containers_storedProcedures = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "containers", "storedProcedures"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_containers_userDefinedFunctions = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "containers", "userDefinedFunctions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_sqlDatabases_containers_triggers = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "sqlDatabases", "containers", "triggers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_mongodbDatabases_collections_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "mongodbDatabases", "collections", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "cassandraKeyspaces", "tables", "throughputSettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs_throughputSettings = new ResourceTypeReference(ProviderNamespace, new[]{"databaseAccounts", "gremlinDatabases", "graphs", "throughputSettings"}, ApiVersion);
        private static Lazy<Microsoft_DocumentDB_2019_08_01> InstanceLazy = new Lazy<Microsoft_DocumentDB_2019_08_01>(() => new Microsoft_DocumentDB_2019_08_01());
        private Microsoft_DocumentDB_2019_08_01()
        {
            DatabaseAccountCreateUpdateProperties = new NamedObjectType("DatabaseAccountCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("consistencyPolicy", () => ConsistencyPolicy, TypePropertyFlags.None), new LazyTypeProperty("locations", () => new TypedArrayType(Location), TypePropertyFlags.Required), new TypeProperty("databaseAccountOfferType", new StringLiteralType("'Standard'"), TypePropertyFlags.Required), new TypeProperty("ipRangeFilter", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isVirtualNetworkFilterEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAutomaticFailover", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("capabilities", () => new TypedArrayType(Capability), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkRules", () => new TypedArrayType(VirtualNetworkRule), TypePropertyFlags.None), new TypeProperty("enableMultipleWriteLocations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableCassandraConnector", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("connectorOffer", new StringLiteralType("'Small'"), TypePropertyFlags.None), new TypeProperty("disableKeyBasedMetadataWriteAccess", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ConsistencyPolicy = new NamedObjectType("ConsistencyPolicy", new ITypeProperty[]{new TypeProperty("defaultConsistencyLevel", UnionType.Create(new StringLiteralType("'Eventual'"), new StringLiteralType("'Session'"), new StringLiteralType("'BoundedStaleness'"), new StringLiteralType("'Strong'"), new StringLiteralType("'ConsistentPrefix'")), TypePropertyFlags.Required), new TypeProperty("maxStalenessPrefix", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxIntervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            Location = new NamedObjectType("Location", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("locationName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("documentEndpoint", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("failoverPriority", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("isZoneRedundant", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            Capability = new NamedObjectType("Capability", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkRule = new NamedObjectType("VirtualNetworkRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ignoreMissingVNetServiceEndpoint", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            SqlDatabaseCreateUpdateProperties = new NamedObjectType("SqlDatabaseCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => SqlDatabaseResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            SqlDatabaseResource = new NamedObjectType("SqlDatabaseResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ThroughputSettingsUpdateProperties = new NamedObjectType("ThroughputSettingsUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => ThroughputSettingsResource, TypePropertyFlags.Required)}, null);
            ThroughputSettingsResource = new NamedObjectType("ThroughputSettingsResource", new ITypeProperty[]{new TypeProperty("throughput", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("minimumThroughput", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("offerReplacePending", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SqlContainerCreateUpdateProperties = new NamedObjectType("SqlContainerCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => SqlContainerResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            SqlContainerResource = new NamedObjectType("SqlContainerResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("indexingPolicy", () => IndexingPolicy, TypePropertyFlags.None), new LazyTypeProperty("partitionKey", () => ContainerPartitionKey, TypePropertyFlags.None), new TypeProperty("defaultTtl", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("uniqueKeyPolicy", () => UniqueKeyPolicy, TypePropertyFlags.None), new LazyTypeProperty("conflictResolutionPolicy", () => ConflictResolutionPolicy, TypePropertyFlags.None)}, null);
            IndexingPolicy = new NamedObjectType("IndexingPolicy", new ITypeProperty[]{new TypeProperty("automatic", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("indexingMode", UnionType.Create(new StringLiteralType("'Consistent'"), new StringLiteralType("'Lazy'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new LazyTypeProperty("includedPaths", () => new TypedArrayType(IncludedPath), TypePropertyFlags.None), new LazyTypeProperty("excludedPaths", () => new TypedArrayType(ExcludedPath), TypePropertyFlags.None), new LazyTypeProperty("compositeIndexes", () => new TypedArrayType(new TypedArrayType(CompositePath)), TypePropertyFlags.None), new LazyTypeProperty("spatialIndexes", () => new TypedArrayType(SpatialSpec), TypePropertyFlags.None)}, null);
            IncludedPath = new NamedObjectType("IncludedPath", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("indexes", () => new TypedArrayType(Indexes), TypePropertyFlags.None)}, null);
            Indexes = new NamedObjectType("Indexes", new ITypeProperty[]{new TypeProperty("dataType", UnionType.Create(new StringLiteralType("'String'"), new StringLiteralType("'Number'"), new StringLiteralType("'Point'"), new StringLiteralType("'Polygon'"), new StringLiteralType("'LineString'"), new StringLiteralType("'MultiPolygon'")), TypePropertyFlags.None), new TypeProperty("precision", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("kind", UnionType.Create(new StringLiteralType("'Hash'"), new StringLiteralType("'Range'"), new StringLiteralType("'Spatial'")), TypePropertyFlags.None)}, null);
            ExcludedPath = new NamedObjectType("ExcludedPath", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CompositePath = new NamedObjectType("CompositePath", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("order", UnionType.Create(new StringLiteralType("'Ascending'"), new StringLiteralType("'Descending'")), TypePropertyFlags.None)}, null);
            SpatialSpec = new NamedObjectType("SpatialSpec", new ITypeProperty[]{new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("types", new TypedArrayType(UnionType.Create(new StringLiteralType("'Point'"), new StringLiteralType("'LineString'"), new StringLiteralType("'Polygon'"), new StringLiteralType("'MultiPolygon'"))), TypePropertyFlags.None)}, null);
            ContainerPartitionKey = new NamedObjectType("ContainerPartitionKey", new ITypeProperty[]{new TypeProperty("paths", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("kind", UnionType.Create(new StringLiteralType("'Hash'"), new StringLiteralType("'Range'")), TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            UniqueKeyPolicy = new NamedObjectType("UniqueKeyPolicy", new ITypeProperty[]{new LazyTypeProperty("uniqueKeys", () => new TypedArrayType(UniqueKey), TypePropertyFlags.None)}, null);
            UniqueKey = new NamedObjectType("UniqueKey", new ITypeProperty[]{new TypeProperty("paths", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            ConflictResolutionPolicy = new NamedObjectType("ConflictResolutionPolicy", new ITypeProperty[]{new TypeProperty("mode", UnionType.Create(new StringLiteralType("'LastWriterWins'"), new StringLiteralType("'Custom'")), TypePropertyFlags.None), new TypeProperty("conflictResolutionPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("conflictResolutionProcedure", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SqlStoredProcedureCreateUpdateProperties = new NamedObjectType("SqlStoredProcedureCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => SqlStoredProcedureResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            SqlStoredProcedureResource = new NamedObjectType("SqlStoredProcedureResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("body", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SqlUserDefinedFunctionCreateUpdateProperties = new NamedObjectType("SqlUserDefinedFunctionCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => SqlUserDefinedFunctionResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            SqlUserDefinedFunctionResource = new NamedObjectType("SqlUserDefinedFunctionResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("body", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SqlTriggerCreateUpdateProperties = new NamedObjectType("SqlTriggerCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => SqlTriggerResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            SqlTriggerResource = new NamedObjectType("SqlTriggerResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("body", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("triggerType", UnionType.Create(new StringLiteralType("'Pre'"), new StringLiteralType("'Post'")), TypePropertyFlags.None), new TypeProperty("triggerOperation", UnionType.Create(new StringLiteralType("'All'"), new StringLiteralType("'Create'"), new StringLiteralType("'Update'"), new StringLiteralType("'Delete'"), new StringLiteralType("'Replace'")), TypePropertyFlags.None)}, null);
            MongoDBDatabaseCreateUpdateProperties = new NamedObjectType("MongoDBDatabaseCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => MongoDBDatabaseResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            MongoDBDatabaseResource = new NamedObjectType("MongoDBDatabaseResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            MongoDBCollectionCreateUpdateProperties = new NamedObjectType("MongoDBCollectionCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => MongoDBCollectionResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            MongoDBCollectionResource = new NamedObjectType("MongoDBCollectionResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("shardKey", new NamedObjectType("shardKey", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("indexes", () => new TypedArrayType(MongoIndex), TypePropertyFlags.None)}, null);
            MongoIndex = new NamedObjectType("MongoIndex", new ITypeProperty[]{new LazyTypeProperty("key", () => MongoIndexKeys, TypePropertyFlags.None), new LazyTypeProperty("options", () => MongoIndexOptions, TypePropertyFlags.None)}, null);
            MongoIndexKeys = new NamedObjectType("MongoIndexKeys", new ITypeProperty[]{new TypeProperty("keys", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            MongoIndexOptions = new NamedObjectType("MongoIndexOptions", new ITypeProperty[]{new TypeProperty("expireAfterSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("unique", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            TableCreateUpdateProperties = new NamedObjectType("TableCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => TableResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            TableResource = new NamedObjectType("TableResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            CassandraKeyspaceCreateUpdateProperties = new NamedObjectType("CassandraKeyspaceCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => CassandraKeyspaceResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            CassandraKeyspaceResource = new NamedObjectType("CassandraKeyspaceResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            CassandraTableCreateUpdateProperties = new NamedObjectType("CassandraTableCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => CassandraTableResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            CassandraTableResource = new NamedObjectType("CassandraTableResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("defaultTtl", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("schema", () => CassandraSchema, TypePropertyFlags.None)}, null);
            CassandraSchema = new NamedObjectType("CassandraSchema", new ITypeProperty[]{new LazyTypeProperty("columns", () => new TypedArrayType(Column), TypePropertyFlags.None), new LazyTypeProperty("partitionKeys", () => new TypedArrayType(CassandraPartitionKey), TypePropertyFlags.None), new LazyTypeProperty("clusterKeys", () => new TypedArrayType(ClusterKey), TypePropertyFlags.None)}, null);
            Column = new NamedObjectType("Column", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CassandraPartitionKey = new NamedObjectType("CassandraPartitionKey", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ClusterKey = new NamedObjectType("ClusterKey", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("orderBy", LanguageConstants.String, TypePropertyFlags.None)}, null);
            GremlinDatabaseCreateUpdateProperties = new NamedObjectType("GremlinDatabaseCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => GremlinDatabaseResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            GremlinDatabaseResource = new NamedObjectType("GremlinDatabaseResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            GremlinGraphCreateUpdateProperties = new NamedObjectType("GremlinGraphCreateUpdateProperties", new ITypeProperty[]{new LazyTypeProperty("resource", () => GremlinGraphResource, TypePropertyFlags.Required), new TypeProperty("options", new NamedObjectType("options", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.Required)}, null);
            GremlinGraphResource = new NamedObjectType("GremlinGraphResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("indexingPolicy", () => IndexingPolicy, TypePropertyFlags.None), new LazyTypeProperty("partitionKey", () => ContainerPartitionKey, TypePropertyFlags.None), new TypeProperty("defaultTtl", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("uniqueKeyPolicy", () => UniqueKeyPolicy, TypePropertyFlags.None), new LazyTypeProperty("conflictResolutionPolicy", () => ConflictResolutionPolicy, TypePropertyFlags.None)}, null);
            ResourceType_databaseAccounts = new ResourceType("Microsoft.DocumentDB/databaseAccounts", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("kind", UnionType.Create(new StringLiteralType("'GlobalDocumentDB'"), new StringLiteralType("'MongoDB'"), new StringLiteralType("'Parse'")), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DatabaseAccountCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts);
            ResourceType_databaseAccounts_sqlDatabases = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlDatabaseCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases);
            ResourceType_databaseAccounts_mongodbDatabases = new ResourceType("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/mongodbDatabases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => MongoDBDatabaseCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_mongodbDatabases);
            ResourceType_databaseAccounts_tables = new ResourceType("Microsoft.DocumentDB/databaseAccounts/tables", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/tables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => TableCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_tables);
            ResourceType_databaseAccounts_cassandraKeyspaces = new ResourceType("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CassandraKeyspaceCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_cassandraKeyspaces);
            ResourceType_databaseAccounts_gremlinDatabases = new ResourceType("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/gremlinDatabases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => GremlinDatabaseCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_gremlinDatabases);
            ResourceType_databaseAccounts_notebookWorkspaces = new ResourceType("Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/notebookWorkspaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_notebookWorkspaces);
            ResourceType_databaseAccounts_sqlDatabases_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_throughputSettings);
            ResourceType_databaseAccounts_sqlDatabases_containers = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlContainerCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_containers);
            ResourceType_databaseAccounts_mongodbDatabases_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_mongodbDatabases_throughputSettings);
            ResourceType_databaseAccounts_mongodbDatabases_collections = new ResourceType("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => MongoDBCollectionCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_mongodbDatabases_collections);
            ResourceType_databaseAccounts_tables_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/tables/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_tables_throughputSettings);
            ResourceType_databaseAccounts_cassandraKeyspaces_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_cassandraKeyspaces_throughputSettings);
            ResourceType_databaseAccounts_cassandraKeyspaces_tables = new ResourceType("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/tables", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/tables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CassandraTableCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables);
            ResourceType_databaseAccounts_gremlinDatabases_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_gremlinDatabases_throughputSettings);
            ResourceType_databaseAccounts_gremlinDatabases_graphs = new ResourceType("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => GremlinGraphCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs);
            ResourceType_databaseAccounts_sqlDatabases_containers_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_containers_throughputSettings);
            ResourceType_databaseAccounts_sqlDatabases_containers_storedProcedures = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlStoredProcedureCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_containers_storedProcedures);
            ResourceType_databaseAccounts_sqlDatabases_containers_userDefinedFunctions = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlUserDefinedFunctionCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_containers_userDefinedFunctions);
            ResourceType_databaseAccounts_sqlDatabases_containers_triggers = new ResourceType("Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SqlTriggerCreateUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_sqlDatabases_containers_triggers);
            ResourceType_databaseAccounts_mongodbDatabases_collections_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_mongodbDatabases_collections_throughputSettings);
            ResourceType_databaseAccounts_cassandraKeyspaces_tables_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/tables/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/tables/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables_throughputSettings);
            ResourceType_databaseAccounts_gremlinDatabases_graphs_throughputSettings = new ResourceType("Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs/throughputSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs/throughputSettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ThroughputSettingsUpdateProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-08-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs_throughputSettings);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_databaseAccounts, () => InstanceLazy.Value.ResourceType_databaseAccounts);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_mongodbDatabases, () => InstanceLazy.Value.ResourceType_databaseAccounts_mongodbDatabases);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_tables, () => InstanceLazy.Value.ResourceType_databaseAccounts_tables);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_cassandraKeyspaces, () => InstanceLazy.Value.ResourceType_databaseAccounts_cassandraKeyspaces);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_gremlinDatabases, () => InstanceLazy.Value.ResourceType_databaseAccounts_gremlinDatabases);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_notebookWorkspaces, () => InstanceLazy.Value.ResourceType_databaseAccounts_notebookWorkspaces);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_containers, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_containers);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_mongodbDatabases_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_mongodbDatabases_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_mongodbDatabases_collections, () => InstanceLazy.Value.ResourceType_databaseAccounts_mongodbDatabases_collections);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_tables_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_tables_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_cassandraKeyspaces_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_cassandraKeyspaces_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables, () => InstanceLazy.Value.ResourceType_databaseAccounts_cassandraKeyspaces_tables);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_gremlinDatabases_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_gremlinDatabases_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs, () => InstanceLazy.Value.ResourceType_databaseAccounts_gremlinDatabases_graphs);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_containers_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_containers_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_containers_storedProcedures, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_containers_storedProcedures);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_containers_userDefinedFunctions, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_containers_userDefinedFunctions);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_sqlDatabases_containers_triggers, () => InstanceLazy.Value.ResourceType_databaseAccounts_sqlDatabases_containers_triggers);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_mongodbDatabases_collections_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_mongodbDatabases_collections_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_cassandraKeyspaces_tables_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_cassandraKeyspaces_tables_throughputSettings);
            registrar.RegisterType(ResourceTypeReference_databaseAccounts_gremlinDatabases_graphs_throughputSettings, () => InstanceLazy.Value.ResourceType_databaseAccounts_gremlinDatabases_graphs_throughputSettings);
        }
        private readonly ResourceType ResourceType_databaseAccounts;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases;
        private readonly ResourceType ResourceType_databaseAccounts_mongodbDatabases;
        private readonly ResourceType ResourceType_databaseAccounts_tables;
        private readonly ResourceType ResourceType_databaseAccounts_cassandraKeyspaces;
        private readonly ResourceType ResourceType_databaseAccounts_gremlinDatabases;
        private readonly ResourceType ResourceType_databaseAccounts_notebookWorkspaces;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_containers;
        private readonly ResourceType ResourceType_databaseAccounts_mongodbDatabases_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_mongodbDatabases_collections;
        private readonly ResourceType ResourceType_databaseAccounts_tables_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_cassandraKeyspaces_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_cassandraKeyspaces_tables;
        private readonly ResourceType ResourceType_databaseAccounts_gremlinDatabases_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_gremlinDatabases_graphs;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_containers_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_containers_storedProcedures;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_containers_userDefinedFunctions;
        private readonly ResourceType ResourceType_databaseAccounts_sqlDatabases_containers_triggers;
        private readonly ResourceType ResourceType_databaseAccounts_mongodbDatabases_collections_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_cassandraKeyspaces_tables_throughputSettings;
        private readonly ResourceType ResourceType_databaseAccounts_gremlinDatabases_graphs_throughputSettings;
        private readonly TypeSymbol DatabaseAccountCreateUpdateProperties;
        private readonly TypeSymbol ConsistencyPolicy;
        private readonly TypeSymbol Location;
        private readonly TypeSymbol Capability;
        private readonly TypeSymbol VirtualNetworkRule;
        private readonly TypeSymbol SqlDatabaseCreateUpdateProperties;
        private readonly TypeSymbol SqlDatabaseResource;
        private readonly TypeSymbol ThroughputSettingsUpdateProperties;
        private readonly TypeSymbol ThroughputSettingsResource;
        private readonly TypeSymbol SqlContainerCreateUpdateProperties;
        private readonly TypeSymbol SqlContainerResource;
        private readonly TypeSymbol IndexingPolicy;
        private readonly TypeSymbol IncludedPath;
        private readonly TypeSymbol Indexes;
        private readonly TypeSymbol ExcludedPath;
        private readonly TypeSymbol CompositePath;
        private readonly TypeSymbol SpatialSpec;
        private readonly TypeSymbol ContainerPartitionKey;
        private readonly TypeSymbol UniqueKeyPolicy;
        private readonly TypeSymbol UniqueKey;
        private readonly TypeSymbol ConflictResolutionPolicy;
        private readonly TypeSymbol SqlStoredProcedureCreateUpdateProperties;
        private readonly TypeSymbol SqlStoredProcedureResource;
        private readonly TypeSymbol SqlUserDefinedFunctionCreateUpdateProperties;
        private readonly TypeSymbol SqlUserDefinedFunctionResource;
        private readonly TypeSymbol SqlTriggerCreateUpdateProperties;
        private readonly TypeSymbol SqlTriggerResource;
        private readonly TypeSymbol MongoDBDatabaseCreateUpdateProperties;
        private readonly TypeSymbol MongoDBDatabaseResource;
        private readonly TypeSymbol MongoDBCollectionCreateUpdateProperties;
        private readonly TypeSymbol MongoDBCollectionResource;
        private readonly TypeSymbol MongoIndex;
        private readonly TypeSymbol MongoIndexKeys;
        private readonly TypeSymbol MongoIndexOptions;
        private readonly TypeSymbol TableCreateUpdateProperties;
        private readonly TypeSymbol TableResource;
        private readonly TypeSymbol CassandraKeyspaceCreateUpdateProperties;
        private readonly TypeSymbol CassandraKeyspaceResource;
        private readonly TypeSymbol CassandraTableCreateUpdateProperties;
        private readonly TypeSymbol CassandraTableResource;
        private readonly TypeSymbol CassandraSchema;
        private readonly TypeSymbol Column;
        private readonly TypeSymbol CassandraPartitionKey;
        private readonly TypeSymbol ClusterKey;
        private readonly TypeSymbol GremlinDatabaseCreateUpdateProperties;
        private readonly TypeSymbol GremlinDatabaseResource;
        private readonly TypeSymbol GremlinGraphCreateUpdateProperties;
        private readonly TypeSymbol GremlinGraphResource;
    }
}
