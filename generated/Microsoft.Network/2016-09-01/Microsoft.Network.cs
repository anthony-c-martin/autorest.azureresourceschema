// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Network_2016_09_01
    {
        private const string ProviderNamespace = "Microsoft.Network";
        private const string ApiVersion = "2016-09-01";
        private static readonly ResourceTypeReference ResourceTypeReference_networkInterfaces = new ResourceTypeReference(ProviderNamespace, new[]{"networkInterfaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_applicationGateways = new ResourceTypeReference(ProviderNamespace, new[]{"applicationGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_loadBalancers = new ResourceTypeReference(ProviderNamespace, new[]{"loadBalancers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkSecurityGroups = new ResourceTypeReference(ProviderNamespace, new[]{"networkSecurityGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkWatchers = new ResourceTypeReference(ProviderNamespace, new[]{"networkWatchers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_publicIPAddresses = new ResourceTypeReference(ProviderNamespace, new[]{"publicIPAddresses"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeTables = new ResourceTypeReference(ProviderNamespace, new[]{"routeTables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworkGateways = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworkGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_connections = new ResourceTypeReference(ProviderNamespace, new[]{"connections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_localNetworkGateways = new ResourceTypeReference(ProviderNamespace, new[]{"localNetworkGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits_authorizations = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits", "authorizations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits_peerings = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits", "peerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkSecurityGroups_securityRules = new ResourceTypeReference(ProviderNamespace, new[]{"networkSecurityGroups", "securityRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkWatchers_packetCaptures = new ResourceTypeReference(ProviderNamespace, new[]{"networkWatchers", "packetCaptures"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeTables_routes = new ResourceTypeReference(ProviderNamespace, new[]{"routeTables", "routes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks_subnets = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks", "subnets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks_virtualNetworkPeerings = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks", "virtualNetworkPeerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_connections_sharedkey = new ResourceTypeReference(ProviderNamespace, new[]{"connections", "sharedkey"}, ApiVersion);
        private static Lazy<Microsoft_Network_2016_09_01> InstanceLazy = new Lazy<Microsoft_Network_2016_09_01>(() => new Microsoft_Network_2016_09_01());
        private Microsoft_Network_2016_09_01()
        {
            NetworkInterfacePropertiesFormat = new NamedObjectType("NetworkInterfacePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("virtualMachine", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("networkSecurityGroup", () => NetworkSecurityGroup, TypePropertyFlags.None), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("dnsSettings", () => NetworkInterfaceDnsSettings, TypePropertyFlags.None), new TypeProperty("macAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAcceleratedNetworking", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableIPForwarding", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SubResource = new NamedObjectType("SubResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkSecurityGroup = new NamedObjectType("NetworkSecurityGroup", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkSecurityGroupPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkSecurityGroupPropertiesFormat = new NamedObjectType("NetworkSecurityGroupPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("securityRules", () => new TypedArrayType(SecurityRule), TypePropertyFlags.None), new LazyTypeProperty("defaultSecurityRules", () => new TypedArrayType(SecurityRule), TypePropertyFlags.None), new LazyTypeProperty("networkInterfaces", () => new TypedArrayType(NetworkInterface), TypePropertyFlags.ReadOnly), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecurityRule = new NamedObjectType("SecurityRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SecurityRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecurityRulePropertiesFormat = new NamedObjectType("SecurityRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'"), new StringLiteralType("'*'")), TypePropertyFlags.Required), new TypeProperty("sourcePortRange", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("destinationPortRange", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceAddressPrefix", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("destinationAddressPrefix", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("access", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.Required), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("direction", UnionType.Create(new StringLiteralType("'Inbound'"), new StringLiteralType("'Outbound'")), TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterface = new NamedObjectType("NetworkInterface", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfacePropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SubnetPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SubnetPropertiesFormat = new NamedObjectType("SubnetPropertiesFormat", new ITypeProperty[]{new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("networkSecurityGroup", () => NetworkSecurityGroup, TypePropertyFlags.None), new LazyTypeProperty("routeTable", () => RouteTable, TypePropertyFlags.None), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(IPConfiguration), TypePropertyFlags.ReadOnly), new LazyTypeProperty("resourceNavigationLinks", () => new TypedArrayType(ResourceNavigationLink), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RouteTable = new NamedObjectType("RouteTable", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteTablePropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RouteTablePropertiesFormat = new NamedObjectType("RouteTablePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("routes", () => new TypedArrayType(Route), TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Route = new NamedObjectType("Route", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => RoutePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RoutePropertiesFormat = new NamedObjectType("RoutePropertiesFormat", new ITypeProperty[]{new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nextHopType", UnionType.Create(new StringLiteralType("'VirtualNetworkGateway'"), new StringLiteralType("'VnetLocal'"), new StringLiteralType("'Internet'"), new StringLiteralType("'VirtualAppliance'"), new StringLiteralType("'None'")), TypePropertyFlags.Required), new TypeProperty("nextHopIpAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IPConfiguration = new NamedObjectType("IPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IPConfigurationPropertiesFormat = new NamedObjectType("IPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PublicIPAddress = new NamedObjectType("PublicIPAddress", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicIPAddressPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PublicIPAddressPropertiesFormat = new NamedObjectType("PublicIPAddressPropertiesFormat", new ITypeProperty[]{new TypeProperty("publicIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("publicIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("ipConfiguration", () => IPConfiguration, TypePropertyFlags.ReadOnly), new LazyTypeProperty("dnsSettings", () => PublicIPAddressDnsSettings, TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PublicIPAddressDnsSettings = new NamedObjectType("PublicIPAddressDnsSettings", new ITypeProperty[]{new TypeProperty("domainNameLabel", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reverseFqdn", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ResourceNavigationLink = new NamedObjectType("ResourceNavigationLink", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ResourceNavigationLinkFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceNavigationLinkFormat = new NamedObjectType("ResourceNavigationLinkFormat", new ITypeProperty[]{new TypeProperty("linkedResourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("link", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            NetworkInterfaceIPConfiguration = new NamedObjectType("NetworkInterfaceIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfaceIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterfaceIPConfigurationPropertiesFormat = new NamedObjectType("NetworkInterfaceIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("applicationGatewayBackendAddressPools", () => new TypedArrayType(ApplicationGatewayBackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancerBackendAddressPools", () => new TypedArrayType(BackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancerInboundNatRules", () => new TypedArrayType(InboundNatRule), TypePropertyFlags.None), new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("privateIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendAddressPool = new NamedObjectType("ApplicationGatewayBackendAddressPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayBackendAddressPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendAddressPoolPropertiesFormat = new NamedObjectType("ApplicationGatewayBackendAddressPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("backendIPConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("backendAddresses", () => new TypedArrayType(ApplicationGatewayBackendAddress), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendAddress = new NamedObjectType("ApplicationGatewayBackendAddress", new ITypeProperty[]{new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BackendAddressPool = new NamedObjectType("BackendAddressPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => BackendAddressPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BackendAddressPoolPropertiesFormat = new NamedObjectType("BackendAddressPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("backendIPConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.ReadOnly), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("outboundNatRule", () => SubResource, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            InboundNatRule = new NamedObjectType("InboundNatRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => InboundNatRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            InboundNatRulePropertiesFormat = new NamedObjectType("InboundNatRulePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendIPConfiguration", () => NetworkInterfaceIPConfiguration, TypePropertyFlags.ReadOnly), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'")), TypePropertyFlags.None), new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enableFloatingIP", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterfaceDnsSettings = new NamedObjectType("NetworkInterfaceDnsSettings", new ITypeProperty[]{new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("appliedDnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("internalDnsNameLabel", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalFqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalDomainNameSuffix", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayPropertiesFormat = new NamedObjectType("ApplicationGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("sku", () => ApplicationGatewaySku, TypePropertyFlags.None), new LazyTypeProperty("sslPolicy", () => ApplicationGatewaySslPolicy, TypePropertyFlags.None), new TypeProperty("operationalState", UnionType.Create(new StringLiteralType("'Stopped'"), new StringLiteralType("'Starting'"), new StringLiteralType("'Running'"), new StringLiteralType("'Stopping'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("gatewayIPConfigurations", () => new TypedArrayType(ApplicationGatewayIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("authenticationCertificates", () => new TypedArrayType(ApplicationGatewayAuthenticationCertificate), TypePropertyFlags.None), new LazyTypeProperty("sslCertificates", () => new TypedArrayType(ApplicationGatewaySslCertificate), TypePropertyFlags.None), new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(ApplicationGatewayFrontendIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("frontendPorts", () => new TypedArrayType(ApplicationGatewayFrontendPort), TypePropertyFlags.None), new LazyTypeProperty("probes", () => new TypedArrayType(ApplicationGatewayProbe), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPools", () => new TypedArrayType(ApplicationGatewayBackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettingsCollection", () => new TypedArrayType(ApplicationGatewayBackendHttpSettings), TypePropertyFlags.None), new LazyTypeProperty("httpListeners", () => new TypedArrayType(ApplicationGatewayHttpListener), TypePropertyFlags.None), new LazyTypeProperty("urlPathMaps", () => new TypedArrayType(ApplicationGatewayUrlPathMap), TypePropertyFlags.None), new LazyTypeProperty("requestRoutingRules", () => new TypedArrayType(ApplicationGatewayRequestRoutingRule), TypePropertyFlags.None), new LazyTypeProperty("webApplicationFirewallConfiguration", () => ApplicationGatewayWebApplicationFirewallConfiguration, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewaySku = new NamedObjectType("ApplicationGatewaySku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Standard_Small'"), new StringLiteralType("'Standard_Medium'"), new StringLiteralType("'Standard_Large'"), new StringLiteralType("'WAF_Medium'"), new StringLiteralType("'WAF_Large'")), TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'WAF'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ApplicationGatewaySslPolicy = new NamedObjectType("ApplicationGatewaySslPolicy", new ITypeProperty[]{new TypeProperty("disabledSslProtocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'TLSv1_0'"), new StringLiteralType("'TLSv1_1'"), new StringLiteralType("'TLSv1_2'"))), TypePropertyFlags.None)}, null);
            ApplicationGatewayIPConfiguration = new NamedObjectType("ApplicationGatewayIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayIPConfigurationPropertiesFormat = new NamedObjectType("ApplicationGatewayIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayAuthenticationCertificate = new NamedObjectType("ApplicationGatewayAuthenticationCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayAuthenticationCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayAuthenticationCertificatePropertiesFormat = new NamedObjectType("ApplicationGatewayAuthenticationCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewaySslCertificate = new NamedObjectType("ApplicationGatewaySslCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewaySslCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewaySslCertificatePropertiesFormat = new NamedObjectType("ApplicationGatewaySslCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendIPConfiguration = new NamedObjectType("ApplicationGatewayFrontendIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayFrontendIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendIPConfigurationPropertiesFormat = new NamedObjectType("ApplicationGatewayFrontendIPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendPort = new NamedObjectType("ApplicationGatewayFrontendPort", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayFrontendPortPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendPortPropertiesFormat = new NamedObjectType("ApplicationGatewayFrontendPortPropertiesFormat", new ITypeProperty[]{new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayProbe = new NamedObjectType("ApplicationGatewayProbe", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayProbePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayProbePropertiesFormat = new NamedObjectType("ApplicationGatewayProbePropertiesFormat", new ITypeProperty[]{new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("host", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interval", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("unhealthyThreshold", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendHttpSettings = new NamedObjectType("ApplicationGatewayBackendHttpSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayBackendHttpSettingsPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendHttpSettingsPropertiesFormat = new NamedObjectType("ApplicationGatewayBackendHttpSettingsPropertiesFormat", new ITypeProperty[]{new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("cookieBasedAffinity", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("requestTimeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("probe", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("authenticationCertificates", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayHttpListener = new NamedObjectType("ApplicationGatewayHttpListener", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayHttpListenerPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayHttpListenerPropertiesFormat = new NamedObjectType("ApplicationGatewayHttpListenerPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("frontendPort", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("hostName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sslCertificate", () => SubResource, TypePropertyFlags.None), new TypeProperty("requireServerNameIndication", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayUrlPathMap = new NamedObjectType("ApplicationGatewayUrlPathMap", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayUrlPathMapPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayUrlPathMapPropertiesFormat = new NamedObjectType("ApplicationGatewayUrlPathMapPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("defaultBackendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("defaultBackendHttpSettings", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("pathRules", () => new TypedArrayType(ApplicationGatewayPathRule), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayPathRule = new NamedObjectType("ApplicationGatewayPathRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayPathRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayPathRulePropertiesFormat = new NamedObjectType("ApplicationGatewayPathRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("paths", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettings", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayRequestRoutingRule = new NamedObjectType("ApplicationGatewayRequestRoutingRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayRequestRoutingRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayRequestRoutingRulePropertiesFormat = new NamedObjectType("ApplicationGatewayRequestRoutingRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("ruleType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'PathBasedRouting'")), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettings", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("httpListener", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("urlPathMap", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayWebApplicationFirewallConfiguration = new NamedObjectType("ApplicationGatewayWebApplicationFirewallConfiguration", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("firewallMode", UnionType.Create(new StringLiteralType("'Detection'"), new StringLiteralType("'Prevention'")), TypePropertyFlags.None)}, null);
            AuthorizationPropertiesFormat = new NamedObjectType("AuthorizationPropertiesFormat", new ITypeProperty[]{new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authorizationUseStatus", UnionType.Create(new StringLiteralType("'Available'"), new StringLiteralType("'InUse'")), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPeeringPropertiesFormat = new NamedObjectType("ExpressRouteCircuitPeeringPropertiesFormat", new ITypeProperty[]{new TypeProperty("peeringType", UnionType.Create(new StringLiteralType("'AzurePublicPeering'"), new StringLiteralType("'AzurePrivatePeering'"), new StringLiteralType("'MicrosoftPeering'")), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("azureASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("peerASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("primaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primaryAzurePort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryAzurePort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vlanId", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("microsoftPeeringConfig", () => ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None), new LazyTypeProperty("stats", () => ExpressRouteCircuitStats, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("gatewayManagerEtag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastModifiedBy", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPeeringConfig = new NamedObjectType("ExpressRouteCircuitPeeringConfig", new ITypeProperty[]{new TypeProperty("advertisedPublicPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("advertisedPublicPrefixesState", UnionType.Create(new StringLiteralType("'NotConfigured'"), new StringLiteralType("'Configuring'"), new StringLiteralType("'Configured'"), new StringLiteralType("'ValidationNeeded'")), TypePropertyFlags.None), new TypeProperty("customerASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("routingRegistryName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitStats = new NamedObjectType("ExpressRouteCircuitStats", new ITypeProperty[]{new TypeProperty("primarybytesIn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("primarybytesOut", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secondarybytesIn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secondarybytesOut", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitSku = new NamedObjectType("ExpressRouteCircuitSku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("family", UnionType.Create(new StringLiteralType("'UnlimitedData'"), new StringLiteralType("'MeteredData'")), TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPropertiesFormat = new NamedObjectType("ExpressRouteCircuitPropertiesFormat", new ITypeProperty[]{new TypeProperty("allowClassicOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("circuitProvisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceProviderProvisioningState", UnionType.Create(new StringLiteralType("'NotProvisioned'"), new StringLiteralType("'Provisioning'"), new StringLiteralType("'Provisioned'"), new StringLiteralType("'Deprovisioning'")), TypePropertyFlags.None), new LazyTypeProperty("authorizations", () => new TypedArrayType(ExpressRouteCircuitAuthorization), TypePropertyFlags.None), new LazyTypeProperty("peerings", () => new TypedArrayType(ExpressRouteCircuitPeering), TypePropertyFlags.None), new TypeProperty("serviceKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceProviderNotes", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("serviceProviderProperties", () => ExpressRouteCircuitServiceProviderProperties, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("gatewayManagerEtag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitAuthorization = new NamedObjectType("ExpressRouteCircuitAuthorization", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AuthorizationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPeering = new NamedObjectType("ExpressRouteCircuitPeering", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCircuitPeeringPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitServiceProviderProperties = new NamedObjectType("ExpressRouteCircuitServiceProviderProperties", new ITypeProperty[]{new TypeProperty("serviceProviderName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("peeringLocation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("bandwidthInMbps", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            LoadBalancerPropertiesFormat = new NamedObjectType("LoadBalancerPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(FrontendIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPools", () => new TypedArrayType(BackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(LoadBalancingRule), TypePropertyFlags.None), new LazyTypeProperty("probes", () => new TypedArrayType(Probe), TypePropertyFlags.None), new LazyTypeProperty("inboundNatRules", () => new TypedArrayType(InboundNatRule), TypePropertyFlags.None), new LazyTypeProperty("inboundNatPools", () => new TypedArrayType(InboundNatPool), TypePropertyFlags.None), new LazyTypeProperty("outboundNatRules", () => new TypedArrayType(OutboundNatRule), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FrontendIPConfiguration = new NamedObjectType("FrontendIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FrontendIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FrontendIPConfigurationPropertiesFormat = new NamedObjectType("FrontendIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("inboundNatRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("inboundNatPools", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("outboundNatRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LoadBalancingRule = new NamedObjectType("LoadBalancingRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => LoadBalancingRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LoadBalancingRulePropertiesFormat = new NamedObjectType("LoadBalancingRulePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("probe", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'")), TypePropertyFlags.Required), new TypeProperty("loadDistribution", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'SourceIP'"), new StringLiteralType("'SourceIPProtocol'")), TypePropertyFlags.None), new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enableFloatingIP", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Probe = new NamedObjectType("Probe", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ProbePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ProbePropertiesFormat = new NamedObjectType("ProbePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Tcp'")), TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("intervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("numberOfProbes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requestPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            InboundNatPool = new NamedObjectType("InboundNatPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => InboundNatPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            InboundNatPoolPropertiesFormat = new NamedObjectType("InboundNatPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'")), TypePropertyFlags.Required), new TypeProperty("frontendPortRangeStart", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("frontendPortRangeEnd", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            OutboundNatRule = new NamedObjectType("OutboundNatRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => OutboundNatRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            OutboundNatRulePropertiesFormat = new NamedObjectType("OutboundNatRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("allocatedOutboundPorts", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkWatcherPropertiesFormat = new NamedObjectType("NetworkWatcherPropertiesFormat", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            PacketCaptureParameters = new NamedObjectType("PacketCaptureParameters", new ITypeProperty[]{new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("bytesToCapturePerPacket", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalBytesPerSession", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeLimitInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("storageLocation", () => PacketCaptureStorageLocation, TypePropertyFlags.Required), new LazyTypeProperty("filters", () => new TypedArrayType(PacketCaptureFilter), TypePropertyFlags.None)}, null);
            PacketCaptureStorageLocation = new NamedObjectType("PacketCaptureStorageLocation", new ITypeProperty[]{new TypeProperty("storageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storagePath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("filePath", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PacketCaptureFilter = new NamedObjectType("PacketCaptureFilter", new ITypeProperty[]{new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'TCP'"), new StringLiteralType("'UDP'"), new StringLiteralType("'Any'")), TypePropertyFlags.None), new TypeProperty("localIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remoteIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("localPort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remotePort", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkPropertiesFormat = new NamedObjectType("VirtualNetworkPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("addressSpace", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("dhcpOptions", () => DhcpOptions, TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkPeerings", () => new TypedArrayType(VirtualNetworkPeering), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AddressSpace = new NamedObjectType("AddressSpace", new ITypeProperty[]{new TypeProperty("addressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            DhcpOptions = new NamedObjectType("DhcpOptions", new ITypeProperty[]{new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            VirtualNetworkPeering = new NamedObjectType("VirtualNetworkPeering", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkPeeringPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkPeeringPropertiesFormat = new NamedObjectType("VirtualNetworkPeeringPropertiesFormat", new ITypeProperty[]{new TypeProperty("allowVirtualNetworkAccess", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowForwardedTraffic", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowGatewayTransit", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useRemoteGateways", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("remoteVirtualNetwork", () => SubResource, TypePropertyFlags.None), new TypeProperty("peeringState", UnionType.Create(new StringLiteralType("'Initiated'"), new StringLiteralType("'Connected'"), new StringLiteralType("'Disconnected'")), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(VirtualNetworkGatewayIPConfiguration), TypePropertyFlags.Required), new TypeProperty("gatewayType", UnionType.Create(new StringLiteralType("'Vpn'"), new StringLiteralType("'ExpressRoute'")), TypePropertyFlags.Required), new TypeProperty("vpnType", UnionType.Create(new StringLiteralType("'PolicyBased'"), new StringLiteralType("'RouteBased'")), TypePropertyFlags.Required), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("activeActive", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("gatewayDefaultSite", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("sku", () => VirtualNetworkGatewaySku, TypePropertyFlags.None), new LazyTypeProperty("vpnClientConfiguration", () => VpnClientConfiguration, TypePropertyFlags.None), new LazyTypeProperty("bgpSettings", () => BgpSettings, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkGatewayIPConfiguration = new NamedObjectType("VirtualNetworkGatewayIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayIPConfigurationPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayIPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.Required), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkGatewaySku = new NamedObjectType("VirtualNetworkGatewaySku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'HighPerformance'"), new StringLiteralType("'Standard'"), new StringLiteralType("'UltraPerformance'")), TypePropertyFlags.Required), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'HighPerformance'"), new StringLiteralType("'Standard'"), new StringLiteralType("'UltraPerformance'")), TypePropertyFlags.Required), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VpnClientConfiguration = new NamedObjectType("VpnClientConfiguration", new ITypeProperty[]{new LazyTypeProperty("vpnClientAddressPool", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("vpnClientRootCertificates", () => new TypedArrayType(VpnClientRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("vpnClientRevokedCertificates", () => new TypedArrayType(VpnClientRevokedCertificate), TypePropertyFlags.None)}, null);
            VpnClientRootCertificate = new NamedObjectType("VpnClientRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnClientRootCertificatePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnClientRootCertificatePropertiesFormat = new NamedObjectType("VpnClientRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VpnClientRevokedCertificate = new NamedObjectType("VpnClientRevokedCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnClientRevokedCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnClientRevokedCertificatePropertiesFormat = new NamedObjectType("VpnClientRevokedCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            BgpSettings = new NamedObjectType("BgpSettings", new ITypeProperty[]{new TypeProperty("asn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("bgpPeeringAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("peerWeight", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayConnectionPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayConnectionPropertiesFormat", new ITypeProperty[]{new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkGateway1", () => VirtualNetworkGateway, TypePropertyFlags.Required), new LazyTypeProperty("virtualNetworkGateway2", () => VirtualNetworkGateway, TypePropertyFlags.None), new LazyTypeProperty("localNetworkGateway2", () => LocalNetworkGateway, TypePropertyFlags.None), new TypeProperty("connectionType", UnionType.Create(new StringLiteralType("'IPsec'"), new StringLiteralType("'Vnet2Vnet'"), new StringLiteralType("'ExpressRoute'"), new StringLiteralType("'VPNClient'")), TypePropertyFlags.Required), new TypeProperty("routingWeight", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("tunnelConnectionStatus", () => new TypedArrayType(TunnelConnectionHealth), TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("peer", () => SubResource, TypePropertyFlags.None), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkGateway = new NamedObjectType("VirtualNetworkGateway", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LocalNetworkGateway = new NamedObjectType("LocalNetworkGateway", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LocalNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LocalNetworkGatewayPropertiesFormat = new NamedObjectType("LocalNetworkGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("localNetworkAddressSpace", () => AddressSpace, TypePropertyFlags.Required), new TypeProperty("gatewayIpAddress", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("bgpSettings", () => BgpSettings, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            TunnelConnectionHealth = new NamedObjectType("TunnelConnectionHealth", new ITypeProperty[]{new TypeProperty("tunnel", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.ReadOnly), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("lastConnectionEstablishedUtcTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceType_networkInterfaces = new ResourceType("Microsoft.Network/networkInterfaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkInterfaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfacePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkInterfaces);
            ResourceType_applicationGateways = new ResourceType("Microsoft.Network/applicationGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/applicationGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_applicationGateways);
            ResourceType_expressRouteCircuits = new ResourceType("Microsoft.Network/expressRouteCircuits", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => ExpressRouteCircuitSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCircuitPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits);
            ResourceType_loadBalancers = new ResourceType("Microsoft.Network/loadBalancers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/loadBalancers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LoadBalancerPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_loadBalancers);
            ResourceType_networkSecurityGroups = new ResourceType("Microsoft.Network/networkSecurityGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkSecurityGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkSecurityGroupPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkSecurityGroups);
            ResourceType_networkWatchers = new ResourceType("Microsoft.Network/networkWatchers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkWatchers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkWatcherPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkWatchers);
            ResourceType_publicIPAddresses = new ResourceType("Microsoft.Network/publicIPAddresses", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/publicIPAddresses'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicIPAddressPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_publicIPAddresses);
            ResourceType_routeTables = new ResourceType("Microsoft.Network/routeTables", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeTables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteTablePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeTables);
            ResourceType_virtualNetworks = new ResourceType("Microsoft.Network/virtualNetworks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks);
            ResourceType_virtualNetworkGateways = new ResourceType("Microsoft.Network/virtualNetworkGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworkGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworkGateways);
            ResourceType_connections = new ResourceType("Microsoft.Network/connections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/connections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayConnectionPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_connections);
            ResourceType_localNetworkGateways = new ResourceType("Microsoft.Network/localNetworkGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/localNetworkGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LocalNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_localNetworkGateways);
            ResourceType_expressRouteCircuits_authorizations = new ResourceType("Microsoft.Network/expressRouteCircuits/authorizations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AuthorizationPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits/authorizations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits_authorizations);
            ResourceType_expressRouteCircuits_peerings = new ResourceType("Microsoft.Network/expressRouteCircuits/peerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExpressRouteCircuitPeeringPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits/peerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits_peerings);
            ResourceType_networkSecurityGroups_securityRules = new ResourceType("Microsoft.Network/networkSecurityGroups/securityRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityRulePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkSecurityGroups/securityRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkSecurityGroups_securityRules);
            ResourceType_networkWatchers_packetCaptures = new ResourceType("Microsoft.Network/networkWatchers/packetCaptures", new ITypeProperty[]{new LazyTypeProperty("properties", () => PacketCaptureParameters, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkWatchers/packetCaptures'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkWatchers_packetCaptures);
            ResourceType_routeTables_routes = new ResourceType("Microsoft.Network/routeTables/routes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => RoutePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeTables/routes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeTables_routes);
            ResourceType_virtualNetworks_subnets = new ResourceType("Microsoft.Network/virtualNetworks/subnets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SubnetPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks/subnets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks_subnets);
            ResourceType_virtualNetworks_virtualNetworkPeerings = new ResourceType("Microsoft.Network/virtualNetworks/virtualNetworkPeerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualNetworkPeeringPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks/virtualNetworkPeerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks_virtualNetworkPeerings);
            ResourceType_connections_sharedkey = new ResourceType("Microsoft.Network/connections/sharedkey", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/connections/sharedkey'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2016-09-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_connections_sharedkey);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_networkInterfaces, () => InstanceLazy.Value.ResourceType_networkInterfaces);
            registrar.RegisterType(ResourceTypeReference_applicationGateways, () => InstanceLazy.Value.ResourceType_applicationGateways);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits, () => InstanceLazy.Value.ResourceType_expressRouteCircuits);
            registrar.RegisterType(ResourceTypeReference_loadBalancers, () => InstanceLazy.Value.ResourceType_loadBalancers);
            registrar.RegisterType(ResourceTypeReference_networkSecurityGroups, () => InstanceLazy.Value.ResourceType_networkSecurityGroups);
            registrar.RegisterType(ResourceTypeReference_networkWatchers, () => InstanceLazy.Value.ResourceType_networkWatchers);
            registrar.RegisterType(ResourceTypeReference_publicIPAddresses, () => InstanceLazy.Value.ResourceType_publicIPAddresses);
            registrar.RegisterType(ResourceTypeReference_routeTables, () => InstanceLazy.Value.ResourceType_routeTables);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks, () => InstanceLazy.Value.ResourceType_virtualNetworks);
            registrar.RegisterType(ResourceTypeReference_virtualNetworkGateways, () => InstanceLazy.Value.ResourceType_virtualNetworkGateways);
            registrar.RegisterType(ResourceTypeReference_connections, () => InstanceLazy.Value.ResourceType_connections);
            registrar.RegisterType(ResourceTypeReference_localNetworkGateways, () => InstanceLazy.Value.ResourceType_localNetworkGateways);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits_authorizations, () => InstanceLazy.Value.ResourceType_expressRouteCircuits_authorizations);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits_peerings, () => InstanceLazy.Value.ResourceType_expressRouteCircuits_peerings);
            registrar.RegisterType(ResourceTypeReference_networkSecurityGroups_securityRules, () => InstanceLazy.Value.ResourceType_networkSecurityGroups_securityRules);
            registrar.RegisterType(ResourceTypeReference_networkWatchers_packetCaptures, () => InstanceLazy.Value.ResourceType_networkWatchers_packetCaptures);
            registrar.RegisterType(ResourceTypeReference_routeTables_routes, () => InstanceLazy.Value.ResourceType_routeTables_routes);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks_subnets, () => InstanceLazy.Value.ResourceType_virtualNetworks_subnets);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks_virtualNetworkPeerings, () => InstanceLazy.Value.ResourceType_virtualNetworks_virtualNetworkPeerings);
            registrar.RegisterType(ResourceTypeReference_connections_sharedkey, () => InstanceLazy.Value.ResourceType_connections_sharedkey);
        }
        private readonly ResourceType ResourceType_networkInterfaces;
        private readonly ResourceType ResourceType_applicationGateways;
        private readonly ResourceType ResourceType_expressRouteCircuits;
        private readonly ResourceType ResourceType_loadBalancers;
        private readonly ResourceType ResourceType_networkSecurityGroups;
        private readonly ResourceType ResourceType_networkWatchers;
        private readonly ResourceType ResourceType_publicIPAddresses;
        private readonly ResourceType ResourceType_routeTables;
        private readonly ResourceType ResourceType_virtualNetworks;
        private readonly ResourceType ResourceType_virtualNetworkGateways;
        private readonly ResourceType ResourceType_connections;
        private readonly ResourceType ResourceType_localNetworkGateways;
        private readonly ResourceType ResourceType_expressRouteCircuits_authorizations;
        private readonly ResourceType ResourceType_expressRouteCircuits_peerings;
        private readonly ResourceType ResourceType_networkSecurityGroups_securityRules;
        private readonly ResourceType ResourceType_networkWatchers_packetCaptures;
        private readonly ResourceType ResourceType_routeTables_routes;
        private readonly ResourceType ResourceType_virtualNetworks_subnets;
        private readonly ResourceType ResourceType_virtualNetworks_virtualNetworkPeerings;
        private readonly ResourceType ResourceType_connections_sharedkey;
        private readonly TypeSymbol NetworkInterfacePropertiesFormat;
        private readonly TypeSymbol SubResource;
        private readonly TypeSymbol NetworkSecurityGroup;
        private readonly TypeSymbol NetworkSecurityGroupPropertiesFormat;
        private readonly TypeSymbol SecurityRule;
        private readonly TypeSymbol SecurityRulePropertiesFormat;
        private readonly TypeSymbol NetworkInterface;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol SubnetPropertiesFormat;
        private readonly TypeSymbol RouteTable;
        private readonly TypeSymbol RouteTablePropertiesFormat;
        private readonly TypeSymbol Route;
        private readonly TypeSymbol RoutePropertiesFormat;
        private readonly TypeSymbol IPConfiguration;
        private readonly TypeSymbol IPConfigurationPropertiesFormat;
        private readonly TypeSymbol PublicIPAddress;
        private readonly TypeSymbol PublicIPAddressPropertiesFormat;
        private readonly TypeSymbol PublicIPAddressDnsSettings;
        private readonly TypeSymbol ResourceNavigationLink;
        private readonly TypeSymbol ResourceNavigationLinkFormat;
        private readonly TypeSymbol NetworkInterfaceIPConfiguration;
        private readonly TypeSymbol NetworkInterfaceIPConfigurationPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayBackendAddressPool;
        private readonly TypeSymbol ApplicationGatewayBackendAddressPoolPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayBackendAddress;
        private readonly TypeSymbol BackendAddressPool;
        private readonly TypeSymbol BackendAddressPoolPropertiesFormat;
        private readonly TypeSymbol InboundNatRule;
        private readonly TypeSymbol InboundNatRulePropertiesFormat;
        private readonly TypeSymbol NetworkInterfaceDnsSettings;
        private readonly TypeSymbol ApplicationGatewayPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewaySku;
        private readonly TypeSymbol ApplicationGatewaySslPolicy;
        private readonly TypeSymbol ApplicationGatewayIPConfiguration;
        private readonly TypeSymbol ApplicationGatewayIPConfigurationPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayAuthenticationCertificate;
        private readonly TypeSymbol ApplicationGatewayAuthenticationCertificatePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewaySslCertificate;
        private readonly TypeSymbol ApplicationGatewaySslCertificatePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayFrontendIPConfiguration;
        private readonly TypeSymbol ApplicationGatewayFrontendIPConfigurationPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayFrontendPort;
        private readonly TypeSymbol ApplicationGatewayFrontendPortPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayProbe;
        private readonly TypeSymbol ApplicationGatewayProbePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayBackendHttpSettings;
        private readonly TypeSymbol ApplicationGatewayBackendHttpSettingsPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayHttpListener;
        private readonly TypeSymbol ApplicationGatewayHttpListenerPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayUrlPathMap;
        private readonly TypeSymbol ApplicationGatewayUrlPathMapPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayPathRule;
        private readonly TypeSymbol ApplicationGatewayPathRulePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayRequestRoutingRule;
        private readonly TypeSymbol ApplicationGatewayRequestRoutingRulePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayWebApplicationFirewallConfiguration;
        private readonly TypeSymbol AuthorizationPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitPeeringPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitPeeringConfig;
        private readonly TypeSymbol ExpressRouteCircuitStats;
        private readonly TypeSymbol ExpressRouteCircuitSku;
        private readonly TypeSymbol ExpressRouteCircuitPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitAuthorization;
        private readonly TypeSymbol ExpressRouteCircuitPeering;
        private readonly TypeSymbol ExpressRouteCircuitServiceProviderProperties;
        private readonly TypeSymbol LoadBalancerPropertiesFormat;
        private readonly TypeSymbol FrontendIPConfiguration;
        private readonly TypeSymbol FrontendIPConfigurationPropertiesFormat;
        private readonly TypeSymbol LoadBalancingRule;
        private readonly TypeSymbol LoadBalancingRulePropertiesFormat;
        private readonly TypeSymbol Probe;
        private readonly TypeSymbol ProbePropertiesFormat;
        private readonly TypeSymbol InboundNatPool;
        private readonly TypeSymbol InboundNatPoolPropertiesFormat;
        private readonly TypeSymbol OutboundNatRule;
        private readonly TypeSymbol OutboundNatRulePropertiesFormat;
        private readonly TypeSymbol NetworkWatcherPropertiesFormat;
        private readonly TypeSymbol PacketCaptureParameters;
        private readonly TypeSymbol PacketCaptureStorageLocation;
        private readonly TypeSymbol PacketCaptureFilter;
        private readonly TypeSymbol VirtualNetworkPropertiesFormat;
        private readonly TypeSymbol AddressSpace;
        private readonly TypeSymbol DhcpOptions;
        private readonly TypeSymbol VirtualNetworkPeering;
        private readonly TypeSymbol VirtualNetworkPeeringPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewayPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewayIPConfiguration;
        private readonly TypeSymbol VirtualNetworkGatewayIPConfigurationPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewaySku;
        private readonly TypeSymbol VpnClientConfiguration;
        private readonly TypeSymbol VpnClientRootCertificate;
        private readonly TypeSymbol VpnClientRootCertificatePropertiesFormat;
        private readonly TypeSymbol VpnClientRevokedCertificate;
        private readonly TypeSymbol VpnClientRevokedCertificatePropertiesFormat;
        private readonly TypeSymbol BgpSettings;
        private readonly TypeSymbol VirtualNetworkGatewayConnectionPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGateway;
        private readonly TypeSymbol LocalNetworkGateway;
        private readonly TypeSymbol LocalNetworkGatewayPropertiesFormat;
        private readonly TypeSymbol TunnelConnectionHealth;
    }
}
