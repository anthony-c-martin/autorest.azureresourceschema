// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Network_2019_07_01
    {
        private const string ProviderNamespace = "Microsoft.Network";
        private const string ApiVersion = "2019-07-01";
        private static readonly ResourceTypeReference ResourceTypeReference_applicationGateways = new ResourceTypeReference(ProviderNamespace, new[]{"applicationGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_applicationSecurityGroups = new ResourceTypeReference(ProviderNamespace, new[]{"applicationSecurityGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_azureFirewalls = new ResourceTypeReference(ProviderNamespace, new[]{"azureFirewalls"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_bastionHosts = new ResourceTypeReference(ProviderNamespace, new[]{"bastionHosts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_ddosCustomPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"ddosCustomPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_ddosProtectionPlans = new ResourceTypeReference(ProviderNamespace, new[]{"ddosProtectionPlans"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCrossConnections = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCrossConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteGateways = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_ExpressRoutePorts = new ResourceTypeReference(ProviderNamespace, new[]{"ExpressRoutePorts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_firewallPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"firewallPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_loadBalancers = new ResourceTypeReference(ProviderNamespace, new[]{"loadBalancers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_natGateways = new ResourceTypeReference(ProviderNamespace, new[]{"natGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkInterfaces = new ResourceTypeReference(ProviderNamespace, new[]{"networkInterfaces"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkProfiles = new ResourceTypeReference(ProviderNamespace, new[]{"networkProfiles"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkSecurityGroups = new ResourceTypeReference(ProviderNamespace, new[]{"networkSecurityGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkWatchers = new ResourceTypeReference(ProviderNamespace, new[]{"networkWatchers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_privateEndpoints = new ResourceTypeReference(ProviderNamespace, new[]{"privateEndpoints"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_privateLinkServices = new ResourceTypeReference(ProviderNamespace, new[]{"privateLinkServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_publicIPAddresses = new ResourceTypeReference(ProviderNamespace, new[]{"publicIPAddresses"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_publicIPPrefixes = new ResourceTypeReference(ProviderNamespace, new[]{"publicIPPrefixes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeFilters = new ResourceTypeReference(ProviderNamespace, new[]{"routeFilters"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeTables = new ResourceTypeReference(ProviderNamespace, new[]{"routeTables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serviceEndpointPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"serviceEndpointPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworkGateways = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworkGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_connections = new ResourceTypeReference(ProviderNamespace, new[]{"connections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_localNetworkGateways = new ResourceTypeReference(ProviderNamespace, new[]{"localNetworkGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworkTaps = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworkTaps"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualRouters = new ResourceTypeReference(ProviderNamespace, new[]{"virtualRouters"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualWans = new ResourceTypeReference(ProviderNamespace, new[]{"virtualWans"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_vpnSites = new ResourceTypeReference(ProviderNamespace, new[]{"vpnSites"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualHubs = new ResourceTypeReference(ProviderNamespace, new[]{"virtualHubs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_vpnGateways = new ResourceTypeReference(ProviderNamespace, new[]{"vpnGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_p2svpnGateways = new ResourceTypeReference(ProviderNamespace, new[]{"p2svpnGateways"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_ApplicationGatewayWebApplicationFirewallPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"ApplicationGatewayWebApplicationFirewallPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits_authorizations = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits", "authorizations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits_peerings = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits", "peerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCrossConnections_peerings = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCrossConnections", "peerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteGateways_expressRouteConnections = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteGateways", "expressRouteConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_firewallPolicies_ruleGroups = new ResourceTypeReference(ProviderNamespace, new[]{"firewallPolicies", "ruleGroups"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_loadBalancers_inboundNatRules = new ResourceTypeReference(ProviderNamespace, new[]{"loadBalancers", "inboundNatRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkInterfaces_tapConfigurations = new ResourceTypeReference(ProviderNamespace, new[]{"networkInterfaces", "tapConfigurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkSecurityGroups_securityRules = new ResourceTypeReference(ProviderNamespace, new[]{"networkSecurityGroups", "securityRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkWatchers_packetCaptures = new ResourceTypeReference(ProviderNamespace, new[]{"networkWatchers", "packetCaptures"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networkWatchers_connectionMonitors = new ResourceTypeReference(ProviderNamespace, new[]{"networkWatchers", "connectionMonitors"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_privateLinkServices_privateEndpointConnections = new ResourceTypeReference(ProviderNamespace, new[]{"privateLinkServices", "privateEndpointConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeFilters_routeFilterRules = new ResourceTypeReference(ProviderNamespace, new[]{"routeFilters", "routeFilterRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_routeTables_routes = new ResourceTypeReference(ProviderNamespace, new[]{"routeTables", "routes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_serviceEndpointPolicies_serviceEndpointPolicyDefinitions = new ResourceTypeReference(ProviderNamespace, new[]{"serviceEndpointPolicies", "serviceEndpointPolicyDefinitions"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks_subnets = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks", "subnets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualNetworks_virtualNetworkPeerings = new ResourceTypeReference(ProviderNamespace, new[]{"virtualNetworks", "virtualNetworkPeerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_connections_sharedkey = new ResourceTypeReference(ProviderNamespace, new[]{"connections", "sharedkey"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualRouters_peerings = new ResourceTypeReference(ProviderNamespace, new[]{"virtualRouters", "peerings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_vpnGateways_vpnConnections = new ResourceTypeReference(ProviderNamespace, new[]{"vpnGateways", "vpnConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualWans_p2sVpnServerConfigurations = new ResourceTypeReference(ProviderNamespace, new[]{"virtualWans", "p2sVpnServerConfigurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_expressRouteCircuits_peerings_connections = new ResourceTypeReference(ProviderNamespace, new[]{"expressRouteCircuits", "peerings", "connections"}, ApiVersion);
        private static Lazy<Microsoft_Network_2019_07_01> InstanceLazy = new Lazy<Microsoft_Network_2019_07_01>(() => new Microsoft_Network_2019_07_01());
        private Microsoft_Network_2019_07_01()
        {
            ApplicationGatewayPropertiesFormat = new NamedObjectType("ApplicationGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("sku", () => ApplicationGatewaySku, TypePropertyFlags.None), new LazyTypeProperty("sslPolicy", () => ApplicationGatewaySslPolicy, TypePropertyFlags.None), new TypeProperty("operationalState", UnionType.Create(new StringLiteralType("'Stopped'"), new StringLiteralType("'Starting'"), new StringLiteralType("'Running'"), new StringLiteralType("'Stopping'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("gatewayIPConfigurations", () => new TypedArrayType(ApplicationGatewayIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("authenticationCertificates", () => new TypedArrayType(ApplicationGatewayAuthenticationCertificate), TypePropertyFlags.None), new LazyTypeProperty("trustedRootCertificates", () => new TypedArrayType(ApplicationGatewayTrustedRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("sslCertificates", () => new TypedArrayType(ApplicationGatewaySslCertificate), TypePropertyFlags.None), new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(ApplicationGatewayFrontendIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("frontendPorts", () => new TypedArrayType(ApplicationGatewayFrontendPort), TypePropertyFlags.None), new LazyTypeProperty("probes", () => new TypedArrayType(ApplicationGatewayProbe), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPools", () => new TypedArrayType(ApplicationGatewayBackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettingsCollection", () => new TypedArrayType(ApplicationGatewayBackendHttpSettings), TypePropertyFlags.None), new LazyTypeProperty("httpListeners", () => new TypedArrayType(ApplicationGatewayHttpListener), TypePropertyFlags.None), new LazyTypeProperty("urlPathMaps", () => new TypedArrayType(ApplicationGatewayUrlPathMap), TypePropertyFlags.None), new LazyTypeProperty("requestRoutingRules", () => new TypedArrayType(ApplicationGatewayRequestRoutingRule), TypePropertyFlags.None), new LazyTypeProperty("rewriteRuleSets", () => new TypedArrayType(ApplicationGatewayRewriteRuleSet), TypePropertyFlags.None), new LazyTypeProperty("redirectConfigurations", () => new TypedArrayType(ApplicationGatewayRedirectConfiguration), TypePropertyFlags.None), new LazyTypeProperty("webApplicationFirewallConfiguration", () => ApplicationGatewayWebApplicationFirewallConfiguration, TypePropertyFlags.None), new LazyTypeProperty("firewallPolicy", () => SubResource, TypePropertyFlags.None), new TypeProperty("enableHttp2", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableFips", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("autoscaleConfiguration", () => ApplicationGatewayAutoscaleConfiguration, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("customErrorConfigurations", () => new TypedArrayType(ApplicationGatewayCustomError), TypePropertyFlags.None)}, null);
            ApplicationGatewaySku = new NamedObjectType("ApplicationGatewaySku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Standard_Small'"), new StringLiteralType("'Standard_Medium'"), new StringLiteralType("'Standard_Large'"), new StringLiteralType("'WAF_Medium'"), new StringLiteralType("'WAF_Large'"), new StringLiteralType("'Standard_v2'"), new StringLiteralType("'WAF_v2'")), TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'WAF'"), new StringLiteralType("'Standard_v2'"), new StringLiteralType("'WAF_v2'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ApplicationGatewaySslPolicy = new NamedObjectType("ApplicationGatewaySslPolicy", new ITypeProperty[]{new TypeProperty("disabledSslProtocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'TLSv1_0'"), new StringLiteralType("'TLSv1_1'"), new StringLiteralType("'TLSv1_2'"))), TypePropertyFlags.None), new TypeProperty("policyType", UnionType.Create(new StringLiteralType("'Predefined'"), new StringLiteralType("'Custom'")), TypePropertyFlags.None), new TypeProperty("policyName", UnionType.Create(new StringLiteralType("'AppGwSslPolicy20150501'"), new StringLiteralType("'AppGwSslPolicy20170401'"), new StringLiteralType("'AppGwSslPolicy20170401S'")), TypePropertyFlags.None), new TypeProperty("cipherSuites", new TypedArrayType(UnionType.Create(new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384'"), new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'"), new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA'"), new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA'"), new StringLiteralType("'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384'"), new StringLiteralType("'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256'"), new StringLiteralType("'TLS_DHE_RSA_WITH_AES_256_CBC_SHA'"), new StringLiteralType("'TLS_DHE_RSA_WITH_AES_128_CBC_SHA'"), new StringLiteralType("'TLS_RSA_WITH_AES_256_GCM_SHA384'"), new StringLiteralType("'TLS_RSA_WITH_AES_128_GCM_SHA256'"), new StringLiteralType("'TLS_RSA_WITH_AES_256_CBC_SHA256'"), new StringLiteralType("'TLS_RSA_WITH_AES_128_CBC_SHA256'"), new StringLiteralType("'TLS_RSA_WITH_AES_256_CBC_SHA'"), new StringLiteralType("'TLS_RSA_WITH_AES_128_CBC_SHA'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA'"), new StringLiteralType("'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA'"), new StringLiteralType("'TLS_DHE_DSS_WITH_AES_256_CBC_SHA256'"), new StringLiteralType("'TLS_DHE_DSS_WITH_AES_128_CBC_SHA256'"), new StringLiteralType("'TLS_DHE_DSS_WITH_AES_256_CBC_SHA'"), new StringLiteralType("'TLS_DHE_DSS_WITH_AES_128_CBC_SHA'"), new StringLiteralType("'TLS_RSA_WITH_3DES_EDE_CBC_SHA'"), new StringLiteralType("'TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA'"), new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'"), new StringLiteralType("'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'"))), TypePropertyFlags.None), new TypeProperty("minProtocolVersion", UnionType.Create(new StringLiteralType("'TLSv1_0'"), new StringLiteralType("'TLSv1_1'"), new StringLiteralType("'TLSv1_2'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayIPConfiguration = new NamedObjectType("ApplicationGatewayIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayIPConfigurationPropertiesFormat = new NamedObjectType("ApplicationGatewayIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            SubResource = new NamedObjectType("SubResource", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayAuthenticationCertificate = new NamedObjectType("ApplicationGatewayAuthenticationCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayAuthenticationCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayAuthenticationCertificatePropertiesFormat = new NamedObjectType("ApplicationGatewayAuthenticationCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayTrustedRootCertificate = new NamedObjectType("ApplicationGatewayTrustedRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayTrustedRootCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayTrustedRootCertificatePropertiesFormat = new NamedObjectType("ApplicationGatewayTrustedRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyVaultSecretId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewaySslCertificate = new NamedObjectType("ApplicationGatewaySslCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewaySslCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewaySslCertificatePropertiesFormat = new NamedObjectType("ApplicationGatewaySslCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("data", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyVaultSecretId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendIPConfiguration = new NamedObjectType("ApplicationGatewayFrontendIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayFrontendIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendIPConfigurationPropertiesFormat = new NamedObjectType("ApplicationGatewayFrontendIPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendPort = new NamedObjectType("ApplicationGatewayFrontendPort", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayFrontendPortPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayFrontendPortPropertiesFormat = new NamedObjectType("ApplicationGatewayFrontendPortPropertiesFormat", new ITypeProperty[]{new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayProbe = new NamedObjectType("ApplicationGatewayProbe", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayProbePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayProbePropertiesFormat = new NamedObjectType("ApplicationGatewayProbePropertiesFormat", new ITypeProperty[]{new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("host", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("interval", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("unhealthyThreshold", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("pickHostNameFromBackendHttpSettings", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("minServers", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("match", () => ApplicationGatewayProbeHealthResponseMatch, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ApplicationGatewayProbeHealthResponseMatch = new NamedObjectType("ApplicationGatewayProbeHealthResponseMatch", new ITypeProperty[]{new TypeProperty("body", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("statusCodes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendAddressPool = new NamedObjectType("ApplicationGatewayBackendAddressPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayBackendAddressPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendAddressPoolPropertiesFormat = new NamedObjectType("ApplicationGatewayBackendAddressPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("backendIPConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("backendAddresses", () => new TypedArrayType(ApplicationGatewayBackendAddress), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            NetworkInterfaceIPConfiguration = new NamedObjectType("NetworkInterfaceIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfaceIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterfaceIPConfigurationPropertiesFormat = new NamedObjectType("NetworkInterfaceIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("virtualNetworkTaps", () => new TypedArrayType(VirtualNetworkTap), TypePropertyFlags.None), new LazyTypeProperty("applicationGatewayBackendAddressPools", () => new TypedArrayType(ApplicationGatewayBackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancerBackendAddressPools", () => new TypedArrayType(BackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancerInboundNatRules", () => new TypedArrayType(InboundNatRule), TypePropertyFlags.None), new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("privateIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new LazyTypeProperty("applicationSecurityGroups", () => new TypedArrayType(ApplicationSecurityGroup), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("privateLinkConnectionProperties", () => NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkTap = new NamedObjectType("VirtualNetworkTap", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkTapPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkTapPropertiesFormat = new NamedObjectType("VirtualNetworkTapPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("networkInterfaceTapConfigurations", () => new TypedArrayType(NetworkInterfaceTapConfiguration), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("destinationNetworkInterfaceIPConfiguration", () => NetworkInterfaceIPConfiguration, TypePropertyFlags.None), new LazyTypeProperty("destinationLoadBalancerFrontEndIPConfiguration", () => FrontendIPConfiguration, TypePropertyFlags.None), new TypeProperty("destinationPort", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            NetworkInterfaceTapConfiguration = new NamedObjectType("NetworkInterfaceTapConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfaceTapConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            NetworkInterfaceTapConfigurationPropertiesFormat = new NamedObjectType("NetworkInterfaceTapConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("virtualNetworkTap", () => VirtualNetworkTap, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            FrontendIPConfiguration = new NamedObjectType("FrontendIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FrontendIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            FrontendIPConfigurationPropertiesFormat = new NamedObjectType("FrontendIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("inboundNatRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("inboundNatPools", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("outboundRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("privateIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new LazyTypeProperty("publicIPPrefix", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SubnetPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SubnetPropertiesFormat = new NamedObjectType("SubnetPropertiesFormat", new ITypeProperty[]{new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("addressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("networkSecurityGroup", () => NetworkSecurityGroup, TypePropertyFlags.None), new LazyTypeProperty("routeTable", () => RouteTable, TypePropertyFlags.None), new LazyTypeProperty("natGateway", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("serviceEndpoints", () => new TypedArrayType(ServiceEndpointPropertiesFormat), TypePropertyFlags.None), new LazyTypeProperty("serviceEndpointPolicies", () => new TypedArrayType(ServiceEndpointPolicy), TypePropertyFlags.None), new LazyTypeProperty("privateEndpoints", () => new TypedArrayType(PrivateEndpoint), TypePropertyFlags.ReadOnly), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(IPConfiguration), TypePropertyFlags.ReadOnly), new LazyTypeProperty("ipConfigurationProfiles", () => new TypedArrayType(IPConfigurationProfile), TypePropertyFlags.ReadOnly), new LazyTypeProperty("resourceNavigationLinks", () => new TypedArrayType(ResourceNavigationLink), TypePropertyFlags.None), new LazyTypeProperty("serviceAssociationLinks", () => new TypedArrayType(ServiceAssociationLink), TypePropertyFlags.None), new LazyTypeProperty("delegations", () => new TypedArrayType(Delegation), TypePropertyFlags.None), new TypeProperty("purpose", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("privateEndpointNetworkPolicies", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateLinkServiceNetworkPolicies", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkSecurityGroup = new NamedObjectType("NetworkSecurityGroup", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkSecurityGroupPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkSecurityGroupPropertiesFormat = new NamedObjectType("NetworkSecurityGroupPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("securityRules", () => new TypedArrayType(SecurityRule), TypePropertyFlags.None), new LazyTypeProperty("defaultSecurityRules", () => new TypedArrayType(SecurityRule), TypePropertyFlags.None), new LazyTypeProperty("networkInterfaces", () => new TypedArrayType(NetworkInterface), TypePropertyFlags.ReadOnly), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            SecurityRule = new NamedObjectType("SecurityRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => SecurityRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecurityRulePropertiesFormat = new NamedObjectType("SecurityRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'"), new StringLiteralType("'Icmp'"), new StringLiteralType("'Esp'"), new StringLiteralType("'*'")), TypePropertyFlags.Required), new TypeProperty("sourcePortRange", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("destinationPortRange", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceAddressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("sourceApplicationSecurityGroups", () => new TypedArrayType(ApplicationSecurityGroup), TypePropertyFlags.None), new TypeProperty("destinationAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("destinationAddressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("destinationApplicationSecurityGroups", () => new TypedArrayType(ApplicationSecurityGroup), TypePropertyFlags.None), new TypeProperty("sourcePortRanges", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationPortRanges", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("access", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.Required), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("direction", UnionType.Create(new StringLiteralType("'Inbound'"), new StringLiteralType("'Outbound'")), TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationSecurityGroup = new NamedObjectType("ApplicationSecurityGroup", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationSecurityGroupPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ApplicationSecurityGroupPropertiesFormat = new NamedObjectType("ApplicationSecurityGroupPropertiesFormat", new ITypeProperty[]{new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            NetworkInterface = new NamedObjectType("NetworkInterface", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfacePropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterfacePropertiesFormat = new NamedObjectType("NetworkInterfacePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("virtualMachine", () => SubResource, TypePropertyFlags.ReadOnly), new LazyTypeProperty("networkSecurityGroup", () => NetworkSecurityGroup, TypePropertyFlags.None), new LazyTypeProperty("privateEndpoint", () => PrivateEndpoint, TypePropertyFlags.ReadOnly), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("tapConfigurations", () => new TypedArrayType(NetworkInterfaceTapConfiguration), TypePropertyFlags.None), new LazyTypeProperty("dnsSettings", () => NetworkInterfaceDnsSettings, TypePropertyFlags.None), new TypeProperty("macAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableAcceleratedNetworking", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableIPForwarding", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("hostedWorkloads", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PrivateEndpoint = new NamedObjectType("PrivateEndpoint", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateEndpointProperties, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PrivateEndpointProperties = new NamedObjectType("PrivateEndpointProperties", new ITypeProperty[]{new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new LazyTypeProperty("networkInterfaces", () => new TypedArrayType(NetworkInterface), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnections", () => new TypedArrayType(PrivateLinkServiceConnection), TypePropertyFlags.None), new LazyTypeProperty("manualPrivateLinkServiceConnections", () => new TypedArrayType(PrivateLinkServiceConnection), TypePropertyFlags.None)}, null);
            PrivateLinkServiceConnection = new NamedObjectType("PrivateLinkServiceConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateLinkServiceConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateLinkServiceConnectionProperties = new NamedObjectType("PrivateLinkServiceConnectionProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("privateLinkServiceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("groupIds", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("requestMessage", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnectionState", () => PrivateLinkServiceConnectionState, TypePropertyFlags.None)}, null);
            PrivateLinkServiceConnectionState = new NamedObjectType("PrivateLinkServiceConnectionState", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("actionsRequired", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterfaceDnsSettings = new NamedObjectType("NetworkInterfaceDnsSettings", new ITypeProperty[]{new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("appliedDnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("internalDnsNameLabel", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalFqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("internalDomainNameSuffix", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RouteTable = new NamedObjectType("RouteTable", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteTablePropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RouteTablePropertiesFormat = new NamedObjectType("RouteTablePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("routes", () => new TypedArrayType(Route), TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.ReadOnly), new TypeProperty("disableBgpRoutePropagation", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            Route = new NamedObjectType("Route", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => RoutePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RoutePropertiesFormat = new NamedObjectType("RoutePropertiesFormat", new ITypeProperty[]{new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("nextHopType", UnionType.Create(new StringLiteralType("'VirtualNetworkGateway'"), new StringLiteralType("'VnetLocal'"), new StringLiteralType("'Internet'"), new StringLiteralType("'VirtualAppliance'"), new StringLiteralType("'None'")), TypePropertyFlags.Required), new TypeProperty("nextHopIpAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ServiceEndpointPropertiesFormat = new NamedObjectType("ServiceEndpointPropertiesFormat", new ITypeProperty[]{new TypeProperty("service", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("locations", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ServiceEndpointPolicy = new NamedObjectType("ServiceEndpointPolicy", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServiceEndpointPolicyPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServiceEndpointPolicyPropertiesFormat = new NamedObjectType("ServiceEndpointPolicyPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("serviceEndpointPolicyDefinitions", () => new TypedArrayType(ServiceEndpointPolicyDefinition), TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ServiceEndpointPolicyDefinition = new NamedObjectType("ServiceEndpointPolicyDefinition", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServiceEndpointPolicyDefinitionPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServiceEndpointPolicyDefinitionPropertiesFormat = new NamedObjectType("ServiceEndpointPolicyDefinitionPropertiesFormat", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("service", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceResources", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            IPConfiguration = new NamedObjectType("IPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IPConfigurationPropertiesFormat = new NamedObjectType("IPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => PublicIPAddress, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PublicIPAddress = new NamedObjectType("PublicIPAddress", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => PublicIPAddressSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicIPAddressPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            PublicIPAddressSku = new NamedObjectType("PublicIPAddressSku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.None)}, null);
            PublicIPAddressPropertiesFormat = new NamedObjectType("PublicIPAddressPropertiesFormat", new ITypeProperty[]{new TypeProperty("publicIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new TypeProperty("publicIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("ipConfiguration", () => IPConfiguration, TypePropertyFlags.ReadOnly), new LazyTypeProperty("dnsSettings", () => PublicIPAddressDnsSettings, TypePropertyFlags.None), new LazyTypeProperty("ddosSettings", () => DdosSettings, TypePropertyFlags.None), new LazyTypeProperty("ipTags", () => new TypedArrayType(IpTag), TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("publicIPPrefix", () => SubResource, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PublicIPAddressDnsSettings = new NamedObjectType("PublicIPAddressDnsSettings", new ITypeProperty[]{new TypeProperty("domainNameLabel", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("reverseFqdn", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DdosSettings = new NamedObjectType("DdosSettings", new ITypeProperty[]{new LazyTypeProperty("ddosCustomPolicy", () => SubResource, TypePropertyFlags.None), new TypeProperty("protectionCoverage", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.None)}, null);
            IpTag = new NamedObjectType("IpTag", new ITypeProperty[]{new TypeProperty("ipTagType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IPConfigurationProfile = new NamedObjectType("IPConfigurationProfile", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => IPConfigurationProfilePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IPConfigurationProfilePropertiesFormat = new NamedObjectType("IPConfigurationProfilePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ResourceNavigationLink = new NamedObjectType("ResourceNavigationLink", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ResourceNavigationLinkFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceNavigationLinkFormat = new NamedObjectType("ResourceNavigationLinkFormat", new ITypeProperty[]{new TypeProperty("linkedResourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("link", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ServiceAssociationLink = new NamedObjectType("ServiceAssociationLink", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServiceAssociationLinkPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServiceAssociationLinkPropertiesFormat = new NamedObjectType("ServiceAssociationLinkPropertiesFormat", new ITypeProperty[]{new TypeProperty("linkedResourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("link", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("allowDelete", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("locations", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            Delegation = new NamedObjectType("Delegation", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServiceDelegationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServiceDelegationPropertiesFormat = new NamedObjectType("ServiceDelegationPropertiesFormat", new ITypeProperty[]{new TypeProperty("serviceName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("actions", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            BackendAddressPool = new NamedObjectType("BackendAddressPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => BackendAddressPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            BackendAddressPoolPropertiesFormat = new NamedObjectType("BackendAddressPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("backendIPConfigurations", () => new TypedArrayType(NetworkInterfaceIPConfiguration), TypePropertyFlags.ReadOnly), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("outboundRule", () => SubResource, TypePropertyFlags.ReadOnly), new LazyTypeProperty("outboundRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            InboundNatRule = new NamedObjectType("InboundNatRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => InboundNatRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            InboundNatRulePropertiesFormat = new NamedObjectType("InboundNatRulePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendIPConfiguration", () => NetworkInterfaceIPConfiguration, TypePropertyFlags.ReadOnly), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'"), new StringLiteralType("'All'")), TypePropertyFlags.None), new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enableFloatingIP", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableTcpReset", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties = new NamedObjectType("NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties", new ITypeProperty[]{new TypeProperty("groupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("requiredMemberName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("fqdns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly)}, null);
            ApplicationGatewayBackendAddress = new NamedObjectType("ApplicationGatewayBackendAddress", new ITypeProperty[]{new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendHttpSettings = new NamedObjectType("ApplicationGatewayBackendHttpSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayBackendHttpSettingsPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayBackendHttpSettingsPropertiesFormat = new NamedObjectType("ApplicationGatewayBackendHttpSettingsPropertiesFormat", new ITypeProperty[]{new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("cookieBasedAffinity", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("requestTimeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("probe", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("authenticationCertificates", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("trustedRootCertificates", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("connectionDraining", () => ApplicationGatewayConnectionDraining, TypePropertyFlags.None), new TypeProperty("hostName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pickHostNameFromBackendAddress", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("affinityCookieName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("probeEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("path", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayConnectionDraining = new NamedObjectType("ApplicationGatewayConnectionDraining", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("drainTimeoutInSec", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            ApplicationGatewayHttpListener = new NamedObjectType("ApplicationGatewayHttpListener", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayHttpListenerPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayHttpListenerPropertiesFormat = new NamedObjectType("ApplicationGatewayHttpListenerPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("frontendPort", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("hostName", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sslCertificate", () => SubResource, TypePropertyFlags.None), new TypeProperty("requireServerNameIndication", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("customErrorConfigurations", () => new TypedArrayType(ApplicationGatewayCustomError), TypePropertyFlags.None)}, null);
            ApplicationGatewayCustomError = new NamedObjectType("ApplicationGatewayCustomError", new ITypeProperty[]{new TypeProperty("statusCode", UnionType.Create(new StringLiteralType("'HttpStatus403'"), new StringLiteralType("'HttpStatus502'")), TypePropertyFlags.None), new TypeProperty("customErrorPageUrl", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayUrlPathMap = new NamedObjectType("ApplicationGatewayUrlPathMap", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayUrlPathMapPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayUrlPathMapPropertiesFormat = new NamedObjectType("ApplicationGatewayUrlPathMapPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("defaultBackendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("defaultBackendHttpSettings", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("defaultRewriteRuleSet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("defaultRedirectConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("pathRules", () => new TypedArrayType(ApplicationGatewayPathRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayPathRule = new NamedObjectType("ApplicationGatewayPathRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayPathRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayPathRulePropertiesFormat = new NamedObjectType("ApplicationGatewayPathRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("paths", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettings", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("redirectConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("rewriteRuleSet", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayRequestRoutingRule = new NamedObjectType("ApplicationGatewayRequestRoutingRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayRequestRoutingRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayRequestRoutingRulePropertiesFormat = new NamedObjectType("ApplicationGatewayRequestRoutingRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("ruleType", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'PathBasedRouting'")), TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendHttpSettings", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("httpListener", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("urlPathMap", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("rewriteRuleSet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("redirectConfiguration", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ApplicationGatewayRewriteRuleSet = new NamedObjectType("ApplicationGatewayRewriteRuleSet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayRewriteRuleSetPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ApplicationGatewayRewriteRuleSetPropertiesFormat = new NamedObjectType("ApplicationGatewayRewriteRuleSetPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("rewriteRules", () => new TypedArrayType(ApplicationGatewayRewriteRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ApplicationGatewayRewriteRule = new NamedObjectType("ApplicationGatewayRewriteRule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ruleSequence", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("conditions", () => new TypedArrayType(ApplicationGatewayRewriteRuleCondition), TypePropertyFlags.None), new LazyTypeProperty("actionSet", () => ApplicationGatewayRewriteRuleActionSet, TypePropertyFlags.None)}, null);
            ApplicationGatewayRewriteRuleCondition = new NamedObjectType("ApplicationGatewayRewriteRuleCondition", new ITypeProperty[]{new TypeProperty("variable", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pattern", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ignoreCase", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("negate", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ApplicationGatewayRewriteRuleActionSet = new NamedObjectType("ApplicationGatewayRewriteRuleActionSet", new ITypeProperty[]{new LazyTypeProperty("requestHeaderConfigurations", () => new TypedArrayType(ApplicationGatewayHeaderConfiguration), TypePropertyFlags.None), new LazyTypeProperty("responseHeaderConfigurations", () => new TypedArrayType(ApplicationGatewayHeaderConfiguration), TypePropertyFlags.None)}, null);
            ApplicationGatewayHeaderConfiguration = new NamedObjectType("ApplicationGatewayHeaderConfiguration", new ITypeProperty[]{new TypeProperty("headerName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("headerValue", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayRedirectConfiguration = new NamedObjectType("ApplicationGatewayRedirectConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayRedirectConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGatewayRedirectConfigurationPropertiesFormat = new NamedObjectType("ApplicationGatewayRedirectConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("redirectType", UnionType.Create(new StringLiteralType("'Permanent'"), new StringLiteralType("'Found'"), new StringLiteralType("'SeeOther'"), new StringLiteralType("'Temporary'")), TypePropertyFlags.None), new LazyTypeProperty("targetListener", () => SubResource, TypePropertyFlags.None), new TypeProperty("targetUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("includePath", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("includeQueryString", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("requestRoutingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("urlPathMaps", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("pathRules", () => new TypedArrayType(SubResource), TypePropertyFlags.None)}, null);
            ApplicationGatewayWebApplicationFirewallConfiguration = new NamedObjectType("ApplicationGatewayWebApplicationFirewallConfiguration", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("firewallMode", UnionType.Create(new StringLiteralType("'Detection'"), new StringLiteralType("'Prevention'")), TypePropertyFlags.Required), new TypeProperty("ruleSetType", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("ruleSetVersion", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("disabledRuleGroups", () => new TypedArrayType(ApplicationGatewayFirewallDisabledRuleGroup), TypePropertyFlags.None), new TypeProperty("requestBodyCheck", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("maxRequestBodySize", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("maxRequestBodySizeInKb", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("fileUploadLimitInMb", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("exclusions", () => new TypedArrayType(ApplicationGatewayFirewallExclusion), TypePropertyFlags.None)}, null);
            ApplicationGatewayFirewallDisabledRuleGroup = new NamedObjectType("ApplicationGatewayFirewallDisabledRuleGroup", new ITypeProperty[]{new TypeProperty("ruleGroupName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("rules", new TypedArrayType(LanguageConstants.Int), TypePropertyFlags.None)}, null);
            ApplicationGatewayFirewallExclusion = new NamedObjectType("ApplicationGatewayFirewallExclusion", new ITypeProperty[]{new TypeProperty("matchVariable", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("selectorMatchOperator", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("selector", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ApplicationGatewayAutoscaleConfiguration = new NamedObjectType("ApplicationGatewayAutoscaleConfiguration", new ITypeProperty[]{new TypeProperty("minCapacity", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("maxCapacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ManagedServiceIdentity = new NamedObjectType("ManagedServiceIdentity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", UnionType.Create(new StringLiteralType("'SystemAssigned'"), new StringLiteralType("'UserAssigned'"), new StringLiteralType("'SystemAssigned, UserAssigned'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new TypeProperty("userAssignedIdentities", new NamedObjectType("userAssignedIdentities", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties = new NamedObjectType("Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallPropertiesFormat = new NamedObjectType("AzureFirewallPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("applicationRuleCollections", () => new TypedArrayType(AzureFirewallApplicationRuleCollection), TypePropertyFlags.None), new LazyTypeProperty("natRuleCollections", () => new TypedArrayType(AzureFirewallNatRuleCollection), TypePropertyFlags.None), new LazyTypeProperty("networkRuleCollections", () => new TypedArrayType(AzureFirewallNetworkRuleCollection), TypePropertyFlags.None), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(AzureFirewallIPConfiguration), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("threatIntelMode", UnionType.Create(new StringLiteralType("'Alert'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Off'")), TypePropertyFlags.None), new LazyTypeProperty("virtualHub", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("firewallPolicy", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("hubIpAddresses", () => HubIPAddresses, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallApplicationRuleCollection = new NamedObjectType("AzureFirewallApplicationRuleCollection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AzureFirewallApplicationRuleCollectionPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallApplicationRuleCollectionPropertiesFormat = new NamedObjectType("AzureFirewallApplicationRuleCollectionPropertiesFormat", new ITypeProperty[]{new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("action", () => AzureFirewallRCAction, TypePropertyFlags.None), new LazyTypeProperty("rules", () => new TypedArrayType(AzureFirewallApplicationRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            AzureFirewallRCAction = new NamedObjectType("AzureFirewallRCAction", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.None)}, null);
            AzureFirewallApplicationRule = new NamedObjectType("AzureFirewallApplicationRule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("protocols", () => new TypedArrayType(AzureFirewallApplicationRuleProtocol), TypePropertyFlags.None), new TypeProperty("targetFqdns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("fqdnTags", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            AzureFirewallApplicationRuleProtocol = new NamedObjectType("AzureFirewallApplicationRuleProtocol", new ITypeProperty[]{new TypeProperty("protocolType", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'"), new StringLiteralType("'Mssql'")), TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            AzureFirewallNatRuleCollection = new NamedObjectType("AzureFirewallNatRuleCollection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AzureFirewallNatRuleCollectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallNatRuleCollectionProperties = new NamedObjectType("AzureFirewallNatRuleCollectionProperties", new ITypeProperty[]{new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("action", () => AzureFirewallNatRCAction, TypePropertyFlags.None), new LazyTypeProperty("rules", () => new TypedArrayType(AzureFirewallNatRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            AzureFirewallNatRCAction = new NamedObjectType("AzureFirewallNatRCAction", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'Snat'"), new StringLiteralType("'Dnat'")), TypePropertyFlags.None)}, null);
            AzureFirewallNatRule = new NamedObjectType("AzureFirewallNatRule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationPorts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("protocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'TCP'"), new StringLiteralType("'UDP'"), new StringLiteralType("'Any'"), new StringLiteralType("'ICMP'"))), TypePropertyFlags.None), new TypeProperty("translatedAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("translatedPort", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AzureFirewallNetworkRuleCollection = new NamedObjectType("AzureFirewallNetworkRuleCollection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AzureFirewallNetworkRuleCollectionPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallNetworkRuleCollectionPropertiesFormat = new NamedObjectType("AzureFirewallNetworkRuleCollectionPropertiesFormat", new ITypeProperty[]{new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("action", () => AzureFirewallRCAction, TypePropertyFlags.None), new LazyTypeProperty("rules", () => new TypedArrayType(AzureFirewallNetworkRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            AzureFirewallNetworkRule = new NamedObjectType("AzureFirewallNetworkRule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("protocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'TCP'"), new StringLiteralType("'UDP'"), new StringLiteralType("'Any'"), new StringLiteralType("'ICMP'"))), TypePropertyFlags.None), new TypeProperty("sourceAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationPorts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            AzureFirewallIPConfiguration = new NamedObjectType("AzureFirewallIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AzureFirewallIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            AzureFirewallIPConfigurationPropertiesFormat = new NamedObjectType("AzureFirewallIPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            HubIPAddresses = new NamedObjectType("HubIPAddresses", new ITypeProperty[]{new LazyTypeProperty("publicIPAddresses", () => new TypedArrayType(AzureFirewallPublicIPAddress), TypePropertyFlags.None), new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            AzureFirewallPublicIPAddress = new NamedObjectType("AzureFirewallPublicIPAddress", new ITypeProperty[]{new TypeProperty("address", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BastionHostPropertiesFormat = new NamedObjectType("BastionHostPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(BastionHostIPConfiguration), TypePropertyFlags.None), new TypeProperty("dnsName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            BastionHostIPConfiguration = new NamedObjectType("BastionHostIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => BastionHostIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            BastionHostIPConfigurationPropertiesFormat = new NamedObjectType("BastionHostIPConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.Required), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None)}, null);
            DdosCustomPolicyPropertiesFormat = new NamedObjectType("DdosCustomPolicyPropertiesFormat", new ITypeProperty[]{new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("publicIPAddresses", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("protocolCustomSettings", () => new TypedArrayType(ProtocolCustomSettingsFormat), TypePropertyFlags.None)}, null);
            ProtocolCustomSettingsFormat = new NamedObjectType("ProtocolCustomSettingsFormat", new ITypeProperty[]{new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'"), new StringLiteralType("'Syn'")), TypePropertyFlags.None), new TypeProperty("triggerRateOverride", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceRateOverride", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("triggerSensitivityOverride", UnionType.Create(new StringLiteralType("'Relaxed'"), new StringLiteralType("'Low'"), new StringLiteralType("'Default'"), new StringLiteralType("'High'")), TypePropertyFlags.None)}, null);
            DdosProtectionPlanPropertiesFormat = new NamedObjectType("DdosProtectionPlanPropertiesFormat", new ITypeProperty[]{new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("virtualNetworks", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly)}, null);
            AuthorizationPropertiesFormat = new NamedObjectType("AuthorizationPropertiesFormat", new ITypeProperty[]{new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authorizationUseStatus", UnionType.Create(new StringLiteralType("'Available'"), new StringLiteralType("'InUse'")), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPeeringPropertiesFormat = new NamedObjectType("ExpressRouteCircuitPeeringPropertiesFormat", new ITypeProperty[]{new TypeProperty("peeringType", UnionType.Create(new StringLiteralType("'AzurePublicPeering'"), new StringLiteralType("'AzurePrivatePeering'"), new StringLiteralType("'MicrosoftPeering'")), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("azureASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("peerASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("primaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primaryAzurePort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryAzurePort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vlanId", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("microsoftPeeringConfig", () => ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None), new LazyTypeProperty("stats", () => ExpressRouteCircuitStats, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("gatewayManagerEtag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastModifiedBy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("routeFilter", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("ipv6PeeringConfig", () => Ipv6ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None), new LazyTypeProperty("expressRouteConnection", () => ExpressRouteConnectionId, TypePropertyFlags.None), new LazyTypeProperty("connections", () => new TypedArrayType(ExpressRouteCircuitConnection), TypePropertyFlags.None), new LazyTypeProperty("peeredConnections", () => new TypedArrayType(PeerExpressRouteCircuitConnection), TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitPeeringConfig = new NamedObjectType("ExpressRouteCircuitPeeringConfig", new ITypeProperty[]{new TypeProperty("advertisedPublicPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("advertisedCommunities", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("advertisedPublicPrefixesState", UnionType.Create(new StringLiteralType("'NotConfigured'"), new StringLiteralType("'Configuring'"), new StringLiteralType("'Configured'"), new StringLiteralType("'ValidationNeeded'")), TypePropertyFlags.None), new TypeProperty("legacyMode", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("customerASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("routingRegistryName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitStats = new NamedObjectType("ExpressRouteCircuitStats", new ITypeProperty[]{new TypeProperty("primarybytesIn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("primarybytesOut", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secondarybytesIn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("secondarybytesOut", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            Ipv6ExpressRouteCircuitPeeringConfig = new NamedObjectType("Ipv6ExpressRouteCircuitPeeringConfig", new ITypeProperty[]{new TypeProperty("primaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("microsoftPeeringConfig", () => ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None), new LazyTypeProperty("routeFilter", () => SubResource, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None)}, null);
            ExpressRouteConnectionId = new NamedObjectType("ExpressRouteConnectionId", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitConnection = new NamedObjectType("ExpressRouteCircuitConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCircuitConnectionPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitConnectionPropertiesFormat = new NamedObjectType("ExpressRouteCircuitConnectionPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("expressRouteCircuitPeering", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("peerExpressRouteCircuitPeering", () => SubResource, TypePropertyFlags.None), new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("circuitConnectionStatus", UnionType.Create(new StringLiteralType("'Connected'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Disconnected'")), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            PeerExpressRouteCircuitConnection = new NamedObjectType("PeerExpressRouteCircuitConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PeerExpressRouteCircuitConnectionPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PeerExpressRouteCircuitConnectionPropertiesFormat = new NamedObjectType("PeerExpressRouteCircuitConnectionPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("expressRouteCircuitPeering", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("peerExpressRouteCircuitPeering", () => SubResource, TypePropertyFlags.None), new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("circuitConnectionStatus", UnionType.Create(new StringLiteralType("'Connected'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Disconnected'")), TypePropertyFlags.None), new TypeProperty("connectionName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("authResourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitSku = new NamedObjectType("ExpressRouteCircuitSku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'"), new StringLiteralType("'Basic'"), new StringLiteralType("'Local'")), TypePropertyFlags.None), new TypeProperty("family", UnionType.Create(new StringLiteralType("'UnlimitedData'"), new StringLiteralType("'MeteredData'")), TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPropertiesFormat = new NamedObjectType("ExpressRouteCircuitPropertiesFormat", new ITypeProperty[]{new TypeProperty("allowClassicOperations", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("circuitProvisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceProviderProvisioningState", UnionType.Create(new StringLiteralType("'NotProvisioned'"), new StringLiteralType("'Provisioning'"), new StringLiteralType("'Provisioned'"), new StringLiteralType("'Deprovisioning'")), TypePropertyFlags.None), new LazyTypeProperty("authorizations", () => new TypedArrayType(ExpressRouteCircuitAuthorization), TypePropertyFlags.None), new LazyTypeProperty("peerings", () => new TypedArrayType(ExpressRouteCircuitPeering), TypePropertyFlags.None), new TypeProperty("serviceKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceProviderNotes", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("serviceProviderProperties", () => ExpressRouteCircuitServiceProviderProperties, TypePropertyFlags.None), new LazyTypeProperty("expressRoutePort", () => SubResource, TypePropertyFlags.None), new TypeProperty("bandwidthInGbps", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("stag", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("gatewayManagerEtag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("globalReachEnabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitAuthorization = new NamedObjectType("ExpressRouteCircuitAuthorization", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => AuthorizationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitPeering = new NamedObjectType("ExpressRouteCircuitPeering", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCircuitPeeringPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCircuitServiceProviderProperties = new NamedObjectType("ExpressRouteCircuitServiceProviderProperties", new ITypeProperty[]{new TypeProperty("serviceProviderName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("peeringLocation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("bandwidthInMbps", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ExpressRouteCrossConnectionProperties = new NamedObjectType("ExpressRouteCrossConnectionProperties", new ITypeProperty[]{new TypeProperty("primaryAzurePort", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("secondaryAzurePort", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sTag", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("peeringLocation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("bandwidthInMbps", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("expressRouteCircuit", () => ExpressRouteCircuitReference, TypePropertyFlags.None), new TypeProperty("serviceProviderProvisioningState", UnionType.Create(new StringLiteralType("'NotProvisioned'"), new StringLiteralType("'Provisioning'"), new StringLiteralType("'Provisioned'"), new StringLiteralType("'Deprovisioning'")), TypePropertyFlags.None), new TypeProperty("serviceProviderNotes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("peerings", () => new TypedArrayType(ExpressRouteCrossConnectionPeering), TypePropertyFlags.None)}, null);
            ExpressRouteCircuitReference = new NamedObjectType("ExpressRouteCircuitReference", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteCrossConnectionPeering = new NamedObjectType("ExpressRouteCrossConnectionPeering", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCrossConnectionPeeringProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteCrossConnectionPeeringProperties = new NamedObjectType("ExpressRouteCrossConnectionPeeringProperties", new ITypeProperty[]{new TypeProperty("peeringType", UnionType.Create(new StringLiteralType("'AzurePublicPeering'"), new StringLiteralType("'AzurePrivatePeering'"), new StringLiteralType("'MicrosoftPeering'")), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("azureASN", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("peerASN", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("primaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryPeerAddressPrefix", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primaryAzurePort", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("secondaryAzurePort", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vlanId", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("microsoftPeeringConfig", () => ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("gatewayManagerEtag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastModifiedBy", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("ipv6PeeringConfig", () => Ipv6ExpressRouteCircuitPeeringConfig, TypePropertyFlags.None)}, null);
            ExpressRouteGatewayProperties = new NamedObjectType("ExpressRouteGatewayProperties", new ITypeProperty[]{new LazyTypeProperty("autoScaleConfiguration", () => ExpressRouteGatewayPropertiesAutoScaleConfiguration, TypePropertyFlags.None), new LazyTypeProperty("expressRouteConnections", () => new TypedArrayType(ExpressRouteConnection), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("virtualHub", () => VirtualHubId, TypePropertyFlags.Required)}, null);
            ExpressRouteGatewayPropertiesAutoScaleConfiguration = new NamedObjectType("ExpressRouteGatewayPropertiesAutoScaleConfiguration", new ITypeProperty[]{new LazyTypeProperty("bounds", () => ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds, TypePropertyFlags.None)}, null);
            ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds = new NamedObjectType("ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds", new ITypeProperty[]{new TypeProperty("min", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("max", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ExpressRouteConnection = new NamedObjectType("ExpressRouteConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ExpressRouteConnectionProperties = new NamedObjectType("ExpressRouteConnectionProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("expressRouteCircuitPeering", () => ExpressRouteCircuitPeeringId, TypePropertyFlags.Required), new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("routingWeight", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ExpressRouteCircuitPeeringId = new NamedObjectType("ExpressRouteCircuitPeeringId", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualHubId = new NamedObjectType("VirtualHubId", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRoutePortPropertiesFormat = new NamedObjectType("ExpressRoutePortPropertiesFormat", new ITypeProperty[]{new TypeProperty("peeringLocation", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("bandwidthInGbps", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("provisionedBandwidthInGbps", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("mtu", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("encapsulation", UnionType.Create(new StringLiteralType("'Dot1Q'"), new StringLiteralType("'QinQ'")), TypePropertyFlags.None), new TypeProperty("etherType", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("allocationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("links", () => new TypedArrayType(ExpressRouteLink), TypePropertyFlags.None), new LazyTypeProperty("circuits", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ExpressRouteLink = new NamedObjectType("ExpressRouteLink", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteLinkPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ExpressRouteLinkPropertiesFormat = new NamedObjectType("ExpressRouteLinkPropertiesFormat", new ITypeProperty[]{new TypeProperty("routerName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("interfaceName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("patchPanelId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("rackId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("connectorType", UnionType.Create(new StringLiteralType("'LC'"), new StringLiteralType("'SC'")), TypePropertyFlags.ReadOnly), new TypeProperty("adminState", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("macSecConfig", () => ExpressRouteLinkMacSecConfig, TypePropertyFlags.None)}, null);
            ExpressRouteLinkMacSecConfig = new NamedObjectType("ExpressRouteLinkMacSecConfig", new ITypeProperty[]{new TypeProperty("cknSecretIdentifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("cakSecretIdentifier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("cipher", UnionType.Create(new StringLiteralType("'gcm-aes-128'"), new StringLiteralType("'gcm-aes-256'")), TypePropertyFlags.None)}, null);
            FirewallPolicyPropertiesFormat = new NamedObjectType("FirewallPolicyPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("ruleGroups", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("basePolicy", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("firewalls", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("childPolicies", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("threatIntelMode", UnionType.Create(new StringLiteralType("'Alert'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Off'")), TypePropertyFlags.None)}, null);
            FirewallPolicyRuleGroupProperties = new NamedObjectType("FirewallPolicyRuleGroupProperties", new ITypeProperty[]{new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("rules", () => new TypedArrayType(FirewallPolicyRule), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            FirewallPolicyRule = new DiscriminatedObjectType("FirewallPolicyRule", "ruleType", new ITypeProperty[]{new LazyTypeProperty("FirewallPolicyRule", () => FirewallPolicyNatRule, TypePropertyFlags.None), new LazyTypeProperty("FirewallPolicyRule", () => FirewallPolicyFilterRule, TypePropertyFlags.None)});
            FirewallPolicyNatRule = new NamedObjectType("FirewallPolicyNatRule", new ITypeProperty[]{new LazyTypeProperty("action", () => FirewallPolicyNatRuleAction, TypePropertyFlags.None), new TypeProperty("translatedAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("translatedPort", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("ruleCondition", () => FirewallPolicyRuleCondition, TypePropertyFlags.None), new TypeProperty("ruleType", new StringLiteralType("'FirewallPolicyNatRule'"), TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            FirewallPolicyNatRuleAction = new NamedObjectType("FirewallPolicyNatRuleAction", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'DNAT'"), new StringLiteralType("'SNAT'")), TypePropertyFlags.None)}, null);
            FirewallPolicyRuleCondition = new DiscriminatedObjectType("FirewallPolicyRuleCondition", "ruleConditionType", new ITypeProperty[]{new LazyTypeProperty("FirewallPolicyRuleCondition", () => ApplicationRuleCondition, TypePropertyFlags.None), new LazyTypeProperty("FirewallPolicyRuleCondition", () => NetworkRuleCondition, TypePropertyFlags.None)});
            ApplicationRuleCondition = new NamedObjectType("ApplicationRuleCondition", new ITypeProperty[]{new TypeProperty("sourceAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("protocols", () => new TypedArrayType(FirewallPolicyRuleConditionApplicationProtocol), TypePropertyFlags.None), new TypeProperty("targetFqdns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("fqdnTags", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("ruleConditionType", new StringLiteralType("'ApplicationRuleCondition'"), TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FirewallPolicyRuleConditionApplicationProtocol = new NamedObjectType("FirewallPolicyRuleConditionApplicationProtocol", new ITypeProperty[]{new TypeProperty("protocolType", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Https'")), TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            NetworkRuleCondition = new NamedObjectType("NetworkRuleCondition", new ITypeProperty[]{new TypeProperty("ipProtocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'TCP'"), new StringLiteralType("'UDP'"), new StringLiteralType("'Any'"), new StringLiteralType("'ICMP'"))), TypePropertyFlags.None), new TypeProperty("sourceAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("destinationPorts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("ruleConditionType", new StringLiteralType("'NetworkRuleCondition'"), TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FirewallPolicyFilterRule = new NamedObjectType("FirewallPolicyFilterRule", new ITypeProperty[]{new LazyTypeProperty("action", () => FirewallPolicyFilterRuleAction, TypePropertyFlags.None), new LazyTypeProperty("ruleConditions", () => new TypedArrayType(FirewallPolicyRuleCondition), TypePropertyFlags.None), new TypeProperty("ruleType", new StringLiteralType("'FirewallPolicyFilterRule'"), TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            FirewallPolicyFilterRuleAction = new NamedObjectType("FirewallPolicyFilterRuleAction", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Alert '")), TypePropertyFlags.None)}, null);
            LoadBalancerSku = new NamedObjectType("LoadBalancerSku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'")), TypePropertyFlags.None)}, null);
            LoadBalancerPropertiesFormat = new NamedObjectType("LoadBalancerPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(FrontendIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("backendAddressPools", () => new TypedArrayType(BackendAddressPool), TypePropertyFlags.None), new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(LoadBalancingRule), TypePropertyFlags.None), new LazyTypeProperty("probes", () => new TypedArrayType(Probe), TypePropertyFlags.None), new LazyTypeProperty("inboundNatRules", () => new TypedArrayType(InboundNatRule), TypePropertyFlags.None), new LazyTypeProperty("inboundNatPools", () => new TypedArrayType(InboundNatPool), TypePropertyFlags.None), new LazyTypeProperty("outboundRules", () => new TypedArrayType(OutboundRule), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            LoadBalancingRule = new NamedObjectType("LoadBalancingRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => LoadBalancingRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            LoadBalancingRulePropertiesFormat = new NamedObjectType("LoadBalancingRulePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("probe", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'"), new StringLiteralType("'All'")), TypePropertyFlags.Required), new TypeProperty("loadDistribution", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'SourceIP'"), new StringLiteralType("'SourceIPProtocol'")), TypePropertyFlags.None), new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enableFloatingIP", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableTcpReset", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("disableOutboundSnat", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            Probe = new NamedObjectType("Probe", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ProbePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ProbePropertiesFormat = new NamedObjectType("ProbePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("loadBalancingRules", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Http'"), new StringLiteralType("'Tcp'"), new StringLiteralType("'Https'")), TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("intervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("numberOfProbes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("requestPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            InboundNatPool = new NamedObjectType("InboundNatPool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => InboundNatPoolPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            InboundNatPoolPropertiesFormat = new NamedObjectType("InboundNatPoolPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("frontendIPConfiguration", () => SubResource, TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Udp'"), new StringLiteralType("'Tcp'"), new StringLiteralType("'All'")), TypePropertyFlags.Required), new TypeProperty("frontendPortRangeStart", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("frontendPortRangeEnd", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enableFloatingIP", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableTcpReset", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            OutboundRule = new NamedObjectType("OutboundRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => OutboundRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            OutboundRulePropertiesFormat = new NamedObjectType("OutboundRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("allocatedOutboundPorts", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("frontendIPConfigurations", () => new TypedArrayType(SubResource), TypePropertyFlags.Required), new LazyTypeProperty("backendAddressPool", () => SubResource, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'"), new StringLiteralType("'All'")), TypePropertyFlags.Required), new TypeProperty("enableTcpReset", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            NatGatewaySku = new NamedObjectType("NatGatewaySku", new ITypeProperty[]{new TypeProperty("name", new StringLiteralType("'Standard'"), TypePropertyFlags.None)}, null);
            NatGatewayPropertiesFormat = new NamedObjectType("NatGatewayPropertiesFormat", new ITypeProperty[]{new TypeProperty("idleTimeoutInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("publicIpAddresses", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("publicIpPrefixes", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            NetworkProfilePropertiesFormat = new NamedObjectType("NetworkProfilePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("containerNetworkInterfaces", () => new TypedArrayType(ContainerNetworkInterface), TypePropertyFlags.None), new LazyTypeProperty("containerNetworkInterfaceConfigurations", () => new TypedArrayType(ContainerNetworkInterfaceConfiguration), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ContainerNetworkInterface = new NamedObjectType("ContainerNetworkInterface", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ContainerNetworkInterfacePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerNetworkInterfacePropertiesFormat = new NamedObjectType("ContainerNetworkInterfacePropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("containerNetworkInterfaceConfiguration", () => ContainerNetworkInterfaceConfiguration, TypePropertyFlags.None), new LazyTypeProperty("container", () => Container, TypePropertyFlags.None), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(ContainerNetworkInterfaceIpConfiguration), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ContainerNetworkInterfaceConfiguration = new NamedObjectType("ContainerNetworkInterfaceConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ContainerNetworkInterfaceConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerNetworkInterfaceConfigurationPropertiesFormat = new NamedObjectType("ContainerNetworkInterfaceConfigurationPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(IPConfigurationProfile), TypePropertyFlags.None), new LazyTypeProperty("containerNetworkInterfaces", () => new TypedArrayType(SubResource), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            Container = new NamedObjectType("Container", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerNetworkInterfaceIpConfiguration = new NamedObjectType("ContainerNetworkInterfaceIpConfiguration", new ITypeProperty[]{new LazyTypeProperty("properties", () => ContainerNetworkInterfaceIpConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerNetworkInterfaceIpConfigurationPropertiesFormat = new NamedObjectType("ContainerNetworkInterfaceIpConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            NetworkWatcherPropertiesFormat = new NamedObjectType("NetworkWatcherPropertiesFormat", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PacketCaptureParameters = new NamedObjectType("PacketCaptureParameters", new ITypeProperty[]{new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("bytesToCapturePerPacket", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalBytesPerSession", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("timeLimitInSeconds", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("storageLocation", () => PacketCaptureStorageLocation, TypePropertyFlags.Required), new LazyTypeProperty("filters", () => new TypedArrayType(PacketCaptureFilter), TypePropertyFlags.None)}, null);
            PacketCaptureStorageLocation = new NamedObjectType("PacketCaptureStorageLocation", new ITypeProperty[]{new TypeProperty("storageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storagePath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("filePath", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PacketCaptureFilter = new NamedObjectType("PacketCaptureFilter", new ITypeProperty[]{new TypeProperty("protocol", UnionType.Create(new StringLiteralType("'TCP'"), new StringLiteralType("'UDP'"), new StringLiteralType("'Any'")), TypePropertyFlags.None), new TypeProperty("localIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remoteIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("localPort", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("remotePort", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ConnectionMonitorParameters = new NamedObjectType("ConnectionMonitorParameters", new ITypeProperty[]{new LazyTypeProperty("source", () => ConnectionMonitorSource, TypePropertyFlags.Required), new LazyTypeProperty("destination", () => ConnectionMonitorDestination, TypePropertyFlags.Required), new TypeProperty("autoStart", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("monitoringIntervalInSeconds", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ConnectionMonitorSource = new NamedObjectType("ConnectionMonitorSource", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ConnectionMonitorDestination = new NamedObjectType("ConnectionMonitorDestination", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("address", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            PrivateLinkServiceProperties = new NamedObjectType("PrivateLinkServiceProperties", new ITypeProperty[]{new LazyTypeProperty("loadBalancerFrontendIpConfigurations", () => new TypedArrayType(FrontendIPConfiguration), TypePropertyFlags.None), new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(PrivateLinkServiceIpConfiguration), TypePropertyFlags.None), new LazyTypeProperty("networkInterfaces", () => new TypedArrayType(NetworkInterface), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("privateEndpointConnections", () => new TypedArrayType(PrivateEndpointConnection), TypePropertyFlags.None), new LazyTypeProperty("visibility", () => PrivateLinkServicePropertiesVisibility, TypePropertyFlags.None), new LazyTypeProperty("autoApproval", () => PrivateLinkServicePropertiesAutoApproval, TypePropertyFlags.None), new TypeProperty("fqdns", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("alias", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateLinkServiceIpConfiguration = new NamedObjectType("PrivateLinkServiceIpConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateLinkServiceIpConfigurationProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateLinkServiceIpConfigurationProperties = new NamedObjectType("PrivateLinkServiceIpConfigurationProperties", new ITypeProperty[]{new TypeProperty("privateIPAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => Subnet, TypePropertyFlags.None), new TypeProperty("primary", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("privateIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None)}, null);
            PrivateEndpointConnection = new NamedObjectType("PrivateEndpointConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateEndpointConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateEndpointConnectionProperties = new NamedObjectType("PrivateEndpointConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("privateEndpoint", () => PrivateEndpoint, TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnectionState", () => PrivateLinkServiceConnectionState, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PrivateLinkServicePropertiesVisibility = new NamedObjectType("PrivateLinkServicePropertiesVisibility", new ITypeProperty[]{new TypeProperty("subscriptions", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            PrivateLinkServicePropertiesAutoApproval = new NamedObjectType("PrivateLinkServicePropertiesAutoApproval", new ITypeProperty[]{new TypeProperty("subscriptions", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            PublicIPPrefixSku = new NamedObjectType("PublicIPPrefixSku", new ITypeProperty[]{new TypeProperty("name", new StringLiteralType("'Standard'"), TypePropertyFlags.None)}, null);
            PublicIPPrefixPropertiesFormat = new NamedObjectType("PublicIPPrefixPropertiesFormat", new ITypeProperty[]{new TypeProperty("publicIPAddressVersion", UnionType.Create(new StringLiteralType("'IPv4'"), new StringLiteralType("'IPv6'")), TypePropertyFlags.None), new LazyTypeProperty("ipTags", () => new TypedArrayType(IpTag), TypePropertyFlags.None), new TypeProperty("prefixLength", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("ipPrefix", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddresses", () => new TypedArrayType(ReferencedPublicIpAddress), TypePropertyFlags.None), new LazyTypeProperty("loadBalancerFrontendIpConfiguration", () => SubResource, TypePropertyFlags.ReadOnly), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            ReferencedPublicIpAddress = new NamedObjectType("ReferencedPublicIpAddress", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RouteFilterPropertiesFormat = new NamedObjectType("RouteFilterPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("rules", () => new TypedArrayType(RouteFilterRule), TypePropertyFlags.None), new LazyTypeProperty("peerings", () => new TypedArrayType(ExpressRouteCircuitPeering), TypePropertyFlags.None), new LazyTypeProperty("ipv6Peerings", () => new TypedArrayType(ExpressRouteCircuitPeering), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            RouteFilterRule = new NamedObjectType("RouteFilterRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteFilterRulePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            RouteFilterRulePropertiesFormat = new NamedObjectType("RouteFilterRulePropertiesFormat", new ITypeProperty[]{new TypeProperty("access", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.Required), new TypeProperty("routeFilterRuleType", new StringLiteralType("'Community'"), TypePropertyFlags.Required), new TypeProperty("communities", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkPropertiesFormat = new NamedObjectType("VirtualNetworkPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("addressSpace", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("dhcpOptions", () => DhcpOptions, TypePropertyFlags.None), new LazyTypeProperty("subnets", () => new TypedArrayType(Subnet), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkPeerings", () => new TypedArrayType(VirtualNetworkPeering), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("enableDdosProtection", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableVmProtection", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ddosProtectionPlan", () => SubResource, TypePropertyFlags.None)}, null);
            AddressSpace = new NamedObjectType("AddressSpace", new ITypeProperty[]{new TypeProperty("addressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            DhcpOptions = new NamedObjectType("DhcpOptions", new ITypeProperty[]{new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            VirtualNetworkPeering = new NamedObjectType("VirtualNetworkPeering", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkPeeringPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkPeeringPropertiesFormat = new NamedObjectType("VirtualNetworkPeeringPropertiesFormat", new ITypeProperty[]{new TypeProperty("allowVirtualNetworkAccess", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowForwardedTraffic", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowGatewayTransit", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useRemoteGateways", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("remoteVirtualNetwork", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("remoteAddressSpace", () => AddressSpace, TypePropertyFlags.None), new TypeProperty("peeringState", UnionType.Create(new StringLiteralType("'Initiated'"), new StringLiteralType("'Connected'"), new StringLiteralType("'Disconnected'")), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("ipConfigurations", () => new TypedArrayType(VirtualNetworkGatewayIPConfiguration), TypePropertyFlags.None), new TypeProperty("gatewayType", UnionType.Create(new StringLiteralType("'Vpn'"), new StringLiteralType("'ExpressRoute'")), TypePropertyFlags.None), new TypeProperty("vpnType", UnionType.Create(new StringLiteralType("'PolicyBased'"), new StringLiteralType("'RouteBased'")), TypePropertyFlags.None), new TypeProperty("vpnGatewayGeneration", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Generation1'"), new StringLiteralType("'Generation2'")), TypePropertyFlags.None), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("activeActive", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("gatewayDefaultSite", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("sku", () => VirtualNetworkGatewaySku, TypePropertyFlags.None), new LazyTypeProperty("vpnClientConfiguration", () => VpnClientConfiguration, TypePropertyFlags.None), new LazyTypeProperty("bgpSettings", () => BgpSettings, TypePropertyFlags.None), new LazyTypeProperty("customRoutes", () => AddressSpace, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkGatewayIPConfiguration = new NamedObjectType("VirtualNetworkGatewayIPConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayIPConfigurationPropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayIPConfigurationPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayIPConfigurationPropertiesFormat", new ITypeProperty[]{new TypeProperty("privateIPAllocationMethod", UnionType.Create(new StringLiteralType("'Static'"), new StringLiteralType("'Dynamic'")), TypePropertyFlags.None), new LazyTypeProperty("subnet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("publicIPAddress", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkGatewaySku = new NamedObjectType("VirtualNetworkGatewaySku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'HighPerformance'"), new StringLiteralType("'Standard'"), new StringLiteralType("'UltraPerformance'"), new StringLiteralType("'VpnGw1'"), new StringLiteralType("'VpnGw2'"), new StringLiteralType("'VpnGw3'"), new StringLiteralType("'VpnGw4'"), new StringLiteralType("'VpnGw5'"), new StringLiteralType("'VpnGw1AZ'"), new StringLiteralType("'VpnGw2AZ'"), new StringLiteralType("'VpnGw3AZ'"), new StringLiteralType("'VpnGw4AZ'"), new StringLiteralType("'VpnGw5AZ'"), new StringLiteralType("'ErGw1AZ'"), new StringLiteralType("'ErGw2AZ'"), new StringLiteralType("'ErGw3AZ'")), TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'HighPerformance'"), new StringLiteralType("'Standard'"), new StringLiteralType("'UltraPerformance'"), new StringLiteralType("'VpnGw1'"), new StringLiteralType("'VpnGw2'"), new StringLiteralType("'VpnGw3'"), new StringLiteralType("'VpnGw4'"), new StringLiteralType("'VpnGw5'"), new StringLiteralType("'VpnGw1AZ'"), new StringLiteralType("'VpnGw2AZ'"), new StringLiteralType("'VpnGw3AZ'"), new StringLiteralType("'VpnGw4AZ'"), new StringLiteralType("'VpnGw5AZ'"), new StringLiteralType("'ErGw1AZ'"), new StringLiteralType("'ErGw2AZ'"), new StringLiteralType("'ErGw3AZ'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VpnClientConfiguration = new NamedObjectType("VpnClientConfiguration", new ITypeProperty[]{new LazyTypeProperty("vpnClientAddressPool", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("vpnClientRootCertificates", () => new TypedArrayType(VpnClientRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("vpnClientRevokedCertificates", () => new TypedArrayType(VpnClientRevokedCertificate), TypePropertyFlags.None), new TypeProperty("vpnClientProtocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'IkeV2'"), new StringLiteralType("'SSTP'"), new StringLiteralType("'OpenVPN'"))), TypePropertyFlags.None), new LazyTypeProperty("vpnClientIpsecPolicies", () => new TypedArrayType(IpsecPolicy), TypePropertyFlags.None), new TypeProperty("radiusServerAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("radiusServerSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("aadTenant", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("aadAudience", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("aadIssuer", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnClientRootCertificate = new NamedObjectType("VpnClientRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnClientRootCertificatePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnClientRootCertificatePropertiesFormat = new NamedObjectType("VpnClientRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VpnClientRevokedCertificate = new NamedObjectType("VpnClientRevokedCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnClientRevokedCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnClientRevokedCertificatePropertiesFormat = new NamedObjectType("VpnClientRevokedCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            IpsecPolicy = new NamedObjectType("IpsecPolicy", new ITypeProperty[]{new TypeProperty("saLifeTimeSeconds", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("saDataSizeKilobytes", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("ipsecEncryption", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'DES'"), new StringLiteralType("'DES3'"), new StringLiteralType("'AES128'"), new StringLiteralType("'AES192'"), new StringLiteralType("'AES256'"), new StringLiteralType("'GCMAES128'"), new StringLiteralType("'GCMAES192'"), new StringLiteralType("'GCMAES256'")), TypePropertyFlags.Required), new TypeProperty("ipsecIntegrity", UnionType.Create(new StringLiteralType("'MD5'"), new StringLiteralType("'SHA1'"), new StringLiteralType("'SHA256'"), new StringLiteralType("'GCMAES128'"), new StringLiteralType("'GCMAES192'"), new StringLiteralType("'GCMAES256'")), TypePropertyFlags.Required), new TypeProperty("ikeEncryption", UnionType.Create(new StringLiteralType("'DES'"), new StringLiteralType("'DES3'"), new StringLiteralType("'AES128'"), new StringLiteralType("'AES192'"), new StringLiteralType("'AES256'"), new StringLiteralType("'GCMAES256'"), new StringLiteralType("'GCMAES128'")), TypePropertyFlags.Required), new TypeProperty("ikeIntegrity", UnionType.Create(new StringLiteralType("'MD5'"), new StringLiteralType("'SHA1'"), new StringLiteralType("'SHA256'"), new StringLiteralType("'SHA384'"), new StringLiteralType("'GCMAES256'"), new StringLiteralType("'GCMAES128'")), TypePropertyFlags.Required), new TypeProperty("dhGroup", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'DHGroup1'"), new StringLiteralType("'DHGroup2'"), new StringLiteralType("'DHGroup14'"), new StringLiteralType("'DHGroup2048'"), new StringLiteralType("'ECP256'"), new StringLiteralType("'ECP384'"), new StringLiteralType("'DHGroup24'")), TypePropertyFlags.Required), new TypeProperty("pfsGroup", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'PFS1'"), new StringLiteralType("'PFS2'"), new StringLiteralType("'PFS2048'"), new StringLiteralType("'ECP256'"), new StringLiteralType("'ECP384'"), new StringLiteralType("'PFS24'"), new StringLiteralType("'PFS14'"), new StringLiteralType("'PFSMM'")), TypePropertyFlags.Required)}, null);
            BgpSettings = new NamedObjectType("BgpSettings", new ITypeProperty[]{new TypeProperty("asn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("bgpPeeringAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("peerWeight", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VirtualNetworkGatewayConnectionPropertiesFormat = new NamedObjectType("VirtualNetworkGatewayConnectionPropertiesFormat", new ITypeProperty[]{new TypeProperty("authorizationKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkGateway1", () => VirtualNetworkGateway, TypePropertyFlags.Required), new LazyTypeProperty("virtualNetworkGateway2", () => VirtualNetworkGateway, TypePropertyFlags.None), new LazyTypeProperty("localNetworkGateway2", () => LocalNetworkGateway, TypePropertyFlags.None), new TypeProperty("connectionType", UnionType.Create(new StringLiteralType("'IPsec'"), new StringLiteralType("'Vnet2Vnet'"), new StringLiteralType("'ExpressRoute'"), new StringLiteralType("'VPNClient'")), TypePropertyFlags.Required), new TypeProperty("connectionProtocol", UnionType.Create(new StringLiteralType("'IKEv2'"), new StringLiteralType("'IKEv1'")), TypePropertyFlags.None), new TypeProperty("routingWeight", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("tunnelConnectionStatus", () => new TypedArrayType(TunnelConnectionHealth), TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("peer", () => SubResource, TypePropertyFlags.None), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("usePolicyBasedTrafficSelectors", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ipsecPolicies", () => new TypedArrayType(IpsecPolicy), TypePropertyFlags.None), new LazyTypeProperty("trafficSelectorPolicies", () => new TypedArrayType(TrafficSelectorPolicy), TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("expressRouteGatewayBypass", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            VirtualNetworkGateway = new NamedObjectType("VirtualNetworkGateway", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LocalNetworkGateway = new NamedObjectType("LocalNetworkGateway", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LocalNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LocalNetworkGatewayPropertiesFormat = new NamedObjectType("LocalNetworkGatewayPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("localNetworkAddressSpace", () => AddressSpace, TypePropertyFlags.None), new TypeProperty("gatewayIpAddress", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("bgpSettings", () => BgpSettings, TypePropertyFlags.None), new TypeProperty("resourceGuid", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            TunnelConnectionHealth = new NamedObjectType("TunnelConnectionHealth", new ITypeProperty[]{new TypeProperty("tunnel", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.ReadOnly), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("lastConnectionEstablishedUtcTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            TrafficSelectorPolicy = new NamedObjectType("TrafficSelectorPolicy", new ITypeProperty[]{new TypeProperty("localAddressRanges", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new TypeProperty("remoteAddressRanges", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required)}, null);
            VirtualRouterPropertiesFormat = new NamedObjectType("VirtualRouterPropertiesFormat", new ITypeProperty[]{new TypeProperty("virtualRouterAsn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("virtualRouterIps", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("hostedSubnet", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("hostedGateway", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("peerings", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VirtualRouterPeeringProperties = new NamedObjectType("VirtualRouterPeeringProperties", new ITypeProperty[]{new TypeProperty("peerAsn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("peerIp", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VirtualWanProperties = new NamedObjectType("VirtualWanProperties", new ITypeProperty[]{new TypeProperty("disableVpnEncryption", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("virtualHubs", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new LazyTypeProperty("vpnSites", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("securityProviderName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowBranchToBranchTraffic", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowVnetToVnetTraffic", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("office365LocalBreakoutCategory", UnionType.Create(new StringLiteralType("'Optimize'"), new StringLiteralType("'OptimizeAndAllow'"), new StringLiteralType("'All'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfigurations", () => new TypedArrayType(P2SVpnServerConfiguration), TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            P2SVpnServerConfiguration = new NamedObjectType("P2SVpnServerConfiguration", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnServerConfigurationProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            P2SVpnServerConfigurationProperties = new NamedObjectType("P2SVpnServerConfigurationProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vpnProtocols", new TypedArrayType(UnionType.Create(new StringLiteralType("'IkeV2'"), new StringLiteralType("'OpenVPN'"))), TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfigVpnClientRootCertificates", () => new TypedArrayType(P2SVpnServerConfigVpnClientRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfigVpnClientRevokedCertificates", () => new TypedArrayType(P2SVpnServerConfigVpnClientRevokedCertificate), TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfigRadiusServerRootCertificates", () => new TypedArrayType(P2SVpnServerConfigRadiusServerRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfigRadiusClientRootCertificates", () => new TypedArrayType(P2SVpnServerConfigRadiusClientRootCertificate), TypePropertyFlags.None), new LazyTypeProperty("vpnClientIpsecPolicies", () => new TypedArrayType(IpsecPolicy), TypePropertyFlags.None), new TypeProperty("radiusServerAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("radiusServerSecret", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("p2SVpnGateways", () => new TypedArrayType(SubResource), TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            P2SVpnServerConfigVpnClientRootCertificate = new NamedObjectType("P2SVpnServerConfigVpnClientRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat = new NamedObjectType("P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            P2SVpnServerConfigVpnClientRevokedCertificate = new NamedObjectType("P2SVpnServerConfigVpnClientRevokedCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat = new NamedObjectType("P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            P2SVpnServerConfigRadiusServerRootCertificate = new NamedObjectType("P2SVpnServerConfigRadiusServerRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat = new NamedObjectType("P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("publicCertData", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            P2SVpnServerConfigRadiusClientRootCertificate = new NamedObjectType("P2SVpnServerConfigRadiusClientRootCertificate", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat = new NamedObjectType("P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat", new ITypeProperty[]{new TypeProperty("thumbprint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            VpnSiteProperties = new NamedObjectType("VpnSiteProperties", new ITypeProperty[]{new LazyTypeProperty("virtualWan", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("deviceProperties", () => DeviceProperties, TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("siteKey", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("addressSpace", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("bgpProperties", () => BgpSettings, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("isSecuritySite", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("vpnSiteLinks", () => new TypedArrayType(VpnSiteLink), TypePropertyFlags.None)}, null);
            DeviceProperties = new NamedObjectType("DeviceProperties", new ITypeProperty[]{new TypeProperty("deviceVendor", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deviceModel", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("linkSpeedInMbps", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VpnSiteLink = new NamedObjectType("VpnSiteLink", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnSiteLinkProperties, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VpnSiteLinkProperties = new NamedObjectType("VpnSiteLinkProperties", new ITypeProperty[]{new LazyTypeProperty("linkProperties", () => VpnLinkProviderProperties, TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("bgpProperties", () => VpnLinkBgpSettings, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            VpnLinkProviderProperties = new NamedObjectType("VpnLinkProviderProperties", new ITypeProperty[]{new TypeProperty("linkProviderName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("linkSpeedInMbps", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VpnLinkBgpSettings = new NamedObjectType("VpnLinkBgpSettings", new ITypeProperty[]{new TypeProperty("asn", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("bgpPeeringAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualHubProperties = new NamedObjectType("VirtualHubProperties", new ITypeProperty[]{new LazyTypeProperty("virtualWan", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("vpnGateway", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("p2SVpnGateway", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("expressRouteGateway", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkConnections", () => new TypedArrayType(HubVirtualNetworkConnection), TypePropertyFlags.None), new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("routeTable", () => VirtualHubRouteTable, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            HubVirtualNetworkConnection = new NamedObjectType("HubVirtualNetworkConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => HubVirtualNetworkConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            HubVirtualNetworkConnectionProperties = new NamedObjectType("HubVirtualNetworkConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("remoteVirtualNetwork", () => SubResource, TypePropertyFlags.None), new TypeProperty("allowHubToRemoteVnetTransit", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("allowRemoteVnetToUseHubVnetGateways", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableInternetSecurity", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            VirtualHubRouteTable = new NamedObjectType("VirtualHubRouteTable", new ITypeProperty[]{new LazyTypeProperty("routes", () => new TypedArrayType(VirtualHubRoute), TypePropertyFlags.None)}, null);
            VirtualHubRoute = new NamedObjectType("VirtualHubRoute", new ITypeProperty[]{new TypeProperty("addressPrefixes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("nextHopIpAddress", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VpnGatewayProperties = new NamedObjectType("VpnGatewayProperties", new ITypeProperty[]{new LazyTypeProperty("virtualHub", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("connections", () => new TypedArrayType(VpnConnection), TypePropertyFlags.None), new LazyTypeProperty("bgpSettings", () => BgpSettings, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("vpnGatewayScaleUnit", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VpnConnection = new NamedObjectType("VpnConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VpnConnectionProperties = new NamedObjectType("VpnConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("remoteVpnSite", () => SubResource, TypePropertyFlags.None), new TypeProperty("routingWeight", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.None), new TypeProperty("vpnConnectionProtocolType", UnionType.Create(new StringLiteralType("'IKEv2'"), new StringLiteralType("'IKEv1'")), TypePropertyFlags.None), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("connectionBandwidth", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("usePolicyBasedTrafficSelectors", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ipsecPolicies", () => new TypedArrayType(IpsecPolicy), TypePropertyFlags.None), new TypeProperty("enableRateLimiting", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("enableInternetSecurity", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useLocalAzureIpAddress", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new LazyTypeProperty("vpnLinkConnections", () => new TypedArrayType(VpnSiteLinkConnection), TypePropertyFlags.None)}, null);
            VpnSiteLinkConnection = new NamedObjectType("VpnSiteLinkConnection", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnSiteLinkConnectionProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VpnSiteLinkConnectionProperties = new NamedObjectType("VpnSiteLinkConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("vpnSiteLink", () => SubResource, TypePropertyFlags.None), new TypeProperty("routingWeight", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("connectionStatus", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Connecting'"), new StringLiteralType("'Connected'"), new StringLiteralType("'NotConnected'")), TypePropertyFlags.None), new TypeProperty("vpnConnectionProtocolType", UnionType.Create(new StringLiteralType("'IKEv2'"), new StringLiteralType("'IKEv1'")), TypePropertyFlags.None), new TypeProperty("ingressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("egressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("connectionBandwidth", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("sharedKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("enableBgp", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("usePolicyBasedTrafficSelectors", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("ipsecPolicies", () => new TypedArrayType(IpsecPolicy), TypePropertyFlags.None), new TypeProperty("enableRateLimiting", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("useLocalAzureIpAddress", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            P2SVpnGatewayProperties = new NamedObjectType("P2SVpnGatewayProperties", new ITypeProperty[]{new LazyTypeProperty("virtualHub", () => SubResource, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None), new TypeProperty("vpnGatewayScaleUnit", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("p2SVpnServerConfiguration", () => SubResource, TypePropertyFlags.None), new LazyTypeProperty("vpnClientAddressPool", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("customRoutes", () => AddressSpace, TypePropertyFlags.None), new LazyTypeProperty("vpnClientConnectionHealth", () => VpnClientConnectionHealth, TypePropertyFlags.ReadOnly)}, null);
            VpnClientConnectionHealth = new NamedObjectType("VpnClientConnectionHealth", new ITypeProperty[]{new TypeProperty("totalIngressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("totalEgressBytesTransferred", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("vpnClientConnectionsCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("allocatedIpAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            WebApplicationFirewallPolicyPropertiesFormat = new NamedObjectType("WebApplicationFirewallPolicyPropertiesFormat", new ITypeProperty[]{new LazyTypeProperty("policySettings", () => PolicySettings, TypePropertyFlags.None), new LazyTypeProperty("customRules", () => new TypedArrayType(WebApplicationFirewallCustomRule), TypePropertyFlags.None), new LazyTypeProperty("applicationGateways", () => new TypedArrayType(ApplicationGateway), TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("resourceState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Enabling'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabling'"), new StringLiteralType("'Disabled'"), new StringLiteralType("'Deleting'")), TypePropertyFlags.ReadOnly)}, null);
            PolicySettings = new NamedObjectType("PolicySettings", new ITypeProperty[]{new TypeProperty("enabledState", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("mode", UnionType.Create(new StringLiteralType("'Prevention'"), new StringLiteralType("'Detection'")), TypePropertyFlags.None)}, null);
            WebApplicationFirewallCustomRule = new NamedObjectType("WebApplicationFirewallCustomRule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("priority", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("ruleType", UnionType.Create(new StringLiteralType("'MatchRule'"), new StringLiteralType("'Invalid'")), TypePropertyFlags.Required), new LazyTypeProperty("matchConditions", () => new TypedArrayType(MatchCondition), TypePropertyFlags.Required), new TypeProperty("action", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Block'"), new StringLiteralType("'Log'")), TypePropertyFlags.Required)}, null);
            MatchCondition = new NamedObjectType("MatchCondition", new ITypeProperty[]{new LazyTypeProperty("matchVariables", () => new TypedArrayType(MatchVariable), TypePropertyFlags.Required), new TypeProperty("operator", UnionType.Create(new StringLiteralType("'IPMatch'"), new StringLiteralType("'Equal'"), new StringLiteralType("'Contains'"), new StringLiteralType("'LessThan'"), new StringLiteralType("'GreaterThan'"), new StringLiteralType("'LessThanOrEqual'"), new StringLiteralType("'GreaterThanOrEqual'"), new StringLiteralType("'BeginsWith'"), new StringLiteralType("'EndsWith'"), new StringLiteralType("'Regex'")), TypePropertyFlags.Required), new TypeProperty("negationConditon", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("matchValues", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new TypeProperty("transforms", new TypedArrayType(UnionType.Create(new StringLiteralType("'Lowercase'"), new StringLiteralType("'Trim'"), new StringLiteralType("'UrlDecode'"), new StringLiteralType("'UrlEncode'"), new StringLiteralType("'RemoveNulls'"), new StringLiteralType("'HtmlEntityDecode'"))), TypePropertyFlags.None)}, null);
            MatchVariable = new NamedObjectType("MatchVariable", new ITypeProperty[]{new TypeProperty("variableName", UnionType.Create(new StringLiteralType("'RemoteAddr'"), new StringLiteralType("'RequestMethod'"), new StringLiteralType("'QueryString'"), new StringLiteralType("'PostArgs'"), new StringLiteralType("'RequestUri'"), new StringLiteralType("'RequestHeaders'"), new StringLiteralType("'RequestBody'"), new StringLiteralType("'RequestCookies'")), TypePropertyFlags.Required), new TypeProperty("selector", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ApplicationGateway = new NamedObjectType("ApplicationGateway", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayPropertiesFormat, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ManagedServiceIdentity, TypePropertyFlags.None)}, null);
            ResourceType_applicationGateways = new ResourceType("Microsoft.Network/applicationGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/applicationGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("identity", () => ManagedServiceIdentity, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_applicationGateways);
            ResourceType_applicationSecurityGroups = new ResourceType("Microsoft.Network/applicationSecurityGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/applicationSecurityGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationSecurityGroupPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_applicationSecurityGroups);
            ResourceType_azureFirewalls = new ResourceType("Microsoft.Network/azureFirewalls", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/azureFirewalls'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => AzureFirewallPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_azureFirewalls);
            ResourceType_bastionHosts = new ResourceType("Microsoft.Network/bastionHosts", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/bastionHosts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => BastionHostPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_bastionHosts);
            ResourceType_ddosCustomPolicies = new ResourceType("Microsoft.Network/ddosCustomPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/ddosCustomPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DdosCustomPolicyPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_ddosCustomPolicies);
            ResourceType_ddosProtectionPlans = new ResourceType("Microsoft.Network/ddosProtectionPlans", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/ddosProtectionPlans'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DdosProtectionPlanPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_ddosProtectionPlans);
            ResourceType_expressRouteCircuits = new ResourceType("Microsoft.Network/expressRouteCircuits", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => ExpressRouteCircuitSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCircuitPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits);
            ResourceType_expressRouteCrossConnections = new ResourceType("Microsoft.Network/expressRouteCrossConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCrossConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteCrossConnectionProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCrossConnections);
            ResourceType_expressRouteGateways = new ResourceType("Microsoft.Network/expressRouteGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRouteGatewayProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteGateways);
            ResourceType_ExpressRoutePorts = new ResourceType("Microsoft.Network/ExpressRoutePorts", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/ExpressRoutePorts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ExpressRoutePortPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("identity", () => ManagedServiceIdentity, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_ExpressRoutePorts);
            ResourceType_firewallPolicies = new ResourceType("Microsoft.Network/firewallPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/firewallPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => FirewallPolicyPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_firewallPolicies);
            ResourceType_loadBalancers = new ResourceType("Microsoft.Network/loadBalancers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/loadBalancers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => LoadBalancerSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => LoadBalancerPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_loadBalancers);
            ResourceType_natGateways = new ResourceType("Microsoft.Network/natGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/natGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => NatGatewaySku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NatGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_natGateways);
            ResourceType_networkInterfaces = new ResourceType("Microsoft.Network/networkInterfaces", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkInterfaces'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkInterfacePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkInterfaces);
            ResourceType_networkProfiles = new ResourceType("Microsoft.Network/networkProfiles", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkProfiles'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkProfilePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkProfiles);
            ResourceType_networkSecurityGroups = new ResourceType("Microsoft.Network/networkSecurityGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkSecurityGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkSecurityGroupPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkSecurityGroups);
            ResourceType_networkWatchers = new ResourceType("Microsoft.Network/networkWatchers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkWatchers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkWatcherPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkWatchers);
            ResourceType_privateEndpoints = new ResourceType("Microsoft.Network/privateEndpoints", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/privateEndpoints'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateEndpointProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_privateEndpoints);
            ResourceType_privateLinkServices = new ResourceType("Microsoft.Network/privateLinkServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/privateLinkServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PrivateLinkServiceProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_privateLinkServices);
            ResourceType_publicIPAddresses = new ResourceType("Microsoft.Network/publicIPAddresses", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/publicIPAddresses'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => PublicIPAddressSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicIPAddressPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_publicIPAddresses);
            ResourceType_publicIPPrefixes = new ResourceType("Microsoft.Network/publicIPPrefixes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/publicIPPrefixes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => PublicIPPrefixSku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => PublicIPPrefixPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("zones", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_publicIPPrefixes);
            ResourceType_routeFilters = new ResourceType("Microsoft.Network/routeFilters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeFilters'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteFilterPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeFilters);
            ResourceType_routeTables = new ResourceType("Microsoft.Network/routeTables", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeTables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => RouteTablePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeTables);
            ResourceType_serviceEndpointPolicies = new ResourceType("Microsoft.Network/serviceEndpointPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/serviceEndpointPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServiceEndpointPolicyPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serviceEndpointPolicies);
            ResourceType_virtualNetworks = new ResourceType("Microsoft.Network/virtualNetworks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks);
            ResourceType_virtualNetworkGateways = new ResourceType("Microsoft.Network/virtualNetworkGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworkGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworkGateways);
            ResourceType_connections = new ResourceType("Microsoft.Network/connections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/connections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkGatewayConnectionPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_connections);
            ResourceType_localNetworkGateways = new ResourceType("Microsoft.Network/localNetworkGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/localNetworkGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LocalNetworkGatewayPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_localNetworkGateways);
            ResourceType_virtualNetworkTaps = new ResourceType("Microsoft.Network/virtualNetworkTaps", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworkTaps'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkTapPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworkTaps);
            ResourceType_virtualRouters = new ResourceType("Microsoft.Network/virtualRouters", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualRouters'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualRouterPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualRouters);
            ResourceType_virtualWans = new ResourceType("Microsoft.Network/virtualWans", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualWans'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualWanProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualWans);
            ResourceType_vpnSites = new ResourceType("Microsoft.Network/vpnSites", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/vpnSites'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnSiteProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_vpnSites);
            ResourceType_virtualHubs = new ResourceType("Microsoft.Network/virtualHubs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualHubs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualHubProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualHubs);
            ResourceType_vpnGateways = new ResourceType("Microsoft.Network/vpnGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/vpnGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VpnGatewayProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_vpnGateways);
            ResourceType_p2svpnGateways = new ResourceType("Microsoft.Network/p2svpnGateways", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/p2svpnGateways'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => P2SVpnGatewayProperties, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_p2svpnGateways);
            ResourceType_ApplicationGatewayWebApplicationFirewallPolicies = new ResourceType("Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => WebApplicationFirewallPolicyPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_ApplicationGatewayWebApplicationFirewallPolicies);
            ResourceType_expressRouteCircuits_authorizations = new ResourceType("Microsoft.Network/expressRouteCircuits/authorizations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => AuthorizationPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits/authorizations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits_authorizations);
            ResourceType_expressRouteCircuits_peerings = new ResourceType("Microsoft.Network/expressRouteCircuits/peerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExpressRouteCircuitPeeringPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits/peerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits_peerings);
            ResourceType_expressRouteCrossConnections_peerings = new ResourceType("Microsoft.Network/expressRouteCrossConnections/peerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExpressRouteCrossConnectionPeeringProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCrossConnections/peerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCrossConnections_peerings);
            ResourceType_expressRouteGateways_expressRouteConnections = new ResourceType("Microsoft.Network/expressRouteGateways/expressRouteConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExpressRouteConnectionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteGateways/expressRouteConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteGateways_expressRouteConnections);
            ResourceType_firewallPolicies_ruleGroups = new ResourceType("Microsoft.Network/firewallPolicies/ruleGroups", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => FirewallPolicyRuleGroupProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/firewallPolicies/ruleGroups'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_firewallPolicies_ruleGroups);
            ResourceType_loadBalancers_inboundNatRules = new ResourceType("Microsoft.Network/loadBalancers/inboundNatRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => InboundNatRulePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/loadBalancers/inboundNatRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_loadBalancers_inboundNatRules);
            ResourceType_networkInterfaces_tapConfigurations = new ResourceType("Microsoft.Network/networkInterfaces/tapConfigurations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => NetworkInterfaceTapConfigurationPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkInterfaces/tapConfigurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkInterfaces_tapConfigurations);
            ResourceType_networkSecurityGroups_securityRules = new ResourceType("Microsoft.Network/networkSecurityGroups/securityRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityRulePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkSecurityGroups/securityRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkSecurityGroups_securityRules);
            ResourceType_networkWatchers_packetCaptures = new ResourceType("Microsoft.Network/networkWatchers/packetCaptures", new ITypeProperty[]{new LazyTypeProperty("properties", () => PacketCaptureParameters, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkWatchers/packetCaptures'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkWatchers_packetCaptures);
            ResourceType_networkWatchers_connectionMonitors = new ResourceType("Microsoft.Network/networkWatchers/connectionMonitors", new ITypeProperty[]{new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ConnectionMonitorParameters, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/networkWatchers/connectionMonitors'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networkWatchers_connectionMonitors);
            ResourceType_privateLinkServices_privateEndpointConnections = new ResourceType("Microsoft.Network/privateLinkServices/privateEndpointConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => PrivateEndpointConnectionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/privateLinkServices/privateEndpointConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_privateLinkServices_privateEndpointConnections);
            ResourceType_routeFilters_routeFilterRules = new ResourceType("Microsoft.Network/routeFilters/routeFilterRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => RouteFilterRulePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeFilters/routeFilterRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeFilters_routeFilterRules);
            ResourceType_routeTables_routes = new ResourceType("Microsoft.Network/routeTables/routes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => RoutePropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/routeTables/routes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_routeTables_routes);
            ResourceType_serviceEndpointPolicies_serviceEndpointPolicyDefinitions = new ResourceType("Microsoft.Network/serviceEndpointPolicies/serviceEndpointPolicyDefinitions", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServiceEndpointPolicyDefinitionPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/serviceEndpointPolicies/serviceEndpointPolicyDefinitions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_serviceEndpointPolicies_serviceEndpointPolicyDefinitions);
            ResourceType_virtualNetworks_subnets = new ResourceType("Microsoft.Network/virtualNetworks/subnets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SubnetPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks/subnets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks_subnets);
            ResourceType_virtualNetworks_virtualNetworkPeerings = new ResourceType("Microsoft.Network/virtualNetworks/virtualNetworkPeerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualNetworkPeeringPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualNetworks/virtualNetworkPeerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualNetworks_virtualNetworkPeerings);
            ResourceType_connections_sharedkey = new ResourceType("Microsoft.Network/connections/sharedkey", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/connections/sharedkey'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_connections_sharedkey);
            ResourceType_virtualRouters_peerings = new ResourceType("Microsoft.Network/virtualRouters/peerings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualRouterPeeringProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualRouters/peerings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualRouters_peerings);
            ResourceType_vpnGateways_vpnConnections = new ResourceType("Microsoft.Network/vpnGateways/vpnConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VpnConnectionProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/vpnGateways/vpnConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_vpnGateways_vpnConnections);
            ResourceType_virtualWans_p2sVpnServerConfigurations = new ResourceType("Microsoft.Network/virtualWans/p2sVpnServerConfigurations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => P2SVpnServerConfigurationProperties, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/virtualWans/p2sVpnServerConfigurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualWans_p2sVpnServerConfigurations);
            ResourceType_expressRouteCircuits_peerings_connections = new ResourceType("Microsoft.Network/expressRouteCircuits/peerings/connections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ExpressRouteCircuitConnectionPropertiesFormat, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.Network/expressRouteCircuits/peerings/connections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-07-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_expressRouteCircuits_peerings_connections);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_applicationGateways, () => InstanceLazy.Value.ResourceType_applicationGateways);
            registrar.RegisterType(ResourceTypeReference_applicationSecurityGroups, () => InstanceLazy.Value.ResourceType_applicationSecurityGroups);
            registrar.RegisterType(ResourceTypeReference_azureFirewalls, () => InstanceLazy.Value.ResourceType_azureFirewalls);
            registrar.RegisterType(ResourceTypeReference_bastionHosts, () => InstanceLazy.Value.ResourceType_bastionHosts);
            registrar.RegisterType(ResourceTypeReference_ddosCustomPolicies, () => InstanceLazy.Value.ResourceType_ddosCustomPolicies);
            registrar.RegisterType(ResourceTypeReference_ddosProtectionPlans, () => InstanceLazy.Value.ResourceType_ddosProtectionPlans);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits, () => InstanceLazy.Value.ResourceType_expressRouteCircuits);
            registrar.RegisterType(ResourceTypeReference_expressRouteCrossConnections, () => InstanceLazy.Value.ResourceType_expressRouteCrossConnections);
            registrar.RegisterType(ResourceTypeReference_expressRouteGateways, () => InstanceLazy.Value.ResourceType_expressRouteGateways);
            registrar.RegisterType(ResourceTypeReference_ExpressRoutePorts, () => InstanceLazy.Value.ResourceType_ExpressRoutePorts);
            registrar.RegisterType(ResourceTypeReference_firewallPolicies, () => InstanceLazy.Value.ResourceType_firewallPolicies);
            registrar.RegisterType(ResourceTypeReference_loadBalancers, () => InstanceLazy.Value.ResourceType_loadBalancers);
            registrar.RegisterType(ResourceTypeReference_natGateways, () => InstanceLazy.Value.ResourceType_natGateways);
            registrar.RegisterType(ResourceTypeReference_networkInterfaces, () => InstanceLazy.Value.ResourceType_networkInterfaces);
            registrar.RegisterType(ResourceTypeReference_networkProfiles, () => InstanceLazy.Value.ResourceType_networkProfiles);
            registrar.RegisterType(ResourceTypeReference_networkSecurityGroups, () => InstanceLazy.Value.ResourceType_networkSecurityGroups);
            registrar.RegisterType(ResourceTypeReference_networkWatchers, () => InstanceLazy.Value.ResourceType_networkWatchers);
            registrar.RegisterType(ResourceTypeReference_privateEndpoints, () => InstanceLazy.Value.ResourceType_privateEndpoints);
            registrar.RegisterType(ResourceTypeReference_privateLinkServices, () => InstanceLazy.Value.ResourceType_privateLinkServices);
            registrar.RegisterType(ResourceTypeReference_publicIPAddresses, () => InstanceLazy.Value.ResourceType_publicIPAddresses);
            registrar.RegisterType(ResourceTypeReference_publicIPPrefixes, () => InstanceLazy.Value.ResourceType_publicIPPrefixes);
            registrar.RegisterType(ResourceTypeReference_routeFilters, () => InstanceLazy.Value.ResourceType_routeFilters);
            registrar.RegisterType(ResourceTypeReference_routeTables, () => InstanceLazy.Value.ResourceType_routeTables);
            registrar.RegisterType(ResourceTypeReference_serviceEndpointPolicies, () => InstanceLazy.Value.ResourceType_serviceEndpointPolicies);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks, () => InstanceLazy.Value.ResourceType_virtualNetworks);
            registrar.RegisterType(ResourceTypeReference_virtualNetworkGateways, () => InstanceLazy.Value.ResourceType_virtualNetworkGateways);
            registrar.RegisterType(ResourceTypeReference_connections, () => InstanceLazy.Value.ResourceType_connections);
            registrar.RegisterType(ResourceTypeReference_localNetworkGateways, () => InstanceLazy.Value.ResourceType_localNetworkGateways);
            registrar.RegisterType(ResourceTypeReference_virtualNetworkTaps, () => InstanceLazy.Value.ResourceType_virtualNetworkTaps);
            registrar.RegisterType(ResourceTypeReference_virtualRouters, () => InstanceLazy.Value.ResourceType_virtualRouters);
            registrar.RegisterType(ResourceTypeReference_virtualWans, () => InstanceLazy.Value.ResourceType_virtualWans);
            registrar.RegisterType(ResourceTypeReference_vpnSites, () => InstanceLazy.Value.ResourceType_vpnSites);
            registrar.RegisterType(ResourceTypeReference_virtualHubs, () => InstanceLazy.Value.ResourceType_virtualHubs);
            registrar.RegisterType(ResourceTypeReference_vpnGateways, () => InstanceLazy.Value.ResourceType_vpnGateways);
            registrar.RegisterType(ResourceTypeReference_p2svpnGateways, () => InstanceLazy.Value.ResourceType_p2svpnGateways);
            registrar.RegisterType(ResourceTypeReference_ApplicationGatewayWebApplicationFirewallPolicies, () => InstanceLazy.Value.ResourceType_ApplicationGatewayWebApplicationFirewallPolicies);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits_authorizations, () => InstanceLazy.Value.ResourceType_expressRouteCircuits_authorizations);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits_peerings, () => InstanceLazy.Value.ResourceType_expressRouteCircuits_peerings);
            registrar.RegisterType(ResourceTypeReference_expressRouteCrossConnections_peerings, () => InstanceLazy.Value.ResourceType_expressRouteCrossConnections_peerings);
            registrar.RegisterType(ResourceTypeReference_expressRouteGateways_expressRouteConnections, () => InstanceLazy.Value.ResourceType_expressRouteGateways_expressRouteConnections);
            registrar.RegisterType(ResourceTypeReference_firewallPolicies_ruleGroups, () => InstanceLazy.Value.ResourceType_firewallPolicies_ruleGroups);
            registrar.RegisterType(ResourceTypeReference_loadBalancers_inboundNatRules, () => InstanceLazy.Value.ResourceType_loadBalancers_inboundNatRules);
            registrar.RegisterType(ResourceTypeReference_networkInterfaces_tapConfigurations, () => InstanceLazy.Value.ResourceType_networkInterfaces_tapConfigurations);
            registrar.RegisterType(ResourceTypeReference_networkSecurityGroups_securityRules, () => InstanceLazy.Value.ResourceType_networkSecurityGroups_securityRules);
            registrar.RegisterType(ResourceTypeReference_networkWatchers_packetCaptures, () => InstanceLazy.Value.ResourceType_networkWatchers_packetCaptures);
            registrar.RegisterType(ResourceTypeReference_networkWatchers_connectionMonitors, () => InstanceLazy.Value.ResourceType_networkWatchers_connectionMonitors);
            registrar.RegisterType(ResourceTypeReference_privateLinkServices_privateEndpointConnections, () => InstanceLazy.Value.ResourceType_privateLinkServices_privateEndpointConnections);
            registrar.RegisterType(ResourceTypeReference_routeFilters_routeFilterRules, () => InstanceLazy.Value.ResourceType_routeFilters_routeFilterRules);
            registrar.RegisterType(ResourceTypeReference_routeTables_routes, () => InstanceLazy.Value.ResourceType_routeTables_routes);
            registrar.RegisterType(ResourceTypeReference_serviceEndpointPolicies_serviceEndpointPolicyDefinitions, () => InstanceLazy.Value.ResourceType_serviceEndpointPolicies_serviceEndpointPolicyDefinitions);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks_subnets, () => InstanceLazy.Value.ResourceType_virtualNetworks_subnets);
            registrar.RegisterType(ResourceTypeReference_virtualNetworks_virtualNetworkPeerings, () => InstanceLazy.Value.ResourceType_virtualNetworks_virtualNetworkPeerings);
            registrar.RegisterType(ResourceTypeReference_connections_sharedkey, () => InstanceLazy.Value.ResourceType_connections_sharedkey);
            registrar.RegisterType(ResourceTypeReference_virtualRouters_peerings, () => InstanceLazy.Value.ResourceType_virtualRouters_peerings);
            registrar.RegisterType(ResourceTypeReference_vpnGateways_vpnConnections, () => InstanceLazy.Value.ResourceType_vpnGateways_vpnConnections);
            registrar.RegisterType(ResourceTypeReference_virtualWans_p2sVpnServerConfigurations, () => InstanceLazy.Value.ResourceType_virtualWans_p2sVpnServerConfigurations);
            registrar.RegisterType(ResourceTypeReference_expressRouteCircuits_peerings_connections, () => InstanceLazy.Value.ResourceType_expressRouteCircuits_peerings_connections);
        }
        private readonly ResourceType ResourceType_applicationGateways;
        private readonly ResourceType ResourceType_applicationSecurityGroups;
        private readonly ResourceType ResourceType_azureFirewalls;
        private readonly ResourceType ResourceType_bastionHosts;
        private readonly ResourceType ResourceType_ddosCustomPolicies;
        private readonly ResourceType ResourceType_ddosProtectionPlans;
        private readonly ResourceType ResourceType_expressRouteCircuits;
        private readonly ResourceType ResourceType_expressRouteCrossConnections;
        private readonly ResourceType ResourceType_expressRouteGateways;
        private readonly ResourceType ResourceType_ExpressRoutePorts;
        private readonly ResourceType ResourceType_firewallPolicies;
        private readonly ResourceType ResourceType_loadBalancers;
        private readonly ResourceType ResourceType_natGateways;
        private readonly ResourceType ResourceType_networkInterfaces;
        private readonly ResourceType ResourceType_networkProfiles;
        private readonly ResourceType ResourceType_networkSecurityGroups;
        private readonly ResourceType ResourceType_networkWatchers;
        private readonly ResourceType ResourceType_privateEndpoints;
        private readonly ResourceType ResourceType_privateLinkServices;
        private readonly ResourceType ResourceType_publicIPAddresses;
        private readonly ResourceType ResourceType_publicIPPrefixes;
        private readonly ResourceType ResourceType_routeFilters;
        private readonly ResourceType ResourceType_routeTables;
        private readonly ResourceType ResourceType_serviceEndpointPolicies;
        private readonly ResourceType ResourceType_virtualNetworks;
        private readonly ResourceType ResourceType_virtualNetworkGateways;
        private readonly ResourceType ResourceType_connections;
        private readonly ResourceType ResourceType_localNetworkGateways;
        private readonly ResourceType ResourceType_virtualNetworkTaps;
        private readonly ResourceType ResourceType_virtualRouters;
        private readonly ResourceType ResourceType_virtualWans;
        private readonly ResourceType ResourceType_vpnSites;
        private readonly ResourceType ResourceType_virtualHubs;
        private readonly ResourceType ResourceType_vpnGateways;
        private readonly ResourceType ResourceType_p2svpnGateways;
        private readonly ResourceType ResourceType_ApplicationGatewayWebApplicationFirewallPolicies;
        private readonly ResourceType ResourceType_expressRouteCircuits_authorizations;
        private readonly ResourceType ResourceType_expressRouteCircuits_peerings;
        private readonly ResourceType ResourceType_expressRouteCrossConnections_peerings;
        private readonly ResourceType ResourceType_expressRouteGateways_expressRouteConnections;
        private readonly ResourceType ResourceType_firewallPolicies_ruleGroups;
        private readonly ResourceType ResourceType_loadBalancers_inboundNatRules;
        private readonly ResourceType ResourceType_networkInterfaces_tapConfigurations;
        private readonly ResourceType ResourceType_networkSecurityGroups_securityRules;
        private readonly ResourceType ResourceType_networkWatchers_packetCaptures;
        private readonly ResourceType ResourceType_networkWatchers_connectionMonitors;
        private readonly ResourceType ResourceType_privateLinkServices_privateEndpointConnections;
        private readonly ResourceType ResourceType_routeFilters_routeFilterRules;
        private readonly ResourceType ResourceType_routeTables_routes;
        private readonly ResourceType ResourceType_serviceEndpointPolicies_serviceEndpointPolicyDefinitions;
        private readonly ResourceType ResourceType_virtualNetworks_subnets;
        private readonly ResourceType ResourceType_virtualNetworks_virtualNetworkPeerings;
        private readonly ResourceType ResourceType_connections_sharedkey;
        private readonly ResourceType ResourceType_virtualRouters_peerings;
        private readonly ResourceType ResourceType_vpnGateways_vpnConnections;
        private readonly ResourceType ResourceType_virtualWans_p2sVpnServerConfigurations;
        private readonly ResourceType ResourceType_expressRouteCircuits_peerings_connections;
        private readonly TypeSymbol ApplicationGatewayPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewaySku;
        private readonly TypeSymbol ApplicationGatewaySslPolicy;
        private readonly TypeSymbol ApplicationGatewayIPConfiguration;
        private readonly TypeSymbol ApplicationGatewayIPConfigurationPropertiesFormat;
        private readonly TypeSymbol SubResource;
        private readonly TypeSymbol ApplicationGatewayAuthenticationCertificate;
        private readonly TypeSymbol ApplicationGatewayAuthenticationCertificatePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayTrustedRootCertificate;
        private readonly TypeSymbol ApplicationGatewayTrustedRootCertificatePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewaySslCertificate;
        private readonly TypeSymbol ApplicationGatewaySslCertificatePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayFrontendIPConfiguration;
        private readonly TypeSymbol ApplicationGatewayFrontendIPConfigurationPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayFrontendPort;
        private readonly TypeSymbol ApplicationGatewayFrontendPortPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayProbe;
        private readonly TypeSymbol ApplicationGatewayProbePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayProbeHealthResponseMatch;
        private readonly TypeSymbol ApplicationGatewayBackendAddressPool;
        private readonly TypeSymbol ApplicationGatewayBackendAddressPoolPropertiesFormat;
        private readonly TypeSymbol NetworkInterfaceIPConfiguration;
        private readonly TypeSymbol NetworkInterfaceIPConfigurationPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkTap;
        private readonly TypeSymbol VirtualNetworkTapPropertiesFormat;
        private readonly TypeSymbol NetworkInterfaceTapConfiguration;
        private readonly TypeSymbol NetworkInterfaceTapConfigurationPropertiesFormat;
        private readonly TypeSymbol FrontendIPConfiguration;
        private readonly TypeSymbol FrontendIPConfigurationPropertiesFormat;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol SubnetPropertiesFormat;
        private readonly TypeSymbol NetworkSecurityGroup;
        private readonly TypeSymbol NetworkSecurityGroupPropertiesFormat;
        private readonly TypeSymbol SecurityRule;
        private readonly TypeSymbol SecurityRulePropertiesFormat;
        private readonly TypeSymbol ApplicationSecurityGroup;
        private readonly TypeSymbol ApplicationSecurityGroupPropertiesFormat;
        private readonly TypeSymbol NetworkInterface;
        private readonly TypeSymbol NetworkInterfacePropertiesFormat;
        private readonly TypeSymbol PrivateEndpoint;
        private readonly TypeSymbol PrivateEndpointProperties;
        private readonly TypeSymbol PrivateLinkServiceConnection;
        private readonly TypeSymbol PrivateLinkServiceConnectionProperties;
        private readonly TypeSymbol PrivateLinkServiceConnectionState;
        private readonly TypeSymbol NetworkInterfaceDnsSettings;
        private readonly TypeSymbol RouteTable;
        private readonly TypeSymbol RouteTablePropertiesFormat;
        private readonly TypeSymbol Route;
        private readonly TypeSymbol RoutePropertiesFormat;
        private readonly TypeSymbol ServiceEndpointPropertiesFormat;
        private readonly TypeSymbol ServiceEndpointPolicy;
        private readonly TypeSymbol ServiceEndpointPolicyPropertiesFormat;
        private readonly TypeSymbol ServiceEndpointPolicyDefinition;
        private readonly TypeSymbol ServiceEndpointPolicyDefinitionPropertiesFormat;
        private readonly TypeSymbol IPConfiguration;
        private readonly TypeSymbol IPConfigurationPropertiesFormat;
        private readonly TypeSymbol PublicIPAddress;
        private readonly TypeSymbol PublicIPAddressSku;
        private readonly TypeSymbol PublicIPAddressPropertiesFormat;
        private readonly TypeSymbol PublicIPAddressDnsSettings;
        private readonly TypeSymbol DdosSettings;
        private readonly TypeSymbol IpTag;
        private readonly TypeSymbol IPConfigurationProfile;
        private readonly TypeSymbol IPConfigurationProfilePropertiesFormat;
        private readonly TypeSymbol ResourceNavigationLink;
        private readonly TypeSymbol ResourceNavigationLinkFormat;
        private readonly TypeSymbol ServiceAssociationLink;
        private readonly TypeSymbol ServiceAssociationLinkPropertiesFormat;
        private readonly TypeSymbol Delegation;
        private readonly TypeSymbol ServiceDelegationPropertiesFormat;
        private readonly TypeSymbol BackendAddressPool;
        private readonly TypeSymbol BackendAddressPoolPropertiesFormat;
        private readonly TypeSymbol InboundNatRule;
        private readonly TypeSymbol InboundNatRulePropertiesFormat;
        private readonly TypeSymbol NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties;
        private readonly TypeSymbol ApplicationGatewayBackendAddress;
        private readonly TypeSymbol ApplicationGatewayBackendHttpSettings;
        private readonly TypeSymbol ApplicationGatewayBackendHttpSettingsPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayConnectionDraining;
        private readonly TypeSymbol ApplicationGatewayHttpListener;
        private readonly TypeSymbol ApplicationGatewayHttpListenerPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayCustomError;
        private readonly TypeSymbol ApplicationGatewayUrlPathMap;
        private readonly TypeSymbol ApplicationGatewayUrlPathMapPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayPathRule;
        private readonly TypeSymbol ApplicationGatewayPathRulePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayRequestRoutingRule;
        private readonly TypeSymbol ApplicationGatewayRequestRoutingRulePropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayRewriteRuleSet;
        private readonly TypeSymbol ApplicationGatewayRewriteRuleSetPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayRewriteRule;
        private readonly TypeSymbol ApplicationGatewayRewriteRuleCondition;
        private readonly TypeSymbol ApplicationGatewayRewriteRuleActionSet;
        private readonly TypeSymbol ApplicationGatewayHeaderConfiguration;
        private readonly TypeSymbol ApplicationGatewayRedirectConfiguration;
        private readonly TypeSymbol ApplicationGatewayRedirectConfigurationPropertiesFormat;
        private readonly TypeSymbol ApplicationGatewayWebApplicationFirewallConfiguration;
        private readonly TypeSymbol ApplicationGatewayFirewallDisabledRuleGroup;
        private readonly TypeSymbol ApplicationGatewayFirewallExclusion;
        private readonly TypeSymbol ApplicationGatewayAutoscaleConfiguration;
        private readonly TypeSymbol ManagedServiceIdentity;
        private readonly TypeSymbol Components1jq1t4ischemasmanagedserviceidentitypropertiesuserassignedidentitiesadditionalproperties;
        private readonly TypeSymbol AzureFirewallPropertiesFormat;
        private readonly TypeSymbol AzureFirewallApplicationRuleCollection;
        private readonly TypeSymbol AzureFirewallApplicationRuleCollectionPropertiesFormat;
        private readonly TypeSymbol AzureFirewallRCAction;
        private readonly TypeSymbol AzureFirewallApplicationRule;
        private readonly TypeSymbol AzureFirewallApplicationRuleProtocol;
        private readonly TypeSymbol AzureFirewallNatRuleCollection;
        private readonly TypeSymbol AzureFirewallNatRuleCollectionProperties;
        private readonly TypeSymbol AzureFirewallNatRCAction;
        private readonly TypeSymbol AzureFirewallNatRule;
        private readonly TypeSymbol AzureFirewallNetworkRuleCollection;
        private readonly TypeSymbol AzureFirewallNetworkRuleCollectionPropertiesFormat;
        private readonly TypeSymbol AzureFirewallNetworkRule;
        private readonly TypeSymbol AzureFirewallIPConfiguration;
        private readonly TypeSymbol AzureFirewallIPConfigurationPropertiesFormat;
        private readonly TypeSymbol HubIPAddresses;
        private readonly TypeSymbol AzureFirewallPublicIPAddress;
        private readonly TypeSymbol BastionHostPropertiesFormat;
        private readonly TypeSymbol BastionHostIPConfiguration;
        private readonly TypeSymbol BastionHostIPConfigurationPropertiesFormat;
        private readonly TypeSymbol DdosCustomPolicyPropertiesFormat;
        private readonly TypeSymbol ProtocolCustomSettingsFormat;
        private readonly TypeSymbol DdosProtectionPlanPropertiesFormat;
        private readonly TypeSymbol AuthorizationPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitPeeringPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitPeeringConfig;
        private readonly TypeSymbol ExpressRouteCircuitStats;
        private readonly TypeSymbol Ipv6ExpressRouteCircuitPeeringConfig;
        private readonly TypeSymbol ExpressRouteConnectionId;
        private readonly TypeSymbol ExpressRouteCircuitConnection;
        private readonly TypeSymbol ExpressRouteCircuitConnectionPropertiesFormat;
        private readonly TypeSymbol PeerExpressRouteCircuitConnection;
        private readonly TypeSymbol PeerExpressRouteCircuitConnectionPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitSku;
        private readonly TypeSymbol ExpressRouteCircuitPropertiesFormat;
        private readonly TypeSymbol ExpressRouteCircuitAuthorization;
        private readonly TypeSymbol ExpressRouteCircuitPeering;
        private readonly TypeSymbol ExpressRouteCircuitServiceProviderProperties;
        private readonly TypeSymbol ExpressRouteCrossConnectionProperties;
        private readonly TypeSymbol ExpressRouteCircuitReference;
        private readonly TypeSymbol ExpressRouteCrossConnectionPeering;
        private readonly TypeSymbol ExpressRouteCrossConnectionPeeringProperties;
        private readonly TypeSymbol ExpressRouteGatewayProperties;
        private readonly TypeSymbol ExpressRouteGatewayPropertiesAutoScaleConfiguration;
        private readonly TypeSymbol ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds;
        private readonly TypeSymbol ExpressRouteConnection;
        private readonly TypeSymbol ExpressRouteConnectionProperties;
        private readonly TypeSymbol ExpressRouteCircuitPeeringId;
        private readonly TypeSymbol VirtualHubId;
        private readonly TypeSymbol ExpressRoutePortPropertiesFormat;
        private readonly TypeSymbol ExpressRouteLink;
        private readonly TypeSymbol ExpressRouteLinkPropertiesFormat;
        private readonly TypeSymbol ExpressRouteLinkMacSecConfig;
        private readonly TypeSymbol FirewallPolicyPropertiesFormat;
        private readonly TypeSymbol FirewallPolicyRuleGroupProperties;
        private readonly TypeSymbol FirewallPolicyRule;
        private readonly TypeSymbol FirewallPolicyNatRule;
        private readonly TypeSymbol FirewallPolicyNatRuleAction;
        private readonly TypeSymbol FirewallPolicyRuleCondition;
        private readonly TypeSymbol ApplicationRuleCondition;
        private readonly TypeSymbol FirewallPolicyRuleConditionApplicationProtocol;
        private readonly TypeSymbol NetworkRuleCondition;
        private readonly TypeSymbol FirewallPolicyFilterRule;
        private readonly TypeSymbol FirewallPolicyFilterRuleAction;
        private readonly TypeSymbol LoadBalancerSku;
        private readonly TypeSymbol LoadBalancerPropertiesFormat;
        private readonly TypeSymbol LoadBalancingRule;
        private readonly TypeSymbol LoadBalancingRulePropertiesFormat;
        private readonly TypeSymbol Probe;
        private readonly TypeSymbol ProbePropertiesFormat;
        private readonly TypeSymbol InboundNatPool;
        private readonly TypeSymbol InboundNatPoolPropertiesFormat;
        private readonly TypeSymbol OutboundRule;
        private readonly TypeSymbol OutboundRulePropertiesFormat;
        private readonly TypeSymbol NatGatewaySku;
        private readonly TypeSymbol NatGatewayPropertiesFormat;
        private readonly TypeSymbol NetworkProfilePropertiesFormat;
        private readonly TypeSymbol ContainerNetworkInterface;
        private readonly TypeSymbol ContainerNetworkInterfacePropertiesFormat;
        private readonly TypeSymbol ContainerNetworkInterfaceConfiguration;
        private readonly TypeSymbol ContainerNetworkInterfaceConfigurationPropertiesFormat;
        private readonly TypeSymbol Container;
        private readonly TypeSymbol ContainerNetworkInterfaceIpConfiguration;
        private readonly TypeSymbol ContainerNetworkInterfaceIpConfigurationPropertiesFormat;
        private readonly TypeSymbol NetworkWatcherPropertiesFormat;
        private readonly TypeSymbol PacketCaptureParameters;
        private readonly TypeSymbol PacketCaptureStorageLocation;
        private readonly TypeSymbol PacketCaptureFilter;
        private readonly TypeSymbol ConnectionMonitorParameters;
        private readonly TypeSymbol ConnectionMonitorSource;
        private readonly TypeSymbol ConnectionMonitorDestination;
        private readonly TypeSymbol PrivateLinkServiceProperties;
        private readonly TypeSymbol PrivateLinkServiceIpConfiguration;
        private readonly TypeSymbol PrivateLinkServiceIpConfigurationProperties;
        private readonly TypeSymbol PrivateEndpointConnection;
        private readonly TypeSymbol PrivateEndpointConnectionProperties;
        private readonly TypeSymbol PrivateLinkServicePropertiesVisibility;
        private readonly TypeSymbol PrivateLinkServicePropertiesAutoApproval;
        private readonly TypeSymbol PublicIPPrefixSku;
        private readonly TypeSymbol PublicIPPrefixPropertiesFormat;
        private readonly TypeSymbol ReferencedPublicIpAddress;
        private readonly TypeSymbol RouteFilterPropertiesFormat;
        private readonly TypeSymbol RouteFilterRule;
        private readonly TypeSymbol RouteFilterRulePropertiesFormat;
        private readonly TypeSymbol VirtualNetworkPropertiesFormat;
        private readonly TypeSymbol AddressSpace;
        private readonly TypeSymbol DhcpOptions;
        private readonly TypeSymbol VirtualNetworkPeering;
        private readonly TypeSymbol VirtualNetworkPeeringPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewayPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewayIPConfiguration;
        private readonly TypeSymbol VirtualNetworkGatewayIPConfigurationPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGatewaySku;
        private readonly TypeSymbol VpnClientConfiguration;
        private readonly TypeSymbol VpnClientRootCertificate;
        private readonly TypeSymbol VpnClientRootCertificatePropertiesFormat;
        private readonly TypeSymbol VpnClientRevokedCertificate;
        private readonly TypeSymbol VpnClientRevokedCertificatePropertiesFormat;
        private readonly TypeSymbol IpsecPolicy;
        private readonly TypeSymbol BgpSettings;
        private readonly TypeSymbol VirtualNetworkGatewayConnectionPropertiesFormat;
        private readonly TypeSymbol VirtualNetworkGateway;
        private readonly TypeSymbol LocalNetworkGateway;
        private readonly TypeSymbol LocalNetworkGatewayPropertiesFormat;
        private readonly TypeSymbol TunnelConnectionHealth;
        private readonly TypeSymbol TrafficSelectorPolicy;
        private readonly TypeSymbol VirtualRouterPropertiesFormat;
        private readonly TypeSymbol VirtualRouterPeeringProperties;
        private readonly TypeSymbol VirtualWanProperties;
        private readonly TypeSymbol P2SVpnServerConfiguration;
        private readonly TypeSymbol P2SVpnServerConfigurationProperties;
        private readonly TypeSymbol P2SVpnServerConfigVpnClientRootCertificate;
        private readonly TypeSymbol P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat;
        private readonly TypeSymbol P2SVpnServerConfigVpnClientRevokedCertificate;
        private readonly TypeSymbol P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat;
        private readonly TypeSymbol P2SVpnServerConfigRadiusServerRootCertificate;
        private readonly TypeSymbol P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat;
        private readonly TypeSymbol P2SVpnServerConfigRadiusClientRootCertificate;
        private readonly TypeSymbol P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat;
        private readonly TypeSymbol VpnSiteProperties;
        private readonly TypeSymbol DeviceProperties;
        private readonly TypeSymbol VpnSiteLink;
        private readonly TypeSymbol VpnSiteLinkProperties;
        private readonly TypeSymbol VpnLinkProviderProperties;
        private readonly TypeSymbol VpnLinkBgpSettings;
        private readonly TypeSymbol VirtualHubProperties;
        private readonly TypeSymbol HubVirtualNetworkConnection;
        private readonly TypeSymbol HubVirtualNetworkConnectionProperties;
        private readonly TypeSymbol VirtualHubRouteTable;
        private readonly TypeSymbol VirtualHubRoute;
        private readonly TypeSymbol VpnGatewayProperties;
        private readonly TypeSymbol VpnConnection;
        private readonly TypeSymbol VpnConnectionProperties;
        private readonly TypeSymbol VpnSiteLinkConnection;
        private readonly TypeSymbol VpnSiteLinkConnectionProperties;
        private readonly TypeSymbol P2SVpnGatewayProperties;
        private readonly TypeSymbol VpnClientConnectionHealth;
        private readonly TypeSymbol WebApplicationFirewallPolicyPropertiesFormat;
        private readonly TypeSymbol PolicySettings;
        private readonly TypeSymbol WebApplicationFirewallCustomRule;
        private readonly TypeSymbol MatchCondition;
        private readonly TypeSymbol MatchVariable;
        private readonly TypeSymbol ApplicationGateway;
    }
}
