// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_Storage_2019_06_01
    {
        private const string ProviderNamespace = "Microsoft.Storage";
        private const string ApiVersion = "2019-06-01";
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_managementPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "managementPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_privateEndpointConnections = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "privateEndpointConnections"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_objectReplicationPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "objectReplicationPolicies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_encryptionScopes = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "encryptionScopes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_blobServices = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "blobServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_fileServices = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "fileServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_queueServices = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "queueServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_tableServices = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "tableServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_blobServices_containers = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "blobServices", "containers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_fileServices_shares = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "fileServices", "shares"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_queueServices_queues = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "queueServices", "queues"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_tableServices_tables = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "tableServices", "tables"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_storageAccounts_blobServices_containers_immutabilityPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"storageAccounts", "blobServices", "containers", "immutabilityPolicies"}, ApiVersion);
        private static Lazy<Microsoft_Storage_2019_06_01> InstanceLazy = new Lazy<Microsoft_Storage_2019_06_01>(() => new Microsoft_Storage_2019_06_01());
        private Microsoft_Storage_2019_06_01()
        {
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Standard_LRS'"), new StringLiteralType("'Standard_GRS'"), new StringLiteralType("'Standard_RAGRS'"), new StringLiteralType("'Standard_ZRS'"), new StringLiteralType("'Premium_LRS'"), new StringLiteralType("'Premium_ZRS'"), new StringLiteralType("'Standard_GZRS'"), new StringLiteralType("'Standard_RAGZRS'")), TypePropertyFlags.Required), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None)}, null);
            Identity = new NamedObjectType("Identity", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'SystemAssigned'"), TypePropertyFlags.Required)}, null);
            StorageAccountPropertiesCreateParameters = new NamedObjectType("StorageAccountPropertiesCreateParameters", new ITypeProperty[]{new LazyTypeProperty("customDomain", () => CustomDomain, TypePropertyFlags.None), new LazyTypeProperty("encryption", () => Encryption, TypePropertyFlags.None), new LazyTypeProperty("networkAcls", () => NetworkRuleSet, TypePropertyFlags.None), new TypeProperty("accessTier", UnionType.Create(new StringLiteralType("'Hot'"), new StringLiteralType("'Cool'")), TypePropertyFlags.None), new LazyTypeProperty("azureFilesIdentityBasedAuthentication", () => AzureFilesIdentityBasedAuthentication, TypePropertyFlags.None), new TypeProperty("supportsHttpsTrafficOnly", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isHnsEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("largeFileSharesState", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new LazyTypeProperty("routingPreference", () => RoutingPreference, TypePropertyFlags.None), new TypeProperty("allowBlobPublicAccess", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("minimumTlsVersion", UnionType.Create(new StringLiteralType("'TLS1_0'"), new StringLiteralType("'TLS1_1'"), new StringLiteralType("'TLS1_2'")), TypePropertyFlags.None)}, null);
            CustomDomain = new NamedObjectType("CustomDomain", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("useSubDomainName", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            Encryption = new NamedObjectType("Encryption", new ITypeProperty[]{new LazyTypeProperty("services", () => EncryptionServices, TypePropertyFlags.None), new TypeProperty("keySource", UnionType.Create(new StringLiteralType("'Microsoft.Storage'"), new StringLiteralType("'Microsoft.Keyvault'")), TypePropertyFlags.Required), new TypeProperty("requireInfrastructureEncryption", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("keyvaultproperties", () => KeyVaultProperties, TypePropertyFlags.None)}, null);
            EncryptionServices = new NamedObjectType("EncryptionServices", new ITypeProperty[]{new LazyTypeProperty("blob", () => EncryptionService, TypePropertyFlags.None), new LazyTypeProperty("file", () => EncryptionService, TypePropertyFlags.None), new LazyTypeProperty("table", () => EncryptionService, TypePropertyFlags.None), new LazyTypeProperty("queue", () => EncryptionService, TypePropertyFlags.None)}, null);
            EncryptionService = new NamedObjectType("EncryptionService", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("lastEnabledTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("keyType", UnionType.Create(new StringLiteralType("'Service'"), new StringLiteralType("'Account'")), TypePropertyFlags.None)}, null);
            KeyVaultProperties = new NamedObjectType("KeyVaultProperties", new ITypeProperty[]{new TypeProperty("keyname", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyversion", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyvaulturi", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("currentVersionedKeyIdentifier", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastKeyRotationTimestamp", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            NetworkRuleSet = new NamedObjectType("NetworkRuleSet", new ITypeProperty[]{new TypeProperty("bypass", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Logging'"), new StringLiteralType("'Metrics'"), new StringLiteralType("'AzureServices'")), TypePropertyFlags.None), new LazyTypeProperty("virtualNetworkRules", () => new TypedArrayType(VirtualNetworkRule), TypePropertyFlags.None), new LazyTypeProperty("ipRules", () => new TypedArrayType(IPRule), TypePropertyFlags.None), new TypeProperty("defaultAction", UnionType.Create(new StringLiteralType("'Allow'"), new StringLiteralType("'Deny'")), TypePropertyFlags.Required)}, null);
            VirtualNetworkRule = new NamedObjectType("VirtualNetworkRule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("action", new StringLiteralType("'Allow'"), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'provisioning'"), new StringLiteralType("'deprovisioning'"), new StringLiteralType("'succeeded'"), new StringLiteralType("'failed'"), new StringLiteralType("'networkSourceDeleted'")), TypePropertyFlags.None)}, null);
            IPRule = new NamedObjectType("IPRule", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("action", new StringLiteralType("'Allow'"), TypePropertyFlags.None)}, null);
            AzureFilesIdentityBasedAuthentication = new NamedObjectType("AzureFilesIdentityBasedAuthentication", new ITypeProperty[]{new TypeProperty("directoryServiceOptions", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'AADDS'"), new StringLiteralType("'AD'")), TypePropertyFlags.Required), new LazyTypeProperty("activeDirectoryProperties", () => ActiveDirectoryProperties, TypePropertyFlags.None)}, null);
            ActiveDirectoryProperties = new NamedObjectType("ActiveDirectoryProperties", new ITypeProperty[]{new TypeProperty("domainName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("netBiosDomainName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("forestName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("domainGuid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("domainSid", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("azureStorageSid", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            RoutingPreference = new NamedObjectType("RoutingPreference", new ITypeProperty[]{new TypeProperty("routingChoice", UnionType.Create(new StringLiteralType("'MicrosoftRouting'"), new StringLiteralType("'InternetRouting'")), TypePropertyFlags.None), new TypeProperty("publishMicrosoftEndpoints", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("publishInternetEndpoints", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ManagementPolicyProperties = new NamedObjectType("ManagementPolicyProperties", new ITypeProperty[]{new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("policy", () => ManagementPolicySchema, TypePropertyFlags.Required)}, null);
            ManagementPolicySchema = new NamedObjectType("ManagementPolicySchema", new ITypeProperty[]{new LazyTypeProperty("rules", () => new TypedArrayType(ManagementPolicyRule), TypePropertyFlags.Required)}, null);
            ManagementPolicyRule = new NamedObjectType("ManagementPolicyRule", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Lifecycle'"), TypePropertyFlags.Required), new LazyTypeProperty("definition", () => ManagementPolicyDefinition, TypePropertyFlags.Required)}, null);
            ManagementPolicyDefinition = new NamedObjectType("ManagementPolicyDefinition", new ITypeProperty[]{new LazyTypeProperty("actions", () => ManagementPolicyAction, TypePropertyFlags.Required), new LazyTypeProperty("filters", () => ManagementPolicyFilter, TypePropertyFlags.None)}, null);
            ManagementPolicyAction = new NamedObjectType("ManagementPolicyAction", new ITypeProperty[]{new LazyTypeProperty("baseBlob", () => ManagementPolicyBaseBlob, TypePropertyFlags.None), new LazyTypeProperty("snapshot", () => ManagementPolicySnapShot, TypePropertyFlags.None)}, null);
            ManagementPolicyBaseBlob = new NamedObjectType("ManagementPolicyBaseBlob", new ITypeProperty[]{new LazyTypeProperty("tierToCool", () => DateAfterModification, TypePropertyFlags.None), new LazyTypeProperty("tierToArchive", () => DateAfterModification, TypePropertyFlags.None), new LazyTypeProperty("delete", () => DateAfterModification, TypePropertyFlags.None)}, null);
            DateAfterModification = new NamedObjectType("DateAfterModification", new ITypeProperty[]{new TypeProperty("daysAfterModificationGreaterThan", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            ManagementPolicySnapShot = new NamedObjectType("ManagementPolicySnapShot", new ITypeProperty[]{new LazyTypeProperty("delete", () => DateAfterCreation, TypePropertyFlags.None)}, null);
            DateAfterCreation = new NamedObjectType("DateAfterCreation", new ITypeProperty[]{new TypeProperty("daysAfterCreationGreaterThan", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            ManagementPolicyFilter = new NamedObjectType("ManagementPolicyFilter", new ITypeProperty[]{new TypeProperty("prefixMatch", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("blobTypes", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new LazyTypeProperty("blobIndexMatch", () => new TypedArrayType(TagFilter), TypePropertyFlags.None)}, null);
            TagFilter = new NamedObjectType("TagFilter", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("op", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            PrivateEndpointConnectionProperties = new NamedObjectType("PrivateEndpointConnectionProperties", new ITypeProperty[]{new LazyTypeProperty("privateEndpoint", () => PrivateEndpoint, TypePropertyFlags.None), new LazyTypeProperty("privateLinkServiceConnectionState", () => PrivateLinkServiceConnectionState, TypePropertyFlags.Required), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Succeeded'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.None)}, null);
            PrivateEndpoint = new NamedObjectType("PrivateEndpoint", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            PrivateLinkServiceConnectionState = new NamedObjectType("PrivateLinkServiceConnectionState", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Pending'"), new StringLiteralType("'Approved'"), new StringLiteralType("'Rejected'")), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("actionRequired", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ObjectReplicationPolicyProperties = new NamedObjectType("ObjectReplicationPolicyProperties", new ITypeProperty[]{new TypeProperty("policyId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("enabledTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sourceAccount", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("destinationAccount", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("rules", () => new TypedArrayType(ObjectReplicationPolicyRule), TypePropertyFlags.None)}, null);
            ObjectReplicationPolicyRule = new NamedObjectType("ObjectReplicationPolicyRule", new ITypeProperty[]{new TypeProperty("ruleId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceContainer", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("destinationContainer", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("filters", () => ObjectReplicationPolicyFilter, TypePropertyFlags.None)}, null);
            ObjectReplicationPolicyFilter = new NamedObjectType("ObjectReplicationPolicyFilter", new ITypeProperty[]{new TypeProperty("prefixMatch", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("minCreationTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EncryptionScopeProperties = new NamedObjectType("EncryptionScopeProperties", new ITypeProperty[]{new TypeProperty("source", UnionType.Create(new StringLiteralType("'Microsoft.Storage'"), new StringLiteralType("'Microsoft.KeyVault'")), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("creationTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("keyVaultProperties", () => EncryptionScopeKeyVaultProperties, TypePropertyFlags.None)}, null);
            EncryptionScopeKeyVaultProperties = new NamedObjectType("EncryptionScopeKeyVaultProperties", new ITypeProperty[]{new TypeProperty("keyUri", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BlobServicePropertiesProperties = new NamedObjectType("BlobServicePropertiesProperties", new ITypeProperty[]{new LazyTypeProperty("cors", () => CorsRules, TypePropertyFlags.None), new TypeProperty("defaultServiceVersion", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("deleteRetentionPolicy", () => DeleteRetentionPolicy, TypePropertyFlags.None), new TypeProperty("isVersioningEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("automaticSnapshotPolicyEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("changeFeed", () => ChangeFeed, TypePropertyFlags.None), new LazyTypeProperty("restorePolicy", () => RestorePolicyProperties, TypePropertyFlags.None), new LazyTypeProperty("containerDeleteRetentionPolicy", () => DeleteRetentionPolicy, TypePropertyFlags.None)}, null);
            CorsRules = new NamedObjectType("CorsRules", new ITypeProperty[]{new LazyTypeProperty("corsRules", () => new TypedArrayType(CorsRule), TypePropertyFlags.None)}, null);
            CorsRule = new NamedObjectType("CorsRule", new ITypeProperty[]{new TypeProperty("allowedOrigins", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new TypeProperty("allowedMethods", new TypedArrayType(UnionType.Create(new StringLiteralType("'DELETE'"), new StringLiteralType("'GET'"), new StringLiteralType("'HEAD'"), new StringLiteralType("'MERGE'"), new StringLiteralType("'POST'"), new StringLiteralType("'OPTIONS'"), new StringLiteralType("'PUT'"))), TypePropertyFlags.Required), new TypeProperty("maxAgeInSeconds", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("exposedHeaders", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required), new TypeProperty("allowedHeaders", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.Required)}, null);
            DeleteRetentionPolicy = new NamedObjectType("DeleteRetentionPolicy", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("days", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ChangeFeed = new NamedObjectType("ChangeFeed", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            RestorePolicyProperties = new NamedObjectType("RestorePolicyProperties", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.Required), new TypeProperty("days", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("lastEnabledTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("minRestoreTime", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ContainerProperties = new NamedObjectType("ContainerProperties", new ITypeProperty[]{new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("deleted", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("deletedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("remainingRetentionDays", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("defaultEncryptionScope", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("denyEncryptionScopeOverride", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("publicAccess", UnionType.Create(new StringLiteralType("'Container'"), new StringLiteralType("'Blob'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("leaseStatus", UnionType.Create(new StringLiteralType("'Locked'"), new StringLiteralType("'Unlocked'")), TypePropertyFlags.ReadOnly), new TypeProperty("leaseState", UnionType.Create(new StringLiteralType("'Available'"), new StringLiteralType("'Leased'"), new StringLiteralType("'Expired'"), new StringLiteralType("'Breaking'"), new StringLiteralType("'Broken'")), TypePropertyFlags.ReadOnly), new TypeProperty("leaseDuration", UnionType.Create(new StringLiteralType("'Infinite'"), new StringLiteralType("'Fixed'")), TypePropertyFlags.ReadOnly), new TypeProperty("metadata", new NamedObjectType("metadata", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("immutabilityPolicy", () => ImmutabilityPolicyProperties, TypePropertyFlags.ReadOnly), new LazyTypeProperty("legalHold", () => LegalHoldProperties, TypePropertyFlags.ReadOnly), new TypeProperty("hasLegalHold", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("hasImmutabilityPolicy", LanguageConstants.Bool, TypePropertyFlags.ReadOnly)}, null);
            ImmutabilityPolicyProperties = new NamedObjectType("ImmutabilityPolicyProperties", new ITypeProperty[]{new LazyTypeProperty("properties", () => ImmutabilityPolicyProperty, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("updateHistory", () => new TypedArrayType(UpdateHistoryProperty), TypePropertyFlags.ReadOnly)}, null);
            ImmutabilityPolicyProperty = new NamedObjectType("ImmutabilityPolicyProperty", new ITypeProperty[]{new TypeProperty("immutabilityPeriodSinceCreationInDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Locked'"), new StringLiteralType("'Unlocked'")), TypePropertyFlags.ReadOnly), new TypeProperty("allowProtectedAppendWrites", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            UpdateHistoryProperty = new NamedObjectType("UpdateHistoryProperty", new ITypeProperty[]{new TypeProperty("update", UnionType.Create(new StringLiteralType("'put'"), new StringLiteralType("'lock'"), new StringLiteralType("'extend'")), TypePropertyFlags.ReadOnly), new TypeProperty("immutabilityPeriodSinceCreationInDays", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("timestamp", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("objectIdentifier", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("upn", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            LegalHoldProperties = new NamedObjectType("LegalHoldProperties", new ITypeProperty[]{new TypeProperty("hasLegalHold", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new LazyTypeProperty("tags", () => new TypedArrayType(TagProperty), TypePropertyFlags.None)}, null);
            TagProperty = new NamedObjectType("TagProperty", new ITypeProperty[]{new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("timestamp", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("objectIdentifier", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("upn", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            FileServicePropertiesProperties = new NamedObjectType("FileServicePropertiesProperties", new ITypeProperty[]{new LazyTypeProperty("cors", () => CorsRules, TypePropertyFlags.None), new LazyTypeProperty("shareDeleteRetentionPolicy", () => DeleteRetentionPolicy, TypePropertyFlags.None)}, null);
            FileShareProperties = new NamedObjectType("FileShareProperties", new ITypeProperty[]{new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("metadata", new NamedObjectType("metadata", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("shareQuota", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("enabledProtocols", UnionType.Create(new StringLiteralType("'SMB'"), new StringLiteralType("'NFS'")), TypePropertyFlags.None), new TypeProperty("rootSquash", UnionType.Create(new StringLiteralType("'NoRootSquash'"), new StringLiteralType("'RootSquash'"), new StringLiteralType("'AllSquash'")), TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("deleted", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("deletedTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("remainingRetentionDays", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("accessTier", UnionType.Create(new StringLiteralType("'TransactionOptimized'"), new StringLiteralType("'Hot'"), new StringLiteralType("'Cool'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("accessTierChangeTime", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("accessTierStatus", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("shareUsageBytes", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            QueueServicePropertiesProperties = new NamedObjectType("QueueServicePropertiesProperties", new ITypeProperty[]{new LazyTypeProperty("cors", () => CorsRules, TypePropertyFlags.None)}, null);
            QueueProperties = new NamedObjectType("QueueProperties", new ITypeProperty[]{new TypeProperty("metadata", new NamedObjectType("metadata", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("approximateMessageCount", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            TableServicePropertiesProperties = new NamedObjectType("TableServicePropertiesProperties", new ITypeProperty[]{new LazyTypeProperty("cors", () => CorsRules, TypePropertyFlags.None)}, null);
            ResourceType_storageAccounts = new ResourceType("Microsoft.Storage/storageAccounts", new ITypeProperty[]{new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.Required), new TypeProperty("kind", UnionType.Create(new StringLiteralType("'Storage'"), new StringLiteralType("'StorageV2'"), new StringLiteralType("'BlobStorage'"), new StringLiteralType("'FileStorage'"), new StringLiteralType("'BlockBlobStorage'")), TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => Identity, TypePropertyFlags.None), new LazyTypeProperty("properties", () => StorageAccountPropertiesCreateParameters, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts);
            ResourceType_storageAccounts_managementPolicies = new ResourceType("Microsoft.Storage/storageAccounts/managementPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/managementPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ManagementPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_managementPolicies);
            ResourceType_storageAccounts_privateEndpointConnections = new ResourceType("Microsoft.Storage/storageAccounts/privateEndpointConnections", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/privateEndpointConnections'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => PrivateEndpointConnectionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_privateEndpointConnections);
            ResourceType_storageAccounts_objectReplicationPolicies = new ResourceType("Microsoft.Storage/storageAccounts/objectReplicationPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/objectReplicationPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ObjectReplicationPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_objectReplicationPolicies);
            ResourceType_storageAccounts_encryptionScopes = new ResourceType("Microsoft.Storage/storageAccounts/encryptionScopes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/encryptionScopes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => EncryptionScopeProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_encryptionScopes);
            ResourceType_storageAccounts_blobServices = new ResourceType("Microsoft.Storage/storageAccounts/blobServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/blobServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => BlobServicePropertiesProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_blobServices);
            ResourceType_storageAccounts_fileServices = new ResourceType("Microsoft.Storage/storageAccounts/fileServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/fileServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => FileServicePropertiesProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_fileServices);
            ResourceType_storageAccounts_queueServices = new ResourceType("Microsoft.Storage/storageAccounts/queueServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/queueServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => QueueServicePropertiesProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_queueServices);
            ResourceType_storageAccounts_tableServices = new ResourceType("Microsoft.Storage/storageAccounts/tableServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/tableServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => TableServicePropertiesProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_tableServices);
            ResourceType_storageAccounts_blobServices_containers = new ResourceType("Microsoft.Storage/storageAccounts/blobServices/containers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/blobServices/containers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ContainerProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_blobServices_containers);
            ResourceType_storageAccounts_fileServices_shares = new ResourceType("Microsoft.Storage/storageAccounts/fileServices/shares", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/fileServices/shares'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => FileShareProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_fileServices_shares);
            ResourceType_storageAccounts_queueServices_queues = new ResourceType("Microsoft.Storage/storageAccounts/queueServices/queues", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/queueServices/queues'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => QueueProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_queueServices_queues);
            ResourceType_storageAccounts_tableServices_tables = new ResourceType("Microsoft.Storage/storageAccounts/tableServices/tables", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/tableServices/tables'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_tableServices_tables);
            ResourceType_storageAccounts_blobServices_containers_immutabilityPolicies = new ResourceType("Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ImmutabilityPolicyProperty, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly)}, null, ResourceTypeReference_storageAccounts_blobServices_containers_immutabilityPolicies);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_storageAccounts, () => InstanceLazy.Value.ResourceType_storageAccounts);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_managementPolicies, () => InstanceLazy.Value.ResourceType_storageAccounts_managementPolicies);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_privateEndpointConnections, () => InstanceLazy.Value.ResourceType_storageAccounts_privateEndpointConnections);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_objectReplicationPolicies, () => InstanceLazy.Value.ResourceType_storageAccounts_objectReplicationPolicies);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_encryptionScopes, () => InstanceLazy.Value.ResourceType_storageAccounts_encryptionScopes);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_blobServices, () => InstanceLazy.Value.ResourceType_storageAccounts_blobServices);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_fileServices, () => InstanceLazy.Value.ResourceType_storageAccounts_fileServices);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_queueServices, () => InstanceLazy.Value.ResourceType_storageAccounts_queueServices);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_tableServices, () => InstanceLazy.Value.ResourceType_storageAccounts_tableServices);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_blobServices_containers, () => InstanceLazy.Value.ResourceType_storageAccounts_blobServices_containers);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_fileServices_shares, () => InstanceLazy.Value.ResourceType_storageAccounts_fileServices_shares);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_queueServices_queues, () => InstanceLazy.Value.ResourceType_storageAccounts_queueServices_queues);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_tableServices_tables, () => InstanceLazy.Value.ResourceType_storageAccounts_tableServices_tables);
            registrar.RegisterType(ResourceTypeReference_storageAccounts_blobServices_containers_immutabilityPolicies, () => InstanceLazy.Value.ResourceType_storageAccounts_blobServices_containers_immutabilityPolicies);
        }
        private readonly ResourceType ResourceType_storageAccounts;
        private readonly ResourceType ResourceType_storageAccounts_managementPolicies;
        private readonly ResourceType ResourceType_storageAccounts_privateEndpointConnections;
        private readonly ResourceType ResourceType_storageAccounts_objectReplicationPolicies;
        private readonly ResourceType ResourceType_storageAccounts_encryptionScopes;
        private readonly ResourceType ResourceType_storageAccounts_blobServices;
        private readonly ResourceType ResourceType_storageAccounts_fileServices;
        private readonly ResourceType ResourceType_storageAccounts_queueServices;
        private readonly ResourceType ResourceType_storageAccounts_tableServices;
        private readonly ResourceType ResourceType_storageAccounts_blobServices_containers;
        private readonly ResourceType ResourceType_storageAccounts_fileServices_shares;
        private readonly ResourceType ResourceType_storageAccounts_queueServices_queues;
        private readonly ResourceType ResourceType_storageAccounts_tableServices_tables;
        private readonly ResourceType ResourceType_storageAccounts_blobServices_containers_immutabilityPolicies;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol Identity;
        private readonly TypeSymbol StorageAccountPropertiesCreateParameters;
        private readonly TypeSymbol CustomDomain;
        private readonly TypeSymbol Encryption;
        private readonly TypeSymbol EncryptionServices;
        private readonly TypeSymbol EncryptionService;
        private readonly TypeSymbol KeyVaultProperties;
        private readonly TypeSymbol NetworkRuleSet;
        private readonly TypeSymbol VirtualNetworkRule;
        private readonly TypeSymbol IPRule;
        private readonly TypeSymbol AzureFilesIdentityBasedAuthentication;
        private readonly TypeSymbol ActiveDirectoryProperties;
        private readonly TypeSymbol RoutingPreference;
        private readonly TypeSymbol ManagementPolicyProperties;
        private readonly TypeSymbol ManagementPolicySchema;
        private readonly TypeSymbol ManagementPolicyRule;
        private readonly TypeSymbol ManagementPolicyDefinition;
        private readonly TypeSymbol ManagementPolicyAction;
        private readonly TypeSymbol ManagementPolicyBaseBlob;
        private readonly TypeSymbol DateAfterModification;
        private readonly TypeSymbol ManagementPolicySnapShot;
        private readonly TypeSymbol DateAfterCreation;
        private readonly TypeSymbol ManagementPolicyFilter;
        private readonly TypeSymbol TagFilter;
        private readonly TypeSymbol PrivateEndpointConnectionProperties;
        private readonly TypeSymbol PrivateEndpoint;
        private readonly TypeSymbol PrivateLinkServiceConnectionState;
        private readonly TypeSymbol ObjectReplicationPolicyProperties;
        private readonly TypeSymbol ObjectReplicationPolicyRule;
        private readonly TypeSymbol ObjectReplicationPolicyFilter;
        private readonly TypeSymbol EncryptionScopeProperties;
        private readonly TypeSymbol EncryptionScopeKeyVaultProperties;
        private readonly TypeSymbol BlobServicePropertiesProperties;
        private readonly TypeSymbol CorsRules;
        private readonly TypeSymbol CorsRule;
        private readonly TypeSymbol DeleteRetentionPolicy;
        private readonly TypeSymbol ChangeFeed;
        private readonly TypeSymbol RestorePolicyProperties;
        private readonly TypeSymbol ContainerProperties;
        private readonly TypeSymbol ImmutabilityPolicyProperties;
        private readonly TypeSymbol ImmutabilityPolicyProperty;
        private readonly TypeSymbol UpdateHistoryProperty;
        private readonly TypeSymbol LegalHoldProperties;
        private readonly TypeSymbol TagProperty;
        private readonly TypeSymbol FileServicePropertiesProperties;
        private readonly TypeSymbol FileShareProperties;
        private readonly TypeSymbol QueueServicePropertiesProperties;
        private readonly TypeSymbol QueueProperties;
        private readonly TypeSymbol TableServicePropertiesProperties;
    }
}
