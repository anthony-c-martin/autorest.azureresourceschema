// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_ServiceFabricMesh_2018_07_01_preview
    {
        private const string ProviderNamespace = "Microsoft.ServiceFabricMesh";
        private const string ApiVersion = "2018-07-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_applications = new ResourceTypeReference(ProviderNamespace, new[]{"applications"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_networks = new ResourceTypeReference(ProviderNamespace, new[]{"networks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_volumes = new ResourceTypeReference(ProviderNamespace, new[]{"volumes"}, ApiVersion);
        private static Lazy<Microsoft_ServiceFabricMesh_2018_07_01_preview> InstanceLazy = new Lazy<Microsoft_ServiceFabricMesh_2018_07_01_preview>(() => new Microsoft_ServiceFabricMesh_2018_07_01_preview());
        private Microsoft_ServiceFabricMesh_2018_07_01_preview()
        {
            ApplicationResourceProperties = new NamedObjectType("ApplicationResourceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("debugParams", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("services", () => new TypedArrayType(ServiceResourceDescription), TypePropertyFlags.None), new TypeProperty("healthState", UnionType.Create(new StringLiteralType("'Invalid'"), new StringLiteralType("'Ok'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Error'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.ReadOnly), new TypeProperty("unhealthyEvaluation", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Invalid'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Upgrading'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly), new TypeProperty("statusDetails", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("serviceNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.ReadOnly), new LazyTypeProperty("diagnostics", () => DiagnosticsDescription, TypePropertyFlags.None)}, null);
            ServiceResourceDescription = new NamedObjectType("ServiceResourceDescription", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ServiceResourceProperties, TypePropertyFlags.Required)}, null);
            ServiceResourceProperties = new NamedObjectType("ServiceResourceProperties", new ITypeProperty[]{new TypeProperty("osType", UnionType.Create(new StringLiteralType("'Linux'"), new StringLiteralType("'Windows'")), TypePropertyFlags.Required), new LazyTypeProperty("codePackages", () => new TypedArrayType(ContainerCodePackageProperties), TypePropertyFlags.Required), new LazyTypeProperty("networkRefs", () => new TypedArrayType(NetworkRef), TypePropertyFlags.None), new LazyTypeProperty("diagnostics", () => DiagnosticsRef, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("replicaCount", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("healthState", UnionType.Create(new StringLiteralType("'Invalid'"), new StringLiteralType("'Ok'"), new StringLiteralType("'Warning'"), new StringLiteralType("'Error'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Unknown'"), new StringLiteralType("'Active'"), new StringLiteralType("'Upgrading'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Creating'"), new StringLiteralType("'Failed'")), TypePropertyFlags.ReadOnly)}, null);
            ContainerCodePackageProperties = new NamedObjectType("ContainerCodePackageProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("image", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("imageRegistryCredential", () => ImageRegistryCredential, TypePropertyFlags.None), new TypeProperty("entrypoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("commands", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("environmentVariables", () => new TypedArrayType(EnvironmentVariable), TypePropertyFlags.None), new LazyTypeProperty("settings", () => new TypedArrayType(Setting), TypePropertyFlags.None), new LazyTypeProperty("labels", () => new TypedArrayType(ContainerLabel), TypePropertyFlags.None), new LazyTypeProperty("endpoints", () => new TypedArrayType(EndpointProperties), TypePropertyFlags.None), new LazyTypeProperty("resources", () => ResourceRequirements, TypePropertyFlags.Required), new LazyTypeProperty("volumeRefs", () => new TypedArrayType(ContainerVolume), TypePropertyFlags.None), new LazyTypeProperty("instanceView", () => ContainerInstanceView, TypePropertyFlags.ReadOnly), new LazyTypeProperty("diagnostics", () => DiagnosticsRef, TypePropertyFlags.None)}, null);
            ImageRegistryCredential = new NamedObjectType("ImageRegistryCredential", new ITypeProperty[]{new TypeProperty("server", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EnvironmentVariable = new NamedObjectType("EnvironmentVariable", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Setting = new NamedObjectType("Setting", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerLabel = new NamedObjectType("ContainerLabel", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            EndpointProperties = new NamedObjectType("EndpointProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("port", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceRequirements = new NamedObjectType("ResourceRequirements", new ITypeProperty[]{new LazyTypeProperty("requests", () => ResourceRequests, TypePropertyFlags.Required), new LazyTypeProperty("limits", () => ResourceLimits, TypePropertyFlags.None)}, null);
            ResourceRequests = new NamedObjectType("ResourceRequests", new ITypeProperty[]{new TypeProperty("memoryInGB", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("cpu", LanguageConstants.Int, TypePropertyFlags.Required)}, null);
            ResourceLimits = new NamedObjectType("ResourceLimits", new ITypeProperty[]{new TypeProperty("memoryInGB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("cpu", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ContainerVolume = new NamedObjectType("ContainerVolume", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("readOnly", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("destinationPath", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ContainerInstanceView = new NamedObjectType("ContainerInstanceView", new ITypeProperty[]{new TypeProperty("restartCount", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("currentState", () => ContainerState, TypePropertyFlags.None), new LazyTypeProperty("previousState", () => ContainerState, TypePropertyFlags.None), new LazyTypeProperty("events", () => new TypedArrayType(ContainerEvent), TypePropertyFlags.None)}, null);
            ContainerState = new NamedObjectType("ContainerState", new ITypeProperty[]{new TypeProperty("state", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("exitCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("finishTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("detailStatus", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ContainerEvent = new NamedObjectType("ContainerEvent", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("firstTimestamp", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("lastTimestamp", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DiagnosticsRef = new NamedObjectType("DiagnosticsRef", new ITypeProperty[]{new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("sinkRefs", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            NetworkRef = new NamedObjectType("NetworkRef", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DiagnosticsDescription = new NamedObjectType("DiagnosticsDescription", new ITypeProperty[]{new LazyTypeProperty("sinks", () => new TypedArrayType(DiagnosticsSinkProperties), TypePropertyFlags.None), new TypeProperty("enabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("defaultSinkRefs", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            DiagnosticsSinkProperties = new DiscriminatedObjectType("DiagnosticsSinkProperties", "kind", new ITypeProperty[]{new LazyTypeProperty("DiagnosticsSinkProperties", () => AzureInternalMonitoringPipelineSinkDescription, TypePropertyFlags.None)});
            AzureInternalMonitoringPipelineSinkDescription = new NamedObjectType("AzureInternalMonitoringPipelineSinkDescription", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("namespace", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("maConfigUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("fluentdConfigUrl", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("autoKeyConfigUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("kind", new StringLiteralType("'AzureInternalMonitoringPipeline'"), TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkResourceProperties = new NamedObjectType("NetworkResourceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("addressPrefix", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("ingressConfig", () => IngressConfig, TypePropertyFlags.None)}, null);
            IngressConfig = new NamedObjectType("IngressConfig", new ITypeProperty[]{new TypeProperty("qosLevel", new StringLiteralType("'Bronze'"), TypePropertyFlags.None), new LazyTypeProperty("layer4", () => new TypedArrayType(Layer4IngressConfig), TypePropertyFlags.None), new TypeProperty("publicIPAddress", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            Layer4IngressConfig = new NamedObjectType("Layer4IngressConfig", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("applicationName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("serviceName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endpointName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VolumeResourceProperties = new NamedObjectType("VolumeResourceProperties", new ITypeProperty[]{new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provider", new StringLiteralType("'SFAzureFile'"), TypePropertyFlags.Required), new LazyTypeProperty("azureFileParameters", () => VolumeProviderParametersAzureFile, TypePropertyFlags.None)}, null);
            VolumeProviderParametersAzureFile = new NamedObjectType("VolumeProviderParametersAzureFile", new ITypeProperty[]{new TypeProperty("accountName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("accountKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("shareName", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ResourceType_applications = new ResourceType("Microsoft.ServiceFabricMesh/applications", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceFabricMesh/applications'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicationResourceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-07-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_applications);
            ResourceType_networks = new ResourceType("Microsoft.ServiceFabricMesh/networks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceFabricMesh/networks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NetworkResourceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-07-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_networks);
            ResourceType_volumes = new ResourceType("Microsoft.ServiceFabricMesh/volumes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ServiceFabricMesh/volumes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VolumeResourceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-07-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_volumes);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_applications, () => InstanceLazy.Value.ResourceType_applications);
            registrar.RegisterType(ResourceTypeReference_networks, () => InstanceLazy.Value.ResourceType_networks);
            registrar.RegisterType(ResourceTypeReference_volumes, () => InstanceLazy.Value.ResourceType_volumes);
        }
        private readonly ResourceType ResourceType_applications;
        private readonly ResourceType ResourceType_networks;
        private readonly ResourceType ResourceType_volumes;
        private readonly TypeSymbol ApplicationResourceProperties;
        private readonly TypeSymbol ServiceResourceDescription;
        private readonly TypeSymbol ServiceResourceProperties;
        private readonly TypeSymbol ContainerCodePackageProperties;
        private readonly TypeSymbol ImageRegistryCredential;
        private readonly TypeSymbol EnvironmentVariable;
        private readonly TypeSymbol Setting;
        private readonly TypeSymbol ContainerLabel;
        private readonly TypeSymbol EndpointProperties;
        private readonly TypeSymbol ResourceRequirements;
        private readonly TypeSymbol ResourceRequests;
        private readonly TypeSymbol ResourceLimits;
        private readonly TypeSymbol ContainerVolume;
        private readonly TypeSymbol ContainerInstanceView;
        private readonly TypeSymbol ContainerState;
        private readonly TypeSymbol ContainerEvent;
        private readonly TypeSymbol DiagnosticsRef;
        private readonly TypeSymbol NetworkRef;
        private readonly TypeSymbol DiagnosticsDescription;
        private readonly TypeSymbol DiagnosticsSinkProperties;
        private readonly TypeSymbol AzureInternalMonitoringPipelineSinkDescription;
        private readonly TypeSymbol NetworkResourceProperties;
        private readonly TypeSymbol IngressConfig;
        private readonly TypeSymbol Layer4IngressConfig;
        private readonly TypeSymbol VolumeResourceProperties;
        private readonly TypeSymbol VolumeProviderParametersAzureFile;
    }
}
