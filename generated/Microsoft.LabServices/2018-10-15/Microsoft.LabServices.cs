// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_LabServices_2018_10_15
    {
        private const string ProviderNamespace = "Microsoft.LabServices";
        private const string ApiVersion = "2018-10-15";
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts_galleryimages = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts", "galleryimages"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts_labs = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts", "labs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts_labs_environmentsettings = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts", "labs", "environmentsettings"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts_labs_users = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts", "labs", "users"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labaccounts_labs_environmentsettings_environments = new ResourceTypeReference(ProviderNamespace, new[]{"labaccounts", "labs", "environmentsettings", "environments"}, ApiVersion);
        private static Lazy<Microsoft_LabServices_2018_10_15> InstanceLazy = new Lazy<Microsoft_LabServices_2018_10_15>(() => new Microsoft_LabServices_2018_10_15());
        private Microsoft_LabServices_2018_10_15()
        {
            LabAccountProperties = new NamedObjectType("LabAccountProperties", new ITypeProperty[]{new LazyTypeProperty("sizeConfiguration", () => SizeConfigurationProperties, TypePropertyFlags.ReadOnly), new TypeProperty("enabledRegionSelection", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            SizeConfigurationProperties = new NamedObjectType("SizeConfigurationProperties", new ITypeProperty[]{new LazyTypeProperty("environmentSizes", () => new TypedArrayType(EnvironmentSize), TypePropertyFlags.None)}, null);
            EnvironmentSize = new NamedObjectType("EnvironmentSize", new ITypeProperty[]{new TypeProperty("name", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Performance'")), TypePropertyFlags.None), new LazyTypeProperty("vmSizes", () => new TypedArrayType(SizeInfo), TypePropertyFlags.None), new TypeProperty("maxPrice", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("minNumberOfCores", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("minMemory", LanguageConstants.Int, TypePropertyFlags.ReadOnly)}, null);
            SizeInfo = new NamedObjectType("SizeInfo", new ITypeProperty[]{new TypeProperty("computeSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("price", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("numberOfCores", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("memory", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            LatestOperationResult = new NamedObjectType("LatestOperationResult", new ITypeProperty[]{new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("errorCode", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("errorMessage", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("requestUri", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("httpMethod", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("operationUrl", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            GalleryImageProperties = new NamedObjectType("GalleryImageProperties", new ITypeProperty[]{new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("imageReference", () => GalleryImageReference, TypePropertyFlags.ReadOnly), new TypeProperty("icon", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("isEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("isOverride", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("planId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("isPlanAuthorized", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            GalleryImageReference = new NamedObjectType("GalleryImageReference", new ITypeProperty[]{new TypeProperty("offer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LabProperties = new NamedObjectType("LabProperties", new ITypeProperty[]{new TypeProperty("maxUsersInLab", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("userQuota", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("invitationCode", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdByObjectId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("usageQuota", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userAccessMode", UnionType.Create(new StringLiteralType("'Restricted'"), new StringLiteralType("'Open'")), TypePropertyFlags.None), new TypeProperty("createdByUserPrincipalName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            EnvironmentSettingProperties = new NamedObjectType("EnvironmentSettingProperties", new ITypeProperty[]{new TypeProperty("publishingState", UnionType.Create(new StringLiteralType("'Draft'"), new StringLiteralType("'Publishing'"), new StringLiteralType("'Published'"), new StringLiteralType("'PublishFailed'"), new StringLiteralType("'Scaling'")), TypePropertyFlags.ReadOnly), new TypeProperty("configurationState", UnionType.Create(new StringLiteralType("'NotApplicable'"), new StringLiteralType("'Completed'")), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("title", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("resourceSettings", () => ResourceSettings, TypePropertyFlags.Required), new TypeProperty("lastChanged", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastPublished", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            ResourceSettings = new NamedObjectType("ResourceSettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("galleryImageResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("imageName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("size", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'Standard'"), new StringLiteralType("'Performance'")), TypePropertyFlags.None), new TypeProperty("cores", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new LazyTypeProperty("referenceVm", () => ReferenceVm, TypePropertyFlags.Required)}, null);
            ReferenceVm = new NamedObjectType("ReferenceVm", new ITypeProperty[]{new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("vmStateDetails", () => VmStateDetails, TypePropertyFlags.ReadOnly), new TypeProperty("vmResourceId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VmStateDetails = new NamedObjectType("VmStateDetails", new ITypeProperty[]{new TypeProperty("rdpAuthority", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sshAuthority", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("powerState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("lastKnownPowerState", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            EnvironmentProperties = new NamedObjectType("EnvironmentProperties", new ITypeProperty[]{new LazyTypeProperty("resourceSets", () => ResourceSet, TypePropertyFlags.None), new TypeProperty("claimedByUserObjectId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("claimedByUserPrincipalId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("claimedByUserName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("isClaimed", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("lastKnownPowerState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("networkInterface", () => NetworkInterface, TypePropertyFlags.ReadOnly), new TypeProperty("totalUsage", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("passwordLastReset", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            ResourceSet = new NamedObjectType("ResourceSet", new ITypeProperty[]{new TypeProperty("vmResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceSettingId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NetworkInterface = new NamedObjectType("NetworkInterface", new ITypeProperty[]{new TypeProperty("privateIpAddress", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("sshAuthority", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("rdpAuthority", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            UserProperties = new NamedObjectType("UserProperties", new ITypeProperty[]{new TypeProperty("email", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("familyName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("givenName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("totalUsage", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("latestOperationResult", () => LatestOperationResult, TypePropertyFlags.ReadOnly)}, null);
            ResourceType_labaccounts = new ResourceType("Microsoft.LabServices/labaccounts", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LabAccountProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts);
            ResourceType_labaccounts_galleryimages = new ResourceType("Microsoft.LabServices/labaccounts/galleryimages", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts/galleryimages'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => GalleryImageProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts_galleryimages);
            ResourceType_labaccounts_labs = new ResourceType("Microsoft.LabServices/labaccounts/labs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts/labs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LabProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts_labs);
            ResourceType_labaccounts_labs_environmentsettings = new ResourceType("Microsoft.LabServices/labaccounts/labs/environmentsettings", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts/labs/environmentsettings'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => EnvironmentSettingProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts_labs_environmentsettings);
            ResourceType_labaccounts_labs_users = new ResourceType("Microsoft.LabServices/labaccounts/labs/users", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts/labs/users'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => UserProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts_labs_users);
            ResourceType_labaccounts_labs_environmentsettings_environments = new ResourceType("Microsoft.LabServices/labaccounts/labs/environmentsettings/environments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.LabServices/labaccounts/labs/environmentsettings/environments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => EnvironmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-10-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labaccounts_labs_environmentsettings_environments);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_labaccounts, () => InstanceLazy.Value.ResourceType_labaccounts);
            registrar.RegisterType(ResourceTypeReference_labaccounts_galleryimages, () => InstanceLazy.Value.ResourceType_labaccounts_galleryimages);
            registrar.RegisterType(ResourceTypeReference_labaccounts_labs, () => InstanceLazy.Value.ResourceType_labaccounts_labs);
            registrar.RegisterType(ResourceTypeReference_labaccounts_labs_environmentsettings, () => InstanceLazy.Value.ResourceType_labaccounts_labs_environmentsettings);
            registrar.RegisterType(ResourceTypeReference_labaccounts_labs_users, () => InstanceLazy.Value.ResourceType_labaccounts_labs_users);
            registrar.RegisterType(ResourceTypeReference_labaccounts_labs_environmentsettings_environments, () => InstanceLazy.Value.ResourceType_labaccounts_labs_environmentsettings_environments);
        }
        private readonly ResourceType ResourceType_labaccounts;
        private readonly ResourceType ResourceType_labaccounts_galleryimages;
        private readonly ResourceType ResourceType_labaccounts_labs;
        private readonly ResourceType ResourceType_labaccounts_labs_environmentsettings;
        private readonly ResourceType ResourceType_labaccounts_labs_users;
        private readonly ResourceType ResourceType_labaccounts_labs_environmentsettings_environments;
        private readonly TypeSymbol LabAccountProperties;
        private readonly TypeSymbol SizeConfigurationProperties;
        private readonly TypeSymbol EnvironmentSize;
        private readonly TypeSymbol SizeInfo;
        private readonly TypeSymbol LatestOperationResult;
        private readonly TypeSymbol GalleryImageProperties;
        private readonly TypeSymbol GalleryImageReference;
        private readonly TypeSymbol LabProperties;
        private readonly TypeSymbol EnvironmentSettingProperties;
        private readonly TypeSymbol ResourceSettings;
        private readonly TypeSymbol ReferenceVm;
        private readonly TypeSymbol VmStateDetails;
        private readonly TypeSymbol EnvironmentProperties;
        private readonly TypeSymbol ResourceSet;
        private readonly TypeSymbol NetworkInterface;
        private readonly TypeSymbol UserProperties;
    }
}
