// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_HybridData_2016_06_01
    {
        private const string ProviderNamespace = "Microsoft.HybridData";
        private const string ApiVersion = "2016-06-01";
        private static readonly ResourceTypeReference ResourceTypeReference_dataManagers = new ResourceTypeReference(ProviderNamespace, new[]{"dataManagers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_dataManagers_dataStores = new ResourceTypeReference(ProviderNamespace, new[]{"dataManagers", "dataStores"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_dataManagers_dataServices_jobDefinitions = new ResourceTypeReference(ProviderNamespace, new[]{"dataManagers", "dataServices", "jobDefinitions"}, ApiVersion);
        private static Lazy<Microsoft_HybridData_2016_06_01> InstanceLazy = new Lazy<Microsoft_HybridData_2016_06_01>(() => new Microsoft_HybridData_2016_06_01());
        private Microsoft_HybridData_2016_06_01()
        {
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            JobDefinitionProperties = new NamedObjectType("JobDefinitionProperties", new ITypeProperty[]{new TypeProperty("dataSourceId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("dataSinkId", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("schedules", () => new TypedArrayType(Schedule), TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Supported'")), TypePropertyFlags.Required), new TypeProperty("lastModifiedTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("runLocation", UnionType.Create(new StringLiteralType("'none'"), new StringLiteralType("'australiaeast'"), new StringLiteralType("'australiasoutheast'"), new StringLiteralType("'brazilsouth'"), new StringLiteralType("'canadacentral'"), new StringLiteralType("'canadaeast'"), new StringLiteralType("'centralindia'"), new StringLiteralType("'centralus'"), new StringLiteralType("'eastasia'"), new StringLiteralType("'eastus'"), new StringLiteralType("'eastus2'"), new StringLiteralType("'japaneast'"), new StringLiteralType("'japanwest'"), new StringLiteralType("'koreacentral'"), new StringLiteralType("'koreasouth'"), new StringLiteralType("'southeastasia'"), new StringLiteralType("'southcentralus'"), new StringLiteralType("'southindia'"), new StringLiteralType("'northcentralus'"), new StringLiteralType("'northeurope'"), new StringLiteralType("'uksouth'"), new StringLiteralType("'ukwest'"), new StringLiteralType("'westcentralus'"), new StringLiteralType("'westeurope'"), new StringLiteralType("'westindia'"), new StringLiteralType("'westus'"), new StringLiteralType("'westus2'")), TypePropertyFlags.None), new TypeProperty("userConfirmation", UnionType.Create(new StringLiteralType("'NotRequired'"), new StringLiteralType("'Required'")), TypePropertyFlags.None), new TypeProperty("dataServiceInput", LanguageConstants.Any, TypePropertyFlags.None), new LazyTypeProperty("customerSecrets", () => new TypedArrayType(CustomerSecret), TypePropertyFlags.None)}, null);
            Schedule = new NamedObjectType("Schedule", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("policyList", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None)}, null);
            CustomerSecret = new NamedObjectType("CustomerSecret", new ITypeProperty[]{new TypeProperty("keyIdentifier", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("keyValue", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("algorithm", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'RSA1_5'"), new StringLiteralType("'RSA_OAEP'"), new StringLiteralType("'PlainText'")), TypePropertyFlags.Required)}, null);
            DataStoreProperties = new NamedObjectType("DataStoreProperties", new ITypeProperty[]{new TypeProperty("repositoryId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'"), new StringLiteralType("'Supported'")), TypePropertyFlags.Required), new TypeProperty("extendedProperties", LanguageConstants.Any, TypePropertyFlags.None), new TypeProperty("dataStoreTypeId", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("customerSecrets", () => new TypedArrayType(CustomerSecret), TypePropertyFlags.None)}, null);
            ResourceType_dataManagers = new ResourceType("Microsoft.HybridData/dataManagers", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.HybridData/dataManagers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("etag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_dataManagers);
            ResourceType_dataManagers_dataStores = new ResourceType("Microsoft.HybridData/dataManagers/dataStores", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'Microsoft.HybridData/dataManagers/dataStores'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DataStoreProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_dataManagers_dataStores);
            ResourceType_dataManagers_dataServices_jobDefinitions = new ResourceType("Microsoft.HybridData/dataManagers/dataServices/jobDefinitions", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("type", new StringLiteralType("'Microsoft.HybridData/dataManagers/dataServices/jobDefinitions'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => JobDefinitionProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-06-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_dataManagers_dataServices_jobDefinitions);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_dataManagers, () => InstanceLazy.Value.ResourceType_dataManagers);
            registrar.RegisterType(ResourceTypeReference_dataManagers_dataStores, () => InstanceLazy.Value.ResourceType_dataManagers_dataStores);
            registrar.RegisterType(ResourceTypeReference_dataManagers_dataServices_jobDefinitions, () => InstanceLazy.Value.ResourceType_dataManagers_dataServices_jobDefinitions);
        }
        private readonly ResourceType ResourceType_dataManagers;
        private readonly ResourceType ResourceType_dataManagers_dataStores;
        private readonly ResourceType ResourceType_dataManagers_dataServices_jobDefinitions;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol JobDefinitionProperties;
        private readonly TypeSymbol Schedule;
        private readonly TypeSymbol CustomerSecret;
        private readonly TypeSymbol DataStoreProperties;
    }
}
