// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DBforMariaDB_2018_06_01_preview
    {
        private const string ProviderNamespace = "Microsoft.DBforMariaDB";
        private const string ApiVersion = "2018-06-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_servers = new ResourceTypeReference(ProviderNamespace, new[]{"servers"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_firewallRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "firewallRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_virtualNetworkRules = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "virtualNetworkRules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_databases = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "databases"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_configurations = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "configurations"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_servers_securityAlertPolicies = new ResourceTypeReference(ProviderNamespace, new[]{"servers", "securityAlertPolicies"}, ApiVersion);
        private static Lazy<Microsoft_DBforMariaDB_2018_06_01_preview> InstanceLazy = new Lazy<Microsoft_DBforMariaDB_2018_06_01_preview>(() => new Microsoft_DBforMariaDB_2018_06_01_preview());
        private Microsoft_DBforMariaDB_2018_06_01_preview()
        {
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tier", UnionType.Create(new StringLiteralType("'Basic'"), new StringLiteralType("'GeneralPurpose'"), new StringLiteralType("'MemoryOptimized'")), TypePropertyFlags.None), new TypeProperty("capacity", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ServerPropertiesForCreate = new DiscriminatedObjectType("ServerPropertiesForCreate", "createMode", new ITypeProperty[]{new LazyTypeProperty("ServerPropertiesForCreate", () => ServerPropertiesForDefaultCreate, TypePropertyFlags.None), new LazyTypeProperty("ServerPropertiesForCreate", () => ServerPropertiesForRestore, TypePropertyFlags.None), new LazyTypeProperty("ServerPropertiesForCreate", () => ServerPropertiesForGeoRestore, TypePropertyFlags.None), new LazyTypeProperty("ServerPropertiesForCreate", () => ServerPropertiesForReplica, TypePropertyFlags.None)});
            StorageProfile = new NamedObjectType("StorageProfile", new ITypeProperty[]{new TypeProperty("backupRetentionDays", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("geoRedundantBackup", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("storageMB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("storageAutogrow", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None)}, null);
            ServerPropertiesForDefaultCreate = new NamedObjectType("ServerPropertiesForDefaultCreate", new ITypeProperty[]{new TypeProperty("administratorLogin", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("administratorLoginPassword", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("createMode", new StringLiteralType("'Default'"), TypePropertyFlags.Required), new TypeProperty("version", UnionType.Create(new StringLiteralType("'5.6'"), new StringLiteralType("'5.7'")), TypePropertyFlags.None), new TypeProperty("sslEnforcement", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None)}, null);
            ServerPropertiesForRestore = new NamedObjectType("ServerPropertiesForRestore", new ITypeProperty[]{new TypeProperty("sourceServerId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("restorePointInTime", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("createMode", new StringLiteralType("'PointInTimeRestore'"), TypePropertyFlags.Required), new TypeProperty("version", UnionType.Create(new StringLiteralType("'5.6'"), new StringLiteralType("'5.7'")), TypePropertyFlags.None), new TypeProperty("sslEnforcement", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None)}, null);
            ServerPropertiesForGeoRestore = new NamedObjectType("ServerPropertiesForGeoRestore", new ITypeProperty[]{new TypeProperty("sourceServerId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("createMode", new StringLiteralType("'GeoRestore'"), TypePropertyFlags.Required), new TypeProperty("version", UnionType.Create(new StringLiteralType("'5.6'"), new StringLiteralType("'5.7'")), TypePropertyFlags.None), new TypeProperty("sslEnforcement", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None)}, null);
            ServerPropertiesForReplica = new NamedObjectType("ServerPropertiesForReplica", new ITypeProperty[]{new TypeProperty("sourceServerId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("createMode", new StringLiteralType("'Replica'"), TypePropertyFlags.Required), new TypeProperty("version", UnionType.Create(new StringLiteralType("'5.6'"), new StringLiteralType("'5.7'")), TypePropertyFlags.None), new TypeProperty("sslEnforcement", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new LazyTypeProperty("storageProfile", () => StorageProfile, TypePropertyFlags.None)}, null);
            FirewallRuleProperties = new NamedObjectType("FirewallRuleProperties", new ITypeProperty[]{new TypeProperty("startIpAddress", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("endIpAddress", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            VirtualNetworkRuleProperties = new NamedObjectType("VirtualNetworkRuleProperties", new ITypeProperty[]{new TypeProperty("virtualNetworkSubnetId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("ignoreMissingVnetServiceEndpoint", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("state", UnionType.Create(new StringLiteralType("'Initializing'"), new StringLiteralType("'InProgress'"), new StringLiteralType("'Ready'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Unknown'")), TypePropertyFlags.ReadOnly)}, null);
            DatabaseProperties = new NamedObjectType("DatabaseProperties", new ITypeProperty[]{new TypeProperty("charset", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("collation", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ConfigurationProperties = new NamedObjectType("ConfigurationProperties", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("defaultValue", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("dataType", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("allowedValues", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("source", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecurityAlertPolicyProperties = new NamedObjectType("SecurityAlertPolicyProperties", new ITypeProperty[]{new TypeProperty("state", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.Required), new TypeProperty("disabledAlerts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("emailAccountAdmins", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccountAccessKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("retentionDays", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceType_servers = new ResourceType("Microsoft.DBforMariaDB/servers", new ITypeProperty[]{new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new LazyTypeProperty("properties", () => ServerPropertiesForCreate, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers);
            ResourceType_servers_firewallRules = new ResourceType("Microsoft.DBforMariaDB/servers/firewallRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers/firewallRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => FirewallRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_firewallRules);
            ResourceType_servers_virtualNetworkRules = new ResourceType("Microsoft.DBforMariaDB/servers/virtualNetworkRules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers/virtualNetworkRules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualNetworkRuleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_virtualNetworkRules);
            ResourceType_servers_databases = new ResourceType("Microsoft.DBforMariaDB/servers/databases", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers/databases'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => DatabaseProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_databases);
            ResourceType_servers_configurations = new ResourceType("Microsoft.DBforMariaDB/servers/configurations", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers/configurations'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ConfigurationProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_configurations);
            ResourceType_servers_securityAlertPolicies = new ResourceType("Microsoft.DBforMariaDB/servers/securityAlertPolicies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DBforMariaDB/servers/securityAlertPolicies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => SecurityAlertPolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2018-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_servers_securityAlertPolicies);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_servers, () => InstanceLazy.Value.ResourceType_servers);
            registrar.RegisterType(ResourceTypeReference_servers_firewallRules, () => InstanceLazy.Value.ResourceType_servers_firewallRules);
            registrar.RegisterType(ResourceTypeReference_servers_virtualNetworkRules, () => InstanceLazy.Value.ResourceType_servers_virtualNetworkRules);
            registrar.RegisterType(ResourceTypeReference_servers_databases, () => InstanceLazy.Value.ResourceType_servers_databases);
            registrar.RegisterType(ResourceTypeReference_servers_configurations, () => InstanceLazy.Value.ResourceType_servers_configurations);
            registrar.RegisterType(ResourceTypeReference_servers_securityAlertPolicies, () => InstanceLazy.Value.ResourceType_servers_securityAlertPolicies);
        }
        private readonly ResourceType ResourceType_servers;
        private readonly ResourceType ResourceType_servers_firewallRules;
        private readonly ResourceType ResourceType_servers_virtualNetworkRules;
        private readonly ResourceType ResourceType_servers_databases;
        private readonly ResourceType ResourceType_servers_configurations;
        private readonly ResourceType ResourceType_servers_securityAlertPolicies;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol ServerPropertiesForCreate;
        private readonly TypeSymbol StorageProfile;
        private readonly TypeSymbol ServerPropertiesForDefaultCreate;
        private readonly TypeSymbol ServerPropertiesForRestore;
        private readonly TypeSymbol ServerPropertiesForGeoRestore;
        private readonly TypeSymbol ServerPropertiesForReplica;
        private readonly TypeSymbol FirewallRuleProperties;
        private readonly TypeSymbol VirtualNetworkRuleProperties;
        private readonly TypeSymbol DatabaseProperties;
        private readonly TypeSymbol ConfigurationProperties;
        private readonly TypeSymbol SecurityAlertPolicyProperties;
    }
}
