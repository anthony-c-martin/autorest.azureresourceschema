// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DevTestLab_2015_05_21_preview
    {
        private const string ProviderNamespace = "Microsoft.DevTestLab";
        private const string ApiVersion = "2015-05-21-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_labs = new ResourceTypeReference(ProviderNamespace, new[]{"labs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_artifactsources = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "artifactsources"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_customimages = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "customimages"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_formulas = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "formulas"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_schedules = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "schedules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_virtualmachines = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "virtualmachines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_virtualnetworks = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "virtualnetworks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_policysets_policies = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "policysets", "policies"}, ApiVersion);
        private static Lazy<Microsoft_DevTestLab_2015_05_21_preview> InstanceLazy = new Lazy<Microsoft_DevTestLab_2015_05_21_preview>(() => new Microsoft_DevTestLab_2015_05_21_preview());
        private Microsoft_DevTestLab_2015_05_21_preview()
        {
            LabProperties = new NamedObjectType("LabProperties", new ITypeProperty[]{new TypeProperty("defaultStorageAccount", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("artifactsStorageAccount", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("storageAccounts", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("vaultName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labStorageType", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("defaultVirtualNetworkId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactSourceProperties = new NamedObjectType("ArtifactSourceProperties", new ITypeProperty[]{new TypeProperty("displayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceType", UnionType.Create(new StringLiteralType("'VsoGit'"), new StringLiteralType("'GitHub'")), TypePropertyFlags.None), new TypeProperty("folderPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("branchRef", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("securityToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CustomImageProperties = new NamedObjectType("CustomImageProperties", new ITypeProperty[]{new LazyTypeProperty("vm", () => CustomImagePropertiesFromVm, TypePropertyFlags.None), new LazyTypeProperty("vhd", () => CustomImagePropertiesCustom, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", UnionType.Create(new StringLiteralType("'Windows'"), new StringLiteralType("'Linux'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CustomImagePropertiesFromVm = new NamedObjectType("CustomImagePropertiesFromVm", new ITypeProperty[]{new TypeProperty("sourceVmId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sysPrep", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("windowsOsInfo", () => WindowsOsInfo, TypePropertyFlags.None), new LazyTypeProperty("linuxOsInfo", () => LinuxOsInfo, TypePropertyFlags.None)}, null);
            WindowsOsInfo = new NamedObjectType("WindowsOsInfo", new ITypeProperty[]{new TypeProperty("windowsOsState", UnionType.Create(new StringLiteralType("'NonSysprepped'"), new StringLiteralType("'SysprepRequested'"), new StringLiteralType("'SysprepApplied'")), TypePropertyFlags.None)}, null);
            LinuxOsInfo = new NamedObjectType("LinuxOsInfo", new ITypeProperty[]{new TypeProperty("linuxOsState", UnionType.Create(new StringLiteralType("'NonDeprovisioned'"), new StringLiteralType("'DeprovisionRequested'"), new StringLiteralType("'DeprovisionApplied'")), TypePropertyFlags.None)}, null);
            CustomImagePropertiesCustom = new NamedObjectType("CustomImagePropertiesCustom", new ITypeProperty[]{new TypeProperty("imageName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sysPrep", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            FormulaProperties = new NamedObjectType("FormulaProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("formulaContent", () => LabVirtualMachine, TypePropertyFlags.None), new LazyTypeProperty("vm", () => FormulaPropertiesFromVm, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LabVirtualMachine = new NamedObjectType("LabVirtualMachine", new ITypeProperty[]{new LazyTypeProperty("properties", () => LabVirtualMachineProperties, TypePropertyFlags.None), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            LabVirtualMachineProperties = new NamedObjectType("LabVirtualMachineProperties", new ITypeProperty[]{new TypeProperty("notes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ownerObjectId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUserId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUser", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("computeId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customImageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sshKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isAuthenticationWithSshKey", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labVirtualNetworkId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("disallowPublicIpAddress", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("artifacts", () => new TypedArrayType(ArtifactInstallProperties), TypePropertyFlags.None), new LazyTypeProperty("artifactDeploymentStatus", () => ArtifactDeploymentStatusProperties, TypePropertyFlags.None), new LazyTypeProperty("galleryImageReference", () => GalleryImageReference, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactInstallProperties = new NamedObjectType("ArtifactInstallProperties", new ITypeProperty[]{new TypeProperty("artifactId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("parameters", () => new TypedArrayType(ArtifactParameterProperties), TypePropertyFlags.None)}, null);
            ArtifactParameterProperties = new NamedObjectType("ArtifactParameterProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactDeploymentStatusProperties = new NamedObjectType("ArtifactDeploymentStatusProperties", new ITypeProperty[]{new TypeProperty("deploymentStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("artifactsApplied", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalArtifacts", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            GalleryImageReference = new NamedObjectType("GalleryImageReference", new ITypeProperty[]{new TypeProperty("offer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FormulaPropertiesFromVm = new NamedObjectType("FormulaPropertiesFromVm", new ITypeProperty[]{new TypeProperty("labVmId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PolicyProperties = new NamedObjectType("PolicyProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("factName", UnionType.Create(new StringLiteralType("'UserOwnedLabVmCount'"), new StringLiteralType("'LabVmCount'"), new StringLiteralType("'LabVmSize'"), new StringLiteralType("'GalleryImage'"), new StringLiteralType("'UserOwnedLabVmCountInSubnet'")), TypePropertyFlags.None), new TypeProperty("factData", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("threshold", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("evaluatorType", UnionType.Create(new StringLiteralType("'AllowedValuesPolicy'"), new StringLiteralType("'MaxValuePolicy'")), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ScheduleProperties = new NamedObjectType("ScheduleProperties", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("taskType", UnionType.Create(new StringLiteralType("'LabVmsShutdownTask'"), new StringLiteralType("'LabVmsStartupTask'"), new StringLiteralType("'LabBillingTask'")), TypePropertyFlags.None), new LazyTypeProperty("weeklyRecurrence", () => WeekDetails, TypePropertyFlags.None), new LazyTypeProperty("dailyRecurrence", () => DayDetails, TypePropertyFlags.None), new LazyTypeProperty("hourlyRecurrence", () => HourDetails, TypePropertyFlags.None), new TypeProperty("timeZoneId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            WeekDetails = new NamedObjectType("WeekDetails", new ITypeProperty[]{new TypeProperty("weekdays", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("time", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DayDetails = new NamedObjectType("DayDetails", new ITypeProperty[]{new TypeProperty("time", LanguageConstants.String, TypePropertyFlags.None)}, null);
            HourDetails = new NamedObjectType("HourDetails", new ITypeProperty[]{new TypeProperty("minute", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            VirtualNetworkProperties = new NamedObjectType("VirtualNetworkProperties", new ITypeProperty[]{new LazyTypeProperty("allowedSubnets", () => new TypedArrayType(Subnet), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("externalProviderResourceId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("subnetOverrides", () => new TypedArrayType(SubnetOverride), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowPublicIp", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None)}, null);
            SubnetOverride = new NamedObjectType("SubnetOverride", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("useInVmCreationPermission", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None), new TypeProperty("usePublicIpAddressPermission", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None)}, null);
            ResourceType_labs = new ResourceType("Microsoft.DevTestLab/labs", new ITypeProperty[]{new LazyTypeProperty("properties", () => LabProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs);
            ResourceType_labs_artifactsources = new ResourceType("Microsoft.DevTestLab/labs/artifactsources", new ITypeProperty[]{new LazyTypeProperty("properties", () => ArtifactSourceProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/artifactsources'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_artifactsources);
            ResourceType_labs_customimages = new ResourceType("Microsoft.DevTestLab/labs/customimages", new ITypeProperty[]{new LazyTypeProperty("properties", () => CustomImageProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/customimages'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_customimages);
            ResourceType_labs_formulas = new ResourceType("Microsoft.DevTestLab/labs/formulas", new ITypeProperty[]{new LazyTypeProperty("properties", () => FormulaProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/formulas'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_formulas);
            ResourceType_labs_schedules = new ResourceType("Microsoft.DevTestLab/labs/schedules", new ITypeProperty[]{new LazyTypeProperty("properties", () => ScheduleProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/schedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_schedules);
            ResourceType_labs_virtualmachines = new ResourceType("Microsoft.DevTestLab/labs/virtualmachines", new ITypeProperty[]{new LazyTypeProperty("properties", () => LabVirtualMachineProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/virtualmachines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_virtualmachines);
            ResourceType_labs_virtualnetworks = new ResourceType("Microsoft.DevTestLab/labs/virtualnetworks", new ITypeProperty[]{new LazyTypeProperty("properties", () => VirtualNetworkProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/virtualnetworks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_virtualnetworks);
            ResourceType_labs_policysets_policies = new ResourceType("Microsoft.DevTestLab/labs/policysets/policies", new ITypeProperty[]{new LazyTypeProperty("properties", () => PolicyProperties, TypePropertyFlags.Required), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/policysets/policies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2015-05-21-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_policysets_policies);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_labs, () => InstanceLazy.Value.ResourceType_labs);
            registrar.RegisterType(ResourceTypeReference_labs_artifactsources, () => InstanceLazy.Value.ResourceType_labs_artifactsources);
            registrar.RegisterType(ResourceTypeReference_labs_customimages, () => InstanceLazy.Value.ResourceType_labs_customimages);
            registrar.RegisterType(ResourceTypeReference_labs_formulas, () => InstanceLazy.Value.ResourceType_labs_formulas);
            registrar.RegisterType(ResourceTypeReference_labs_schedules, () => InstanceLazy.Value.ResourceType_labs_schedules);
            registrar.RegisterType(ResourceTypeReference_labs_virtualmachines, () => InstanceLazy.Value.ResourceType_labs_virtualmachines);
            registrar.RegisterType(ResourceTypeReference_labs_virtualnetworks, () => InstanceLazy.Value.ResourceType_labs_virtualnetworks);
            registrar.RegisterType(ResourceTypeReference_labs_policysets_policies, () => InstanceLazy.Value.ResourceType_labs_policysets_policies);
        }
        private readonly ResourceType ResourceType_labs;
        private readonly ResourceType ResourceType_labs_artifactsources;
        private readonly ResourceType ResourceType_labs_customimages;
        private readonly ResourceType ResourceType_labs_formulas;
        private readonly ResourceType ResourceType_labs_schedules;
        private readonly ResourceType ResourceType_labs_virtualmachines;
        private readonly ResourceType ResourceType_labs_virtualnetworks;
        private readonly ResourceType ResourceType_labs_policysets_policies;
        private readonly TypeSymbol LabProperties;
        private readonly TypeSymbol ArtifactSourceProperties;
        private readonly TypeSymbol CustomImageProperties;
        private readonly TypeSymbol CustomImagePropertiesFromVm;
        private readonly TypeSymbol WindowsOsInfo;
        private readonly TypeSymbol LinuxOsInfo;
        private readonly TypeSymbol CustomImagePropertiesCustom;
        private readonly TypeSymbol FormulaProperties;
        private readonly TypeSymbol LabVirtualMachine;
        private readonly TypeSymbol LabVirtualMachineProperties;
        private readonly TypeSymbol ArtifactInstallProperties;
        private readonly TypeSymbol ArtifactParameterProperties;
        private readonly TypeSymbol ArtifactDeploymentStatusProperties;
        private readonly TypeSymbol GalleryImageReference;
        private readonly TypeSymbol FormulaPropertiesFromVm;
        private readonly TypeSymbol PolicyProperties;
        private readonly TypeSymbol ScheduleProperties;
        private readonly TypeSymbol WeekDetails;
        private readonly TypeSymbol DayDetails;
        private readonly TypeSymbol HourDetails;
        private readonly TypeSymbol VirtualNetworkProperties;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol SubnetOverride;
    }
}
