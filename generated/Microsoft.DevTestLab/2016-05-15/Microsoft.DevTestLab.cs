// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_DevTestLab_2016_05_15
    {
        private const string ProviderNamespace = "Microsoft.DevTestLab";
        private const string ApiVersion = "2016-05-15";
        private static readonly ResourceTypeReference ResourceTypeReference_labs = new ResourceTypeReference(ProviderNamespace, new[]{"labs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_schedules = new ResourceTypeReference(ProviderNamespace, new[]{"schedules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_artifactsources = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "artifactsources"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_costs = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "costs"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_customimages = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "customimages"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_formulas = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "formulas"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_notificationchannels = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "notificationchannels"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_schedules = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "schedules"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_servicerunners = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "servicerunners"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_users = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "users"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_virtualmachines = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "virtualmachines"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_virtualnetworks = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "virtualnetworks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_policysets_policies = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "policysets", "policies"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_users_disks = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "users", "disks"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_users_environments = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "users", "environments"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_users_secrets = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "users", "secrets"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_labs_virtualmachines_schedules = new ResourceTypeReference(ProviderNamespace, new[]{"labs", "virtualmachines", "schedules"}, ApiVersion);
        private static Lazy<Microsoft_DevTestLab_2016_05_15> InstanceLazy = new Lazy<Microsoft_DevTestLab_2016_05_15>(() => new Microsoft_DevTestLab_2016_05_15());
        private Microsoft_DevTestLab_2016_05_15()
        {
            LabProperties = new NamedObjectType("LabProperties", new ITypeProperty[]{new TypeProperty("defaultStorageAccount", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("defaultPremiumStorageAccount", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("artifactsStorageAccount", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("premiumDataDiskStorageAccount", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("vaultName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("labStorageType", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("premiumDataDisks", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ScheduleProperties = new NamedObjectType("ScheduleProperties", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("taskType", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("weeklyRecurrence", () => WeekDetails, TypePropertyFlags.None), new LazyTypeProperty("dailyRecurrence", () => DayDetails, TypePropertyFlags.None), new LazyTypeProperty("hourlyRecurrence", () => HourDetails, TypePropertyFlags.None), new TypeProperty("timeZoneId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("notificationSettings", () => NotificationSettings, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("targetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            WeekDetails = new NamedObjectType("WeekDetails", new ITypeProperty[]{new TypeProperty("weekdays", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("time", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DayDetails = new NamedObjectType("DayDetails", new ITypeProperty[]{new TypeProperty("time", LanguageConstants.String, TypePropertyFlags.None)}, null);
            HourDetails = new NamedObjectType("HourDetails", new ITypeProperty[]{new TypeProperty("minute", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            NotificationSettings = new NamedObjectType("NotificationSettings", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("timeInMinutes", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("webhookUrl", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactSourceProperties = new NamedObjectType("ArtifactSourceProperties", new ITypeProperty[]{new TypeProperty("displayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sourceType", UnionType.Create(new StringLiteralType("'VsoGit'"), new StringLiteralType("'GitHub'")), TypePropertyFlags.None), new TypeProperty("folderPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("armTemplateFolderPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("branchRef", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("securityToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LabCostProperties = new NamedObjectType("LabCostProperties", new ITypeProperty[]{new LazyTypeProperty("targetCost", () => TargetCostProperties, TypePropertyFlags.None), new LazyTypeProperty("labCostSummary", () => LabCostSummaryProperties, TypePropertyFlags.ReadOnly), new LazyTypeProperty("labCostDetails", () => new TypedArrayType(LabCostDetailsProperties), TypePropertyFlags.ReadOnly), new LazyTypeProperty("resourceCosts", () => new TypedArrayType(LabResourceCostProperties), TypePropertyFlags.ReadOnly), new TypeProperty("currencyCode", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startDateTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("endDateTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            TargetCostProperties = new NamedObjectType("TargetCostProperties", new ITypeProperty[]{new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("target", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("costThresholds", () => new TypedArrayType(CostThresholdProperties), TypePropertyFlags.None), new TypeProperty("cycleStartDateTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("cycleEndDateTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("cycleType", UnionType.Create(new StringLiteralType("'CalendarMonth'"), new StringLiteralType("'Custom'")), TypePropertyFlags.None)}, null);
            CostThresholdProperties = new NamedObjectType("CostThresholdProperties", new ITypeProperty[]{new TypeProperty("thresholdId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("percentageThreshold", () => PercentageCostThresholdProperties, TypePropertyFlags.None), new TypeProperty("displayOnChart", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("sendNotificationWhenExceeded", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("notificationSent", LanguageConstants.String, TypePropertyFlags.None)}, null);
            PercentageCostThresholdProperties = new NamedObjectType("PercentageCostThresholdProperties", new ITypeProperty[]{new TypeProperty("thresholdValue", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            LabCostSummaryProperties = new NamedObjectType("LabCostSummaryProperties", new ITypeProperty[]{new TypeProperty("estimatedLabCost", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            LabCostDetailsProperties = new NamedObjectType("LabCostDetailsProperties", new ITypeProperty[]{new TypeProperty("date", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("cost", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("costType", UnionType.Create(new StringLiteralType("'Unavailable'"), new StringLiteralType("'Reported'"), new StringLiteralType("'Projected'")), TypePropertyFlags.None)}, null);
            LabResourceCostProperties = new NamedObjectType("LabResourceCostProperties", new ITypeProperty[]{new TypeProperty("resourcename", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceUId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceCost", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("resourceType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceOwner", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourcePricingTier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("externalResourceId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CustomImageProperties = new NamedObjectType("CustomImageProperties", new ITypeProperty[]{new LazyTypeProperty("vm", () => CustomImagePropertiesFromVm, TypePropertyFlags.None), new LazyTypeProperty("vhd", () => CustomImagePropertiesCustom, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("managedImageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            CustomImagePropertiesFromVm = new NamedObjectType("CustomImagePropertiesFromVm", new ITypeProperty[]{new TypeProperty("sourceVmId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("windowsOsInfo", () => WindowsOsInfo, TypePropertyFlags.None), new LazyTypeProperty("linuxOsInfo", () => LinuxOsInfo, TypePropertyFlags.None)}, null);
            WindowsOsInfo = new NamedObjectType("WindowsOsInfo", new ITypeProperty[]{new TypeProperty("windowsOsState", UnionType.Create(new StringLiteralType("'NonSysprepped'"), new StringLiteralType("'SysprepRequested'"), new StringLiteralType("'SysprepApplied'")), TypePropertyFlags.None)}, null);
            LinuxOsInfo = new NamedObjectType("LinuxOsInfo", new ITypeProperty[]{new TypeProperty("linuxOsState", UnionType.Create(new StringLiteralType("'NonDeprovisioned'"), new StringLiteralType("'DeprovisionRequested'"), new StringLiteralType("'DeprovisionApplied'")), TypePropertyFlags.None)}, null);
            CustomImagePropertiesCustom = new NamedObjectType("CustomImagePropertiesCustom", new ITypeProperty[]{new TypeProperty("imageName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sysPrep", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("osType", UnionType.Create(new StringLiteralType("'Windows'"), new StringLiteralType("'Linux'"), new StringLiteralType("'None'")), TypePropertyFlags.Required)}, null);
            FormulaProperties = new NamedObjectType("FormulaProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("author", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("formulaContent", () => LabVirtualMachineCreationParameter, TypePropertyFlags.None), new LazyTypeProperty("vm", () => FormulaPropertiesFromVm, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LabVirtualMachineCreationParameter = new NamedObjectType("LabVirtualMachineCreationParameter", new ITypeProperty[]{new LazyTypeProperty("properties", () => LabVirtualMachineCreationParameterProperties, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            LabVirtualMachineCreationParameterProperties = new NamedObjectType("LabVirtualMachineCreationParameterProperties", new ITypeProperty[]{new LazyTypeProperty("bulkCreationParameters", () => BulkCreationParameters, TypePropertyFlags.None), new TypeProperty("notes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ownerObjectId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ownerUserPrincipalName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUserId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUser", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customImageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sshKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isAuthenticationWithSshKey", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labVirtualNetworkId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("disallowPublicIpAddress", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("artifacts", () => new TypedArrayType(ArtifactInstallProperties), TypePropertyFlags.None), new LazyTypeProperty("artifactDeploymentStatus", () => ArtifactDeploymentStatusProperties, TypePropertyFlags.None), new LazyTypeProperty("galleryImageReference", () => GalleryImageReference, TypePropertyFlags.None), new LazyTypeProperty("computeVm", () => ComputeVmProperties, TypePropertyFlags.None), new LazyTypeProperty("networkInterface", () => NetworkInterfaceProperties, TypePropertyFlags.None), new LazyTypeProperty("applicableSchedule", () => ApplicableSchedule, TypePropertyFlags.None), new TypeProperty("expirationDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowClaim", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualMachineCreationSource", UnionType.Create(new StringLiteralType("'FromCustomImage'"), new StringLiteralType("'FromGalleryImage'")), TypePropertyFlags.None), new TypeProperty("environmentId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            BulkCreationParameters = new NamedObjectType("BulkCreationParameters", new ITypeProperty[]{new TypeProperty("instanceCount", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ArtifactInstallProperties = new NamedObjectType("ArtifactInstallProperties", new ITypeProperty[]{new TypeProperty("artifactId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("parameters", () => new TypedArrayType(ArtifactParameterProperties), TypePropertyFlags.None), new TypeProperty("status", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("deploymentStatusMessage", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmExtensionStatusMessage", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("installTime", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactParameterProperties = new NamedObjectType("ArtifactParameterProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ArtifactDeploymentStatusProperties = new NamedObjectType("ArtifactDeploymentStatusProperties", new ITypeProperty[]{new TypeProperty("deploymentStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("artifactsApplied", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("totalArtifacts", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            GalleryImageReference = new NamedObjectType("GalleryImageReference", new ITypeProperty[]{new TypeProperty("offer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publisher", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sku", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("version", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ComputeVmProperties = new NamedObjectType("ComputeVmProperties", new ITypeProperty[]{new LazyTypeProperty("statuses", () => new TypedArrayType(ComputeVmInstanceViewStatus), TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vmSize", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("networkInterfaceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osDiskId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dataDiskIds", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new LazyTypeProperty("dataDisks", () => new TypedArrayType(ComputeDataDisk), TypePropertyFlags.None)}, null);
            ComputeVmInstanceViewStatus = new NamedObjectType("ComputeVmInstanceViewStatus", new ITypeProperty[]{new TypeProperty("code", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("displayStatus", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("message", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ComputeDataDisk = new NamedObjectType("ComputeDataDisk", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedDiskId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskSizeGiB", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            NetworkInterfaceProperties = new NamedObjectType("NetworkInterfaceProperties", new ITypeProperty[]{new TypeProperty("virtualNetworkId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("subnetId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicIpAddressId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("publicIpAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateIpAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("dnsName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("rdpAuthority", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sshAuthority", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sharedPublicIpAddressConfiguration", () => SharedPublicIpAddressConfiguration, TypePropertyFlags.None)}, null);
            SharedPublicIpAddressConfiguration = new NamedObjectType("SharedPublicIpAddressConfiguration", new ITypeProperty[]{new LazyTypeProperty("inboundNatRules", () => new TypedArrayType(InboundNatRule), TypePropertyFlags.None)}, null);
            InboundNatRule = new NamedObjectType("InboundNatRule", new ITypeProperty[]{new TypeProperty("transportProtocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'")), TypePropertyFlags.None), new TypeProperty("frontendPort", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ApplicableSchedule = new NamedObjectType("ApplicableSchedule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ApplicableScheduleProperties, TypePropertyFlags.Required)}, null);
            ApplicableScheduleProperties = new NamedObjectType("ApplicableScheduleProperties", new ITypeProperty[]{new LazyTypeProperty("labVmsShutdown", () => Schedule, TypePropertyFlags.None), new LazyTypeProperty("labVmsStartup", () => Schedule, TypePropertyFlags.None)}, null);
            Schedule = new NamedObjectType("Schedule", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ScheduleProperties, TypePropertyFlags.Required)}, null);
            FormulaPropertiesFromVm = new NamedObjectType("FormulaPropertiesFromVm", new ITypeProperty[]{new TypeProperty("labVmId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            NotificationChannelProperties = new NamedObjectType("NotificationChannelProperties", new ITypeProperty[]{new TypeProperty("webHookUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("events", () => new TypedArrayType(Event), TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Event = new NamedObjectType("Event", new ITypeProperty[]{new TypeProperty("eventName", UnionType.Create(new StringLiteralType("'AutoShutdown'"), new StringLiteralType("'Cost'")), TypePropertyFlags.None)}, null);
            PolicyProperties = new NamedObjectType("PolicyProperties", new ITypeProperty[]{new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Enabled'"), new StringLiteralType("'Disabled'")), TypePropertyFlags.None), new TypeProperty("factName", UnionType.Create(new StringLiteralType("'UserOwnedLabVmCount'"), new StringLiteralType("'UserOwnedLabPremiumVmCount'"), new StringLiteralType("'LabVmCount'"), new StringLiteralType("'LabPremiumVmCount'"), new StringLiteralType("'LabVmSize'"), new StringLiteralType("'GalleryImage'"), new StringLiteralType("'UserOwnedLabVmCountInSubnet'"), new StringLiteralType("'LabTargetCost'")), TypePropertyFlags.None), new TypeProperty("factData", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("threshold", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("evaluatorType", UnionType.Create(new StringLiteralType("'AllowedValuesPolicy'"), new StringLiteralType("'MaxValuePolicy'")), TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            IdentityProperties = new NamedObjectType("IdentityProperties", new ITypeProperty[]{new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientSecretUrl", LanguageConstants.String, TypePropertyFlags.None)}, null);
            UserProperties = new NamedObjectType("UserProperties", new ITypeProperty[]{new LazyTypeProperty("identity", () => UserIdentity, TypePropertyFlags.None), new LazyTypeProperty("secretStore", () => UserSecretStore, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            UserIdentity = new NamedObjectType("UserIdentity", new ITypeProperty[]{new TypeProperty("principalName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("objectId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("appId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            UserSecretStore = new NamedObjectType("UserSecretStore", new ITypeProperty[]{new TypeProperty("keyVaultUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("keyVaultId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DiskProperties = new NamedObjectType("DiskProperties", new ITypeProperty[]{new TypeProperty("diskType", UnionType.Create(new StringLiteralType("'Standard'"), new StringLiteralType("'Premium'")), TypePropertyFlags.None), new TypeProperty("diskSizeGiB", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("leasedByLabVmId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskBlobName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("diskUri", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("hostCaching", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("managedDiskId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EnvironmentProperties = new NamedObjectType("EnvironmentProperties", new ITypeProperty[]{new LazyTypeProperty("deploymentProperties", () => EnvironmentDeploymentProperties, TypePropertyFlags.None), new TypeProperty("armTemplateDisplayName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("resourceGroupId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("createdByUser", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EnvironmentDeploymentProperties = new NamedObjectType("EnvironmentDeploymentProperties", new ITypeProperty[]{new TypeProperty("armTemplateId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("parameters", () => new TypedArrayType(ArmTemplateParameterProperties), TypePropertyFlags.None)}, null);
            ArmTemplateParameterProperties = new NamedObjectType("ArmTemplateParameterProperties", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecretProperties = new NamedObjectType("SecretProperties", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            LabVirtualMachineProperties = new NamedObjectType("LabVirtualMachineProperties", new ITypeProperty[]{new TypeProperty("notes", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ownerObjectId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("ownerUserPrincipalName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUserId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdByUser", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("computeId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("customImageId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("osType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("size", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("userName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("sshKey", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("isAuthenticationWithSshKey", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("fqdn", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labVirtualNetworkId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("disallowPublicIpAddress", LanguageConstants.Bool, TypePropertyFlags.None), new LazyTypeProperty("artifacts", () => new TypedArrayType(ArtifactInstallProperties), TypePropertyFlags.None), new LazyTypeProperty("artifactDeploymentStatus", () => ArtifactDeploymentStatusProperties, TypePropertyFlags.None), new LazyTypeProperty("galleryImageReference", () => GalleryImageReference, TypePropertyFlags.None), new LazyTypeProperty("computeVm", () => ComputeVmProperties, TypePropertyFlags.None), new LazyTypeProperty("networkInterface", () => NetworkInterfaceProperties, TypePropertyFlags.None), new LazyTypeProperty("applicableSchedule", () => ApplicableSchedule, TypePropertyFlags.None), new TypeProperty("expirationDate", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowClaim", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("storageType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualMachineCreationSource", UnionType.Create(new StringLiteralType("'FromCustomImage'"), new StringLiteralType("'FromGalleryImage'")), TypePropertyFlags.None), new TypeProperty("environmentId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetworkProperties = new NamedObjectType("VirtualNetworkProperties", new ITypeProperty[]{new LazyTypeProperty("allowedSubnets", () => new TypedArrayType(Subnet), TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("externalProviderResourceId", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("externalSubnets", () => new TypedArrayType(ExternalSubnet), TypePropertyFlags.None), new LazyTypeProperty("subnetOverrides", () => new TypedArrayType(SubnetOverride), TypePropertyFlags.None), new TypeProperty("createdDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("uniqueIdentifier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Subnet = new NamedObjectType("Subnet", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("allowPublicIp", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None)}, null);
            ExternalSubnet = new NamedObjectType("ExternalSubnet", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SubnetOverride = new NamedObjectType("SubnetOverride", new ITypeProperty[]{new TypeProperty("resourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("labSubnetName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("useInVmCreationPermission", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None), new TypeProperty("usePublicIpAddressPermission", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Deny'"), new StringLiteralType("'Allow'")), TypePropertyFlags.None), new LazyTypeProperty("sharedPublicIpAddressConfiguration", () => SubnetSharedPublicIpAddressConfiguration, TypePropertyFlags.None), new TypeProperty("virtualNetworkPoolName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SubnetSharedPublicIpAddressConfiguration = new NamedObjectType("SubnetSharedPublicIpAddressConfiguration", new ITypeProperty[]{new LazyTypeProperty("allowedPorts", () => new TypedArrayType(Port), TypePropertyFlags.None)}, null);
            Port = new NamedObjectType("Port", new ITypeProperty[]{new TypeProperty("transportProtocol", UnionType.Create(new StringLiteralType("'Tcp'"), new StringLiteralType("'Udp'")), TypePropertyFlags.None), new TypeProperty("backendPort", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            ResourceType_labs = new ResourceType("Microsoft.DevTestLab/labs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LabProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs);
            ResourceType_schedules = new ResourceType("Microsoft.DevTestLab/schedules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/schedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ScheduleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_schedules);
            ResourceType_labs_artifactsources = new ResourceType("Microsoft.DevTestLab/labs/artifactsources", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/artifactsources'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ArtifactSourceProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_artifactsources);
            ResourceType_labs_costs = new ResourceType("Microsoft.DevTestLab/labs/costs", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/costs'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LabCostProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_costs);
            ResourceType_labs_customimages = new ResourceType("Microsoft.DevTestLab/labs/customimages", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/customimages'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => CustomImageProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_customimages);
            ResourceType_labs_formulas = new ResourceType("Microsoft.DevTestLab/labs/formulas", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/formulas'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => FormulaProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_formulas);
            ResourceType_labs_notificationchannels = new ResourceType("Microsoft.DevTestLab/labs/notificationchannels", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/notificationchannels'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => NotificationChannelProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_notificationchannels);
            ResourceType_labs_schedules = new ResourceType("Microsoft.DevTestLab/labs/schedules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/schedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ScheduleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_schedules);
            ResourceType_labs_servicerunners = new ResourceType("Microsoft.DevTestLab/labs/servicerunners", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/servicerunners'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => IdentityProperties, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_servicerunners);
            ResourceType_labs_users = new ResourceType("Microsoft.DevTestLab/labs/users", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/users'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => UserProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_users);
            ResourceType_labs_virtualmachines = new ResourceType("Microsoft.DevTestLab/labs/virtualmachines", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/virtualmachines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => LabVirtualMachineProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_virtualmachines);
            ResourceType_labs_virtualnetworks = new ResourceType("Microsoft.DevTestLab/labs/virtualnetworks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/virtualnetworks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => VirtualNetworkProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_virtualnetworks);
            ResourceType_labs_policysets_policies = new ResourceType("Microsoft.DevTestLab/labs/policysets/policies", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/policysets/policies'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => PolicyProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_policysets_policies);
            ResourceType_labs_users_disks = new ResourceType("Microsoft.DevTestLab/labs/users/disks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/users/disks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => DiskProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_users_disks);
            ResourceType_labs_users_environments = new ResourceType("Microsoft.DevTestLab/labs/users/environments", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/users/environments'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => EnvironmentProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_users_environments);
            ResourceType_labs_users_secrets = new ResourceType("Microsoft.DevTestLab/labs/users/secrets", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/users/secrets'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => SecretProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_users_secrets);
            ResourceType_labs_virtualmachines_schedules = new ResourceType("Microsoft.DevTestLab/labs/virtualmachines/schedules", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.DevTestLab/labs/virtualmachines/schedules'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => ScheduleProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2016-05-15'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_labs_virtualmachines_schedules);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_labs, () => InstanceLazy.Value.ResourceType_labs);
            registrar.RegisterType(ResourceTypeReference_schedules, () => InstanceLazy.Value.ResourceType_schedules);
            registrar.RegisterType(ResourceTypeReference_labs_artifactsources, () => InstanceLazy.Value.ResourceType_labs_artifactsources);
            registrar.RegisterType(ResourceTypeReference_labs_costs, () => InstanceLazy.Value.ResourceType_labs_costs);
            registrar.RegisterType(ResourceTypeReference_labs_customimages, () => InstanceLazy.Value.ResourceType_labs_customimages);
            registrar.RegisterType(ResourceTypeReference_labs_formulas, () => InstanceLazy.Value.ResourceType_labs_formulas);
            registrar.RegisterType(ResourceTypeReference_labs_notificationchannels, () => InstanceLazy.Value.ResourceType_labs_notificationchannels);
            registrar.RegisterType(ResourceTypeReference_labs_schedules, () => InstanceLazy.Value.ResourceType_labs_schedules);
            registrar.RegisterType(ResourceTypeReference_labs_servicerunners, () => InstanceLazy.Value.ResourceType_labs_servicerunners);
            registrar.RegisterType(ResourceTypeReference_labs_users, () => InstanceLazy.Value.ResourceType_labs_users);
            registrar.RegisterType(ResourceTypeReference_labs_virtualmachines, () => InstanceLazy.Value.ResourceType_labs_virtualmachines);
            registrar.RegisterType(ResourceTypeReference_labs_virtualnetworks, () => InstanceLazy.Value.ResourceType_labs_virtualnetworks);
            registrar.RegisterType(ResourceTypeReference_labs_policysets_policies, () => InstanceLazy.Value.ResourceType_labs_policysets_policies);
            registrar.RegisterType(ResourceTypeReference_labs_users_disks, () => InstanceLazy.Value.ResourceType_labs_users_disks);
            registrar.RegisterType(ResourceTypeReference_labs_users_environments, () => InstanceLazy.Value.ResourceType_labs_users_environments);
            registrar.RegisterType(ResourceTypeReference_labs_users_secrets, () => InstanceLazy.Value.ResourceType_labs_users_secrets);
            registrar.RegisterType(ResourceTypeReference_labs_virtualmachines_schedules, () => InstanceLazy.Value.ResourceType_labs_virtualmachines_schedules);
        }
        private readonly ResourceType ResourceType_labs;
        private readonly ResourceType ResourceType_schedules;
        private readonly ResourceType ResourceType_labs_artifactsources;
        private readonly ResourceType ResourceType_labs_costs;
        private readonly ResourceType ResourceType_labs_customimages;
        private readonly ResourceType ResourceType_labs_formulas;
        private readonly ResourceType ResourceType_labs_notificationchannels;
        private readonly ResourceType ResourceType_labs_schedules;
        private readonly ResourceType ResourceType_labs_servicerunners;
        private readonly ResourceType ResourceType_labs_users;
        private readonly ResourceType ResourceType_labs_virtualmachines;
        private readonly ResourceType ResourceType_labs_virtualnetworks;
        private readonly ResourceType ResourceType_labs_policysets_policies;
        private readonly ResourceType ResourceType_labs_users_disks;
        private readonly ResourceType ResourceType_labs_users_environments;
        private readonly ResourceType ResourceType_labs_users_secrets;
        private readonly ResourceType ResourceType_labs_virtualmachines_schedules;
        private readonly TypeSymbol LabProperties;
        private readonly TypeSymbol ScheduleProperties;
        private readonly TypeSymbol WeekDetails;
        private readonly TypeSymbol DayDetails;
        private readonly TypeSymbol HourDetails;
        private readonly TypeSymbol NotificationSettings;
        private readonly TypeSymbol ArtifactSourceProperties;
        private readonly TypeSymbol LabCostProperties;
        private readonly TypeSymbol TargetCostProperties;
        private readonly TypeSymbol CostThresholdProperties;
        private readonly TypeSymbol PercentageCostThresholdProperties;
        private readonly TypeSymbol LabCostSummaryProperties;
        private readonly TypeSymbol LabCostDetailsProperties;
        private readonly TypeSymbol LabResourceCostProperties;
        private readonly TypeSymbol CustomImageProperties;
        private readonly TypeSymbol CustomImagePropertiesFromVm;
        private readonly TypeSymbol WindowsOsInfo;
        private readonly TypeSymbol LinuxOsInfo;
        private readonly TypeSymbol CustomImagePropertiesCustom;
        private readonly TypeSymbol FormulaProperties;
        private readonly TypeSymbol LabVirtualMachineCreationParameter;
        private readonly TypeSymbol LabVirtualMachineCreationParameterProperties;
        private readonly TypeSymbol BulkCreationParameters;
        private readonly TypeSymbol ArtifactInstallProperties;
        private readonly TypeSymbol ArtifactParameterProperties;
        private readonly TypeSymbol ArtifactDeploymentStatusProperties;
        private readonly TypeSymbol GalleryImageReference;
        private readonly TypeSymbol ComputeVmProperties;
        private readonly TypeSymbol ComputeVmInstanceViewStatus;
        private readonly TypeSymbol ComputeDataDisk;
        private readonly TypeSymbol NetworkInterfaceProperties;
        private readonly TypeSymbol SharedPublicIpAddressConfiguration;
        private readonly TypeSymbol InboundNatRule;
        private readonly TypeSymbol ApplicableSchedule;
        private readonly TypeSymbol ApplicableScheduleProperties;
        private readonly TypeSymbol Schedule;
        private readonly TypeSymbol FormulaPropertiesFromVm;
        private readonly TypeSymbol NotificationChannelProperties;
        private readonly TypeSymbol Event;
        private readonly TypeSymbol PolicyProperties;
        private readonly TypeSymbol IdentityProperties;
        private readonly TypeSymbol UserProperties;
        private readonly TypeSymbol UserIdentity;
        private readonly TypeSymbol UserSecretStore;
        private readonly TypeSymbol DiskProperties;
        private readonly TypeSymbol EnvironmentProperties;
        private readonly TypeSymbol EnvironmentDeploymentProperties;
        private readonly TypeSymbol ArmTemplateParameterProperties;
        private readonly TypeSymbol SecretProperties;
        private readonly TypeSymbol LabVirtualMachineProperties;
        private readonly TypeSymbol VirtualNetworkProperties;
        private readonly TypeSymbol Subnet;
        private readonly TypeSymbol ExternalSubnet;
        private readonly TypeSymbol SubnetOverride;
        private readonly TypeSymbol SubnetSharedPublicIpAddressConfiguration;
        private readonly TypeSymbol Port;
    }
}
