// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_ContainerRegistry_2019_06_01_preview
    {
        private const string ProviderNamespace = "Microsoft.ContainerRegistry";
        private const string ApiVersion = "2019-06-01-preview";
        private static readonly ResourceTypeReference ResourceTypeReference_registries_agentPools = new ResourceTypeReference(ProviderNamespace, new[]{"registries", "agentPools"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_registries_taskRuns = new ResourceTypeReference(ProviderNamespace, new[]{"registries", "taskRuns"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_registries_tasks = new ResourceTypeReference(ProviderNamespace, new[]{"registries", "tasks"}, ApiVersion);
        private static Lazy<Microsoft_ContainerRegistry_2019_06_01_preview> InstanceLazy = new Lazy<Microsoft_ContainerRegistry_2019_06_01_preview>(() => new Microsoft_ContainerRegistry_2019_06_01_preview());
        private Microsoft_ContainerRegistry_2019_06_01_preview()
        {
            AgentPoolProperties = new NamedObjectType("AgentPoolProperties", new ITypeProperty[]{new TypeProperty("count", LanguageConstants.Int, TypePropertyFlags.None), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("os", UnionType.Create(new StringLiteralType("'Windows'"), new StringLiteralType("'Linux'")), TypePropertyFlags.None), new TypeProperty("virtualNetworkSubnetResourceId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'")), TypePropertyFlags.ReadOnly)}, null);
            IdentityProperties = new NamedObjectType("IdentityProperties", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tenantId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'SystemAssigned'"), new StringLiteralType("'UserAssigned'"), new StringLiteralType("'SystemAssigned, UserAssigned'"), new StringLiteralType("'None'")), TypePropertyFlags.None), new TypeProperty("userAssignedIdentities", new NamedObjectType("userAssignedIdentities", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => UserIdentityProperties, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            UserIdentityProperties = new NamedObjectType("UserIdentityProperties", new ITypeProperty[]{new TypeProperty("principalId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("clientId", LanguageConstants.String, TypePropertyFlags.None)}, null);
            TaskRunProperties = new NamedObjectType("TaskRunProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("runRequest", () => RunRequest, TypePropertyFlags.None), new LazyTypeProperty("runResult", () => Run, TypePropertyFlags.ReadOnly), new TypeProperty("forceUpdateTag", LanguageConstants.String, TypePropertyFlags.None)}, null);
            RunRequest = new DiscriminatedObjectType("RunRequest", "type", new ITypeProperty[]{new LazyTypeProperty("RunRequest", () => DockerBuildRequest, TypePropertyFlags.None), new LazyTypeProperty("RunRequest", () => FileTaskRunRequest, TypePropertyFlags.None), new LazyTypeProperty("RunRequest", () => TaskRunRequest, TypePropertyFlags.None), new LazyTypeProperty("RunRequest", () => EncodedTaskRunRequest, TypePropertyFlags.None)});
            DockerBuildRequest = new NamedObjectType("DockerBuildRequest", new ITypeProperty[]{new TypeProperty("imageNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("isPushEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("noCache", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dockerFilePath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("arguments", () => new TypedArrayType(Argument), TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("platform", () => PlatformProperties, TypePropertyFlags.Required), new LazyTypeProperty("agentConfiguration", () => AgentProperties, TypePropertyFlags.None), new TypeProperty("sourceLocation", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("credentials", () => Credentials, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'DockerBuildRequest'"), TypePropertyFlags.Required), new TypeProperty("isArchiveEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Argument = new NamedObjectType("Argument", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("isSecret", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            PlatformProperties = new NamedObjectType("PlatformProperties", new ITypeProperty[]{new TypeProperty("os", UnionType.Create(new StringLiteralType("'Windows'"), new StringLiteralType("'Linux'")), TypePropertyFlags.Required), new TypeProperty("architecture", UnionType.Create(new StringLiteralType("'amd64'"), new StringLiteralType("'x86'"), new StringLiteralType("'386'"), new StringLiteralType("'arm'"), new StringLiteralType("'arm64'")), TypePropertyFlags.None), new TypeProperty("variant", UnionType.Create(new StringLiteralType("'v6'"), new StringLiteralType("'v7'"), new StringLiteralType("'v8'")), TypePropertyFlags.None)}, null);
            AgentProperties = new NamedObjectType("AgentProperties", new ITypeProperty[]{new TypeProperty("cpu", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            Credentials = new NamedObjectType("Credentials", new ITypeProperty[]{new LazyTypeProperty("sourceRegistry", () => SourceRegistryCredentials, TypePropertyFlags.None), new TypeProperty("customRegistries", new NamedObjectType("customRegistries", new ITypeProperty[]{}, new LazyTypeProperty("additionalProperties", () => CustomRegistryCredentials, TypePropertyFlags.None)), TypePropertyFlags.None)}, null);
            SourceRegistryCredentials = new NamedObjectType("SourceRegistryCredentials", new ITypeProperty[]{new TypeProperty("loginMode", UnionType.Create(new StringLiteralType("'None'"), new StringLiteralType("'Default'")), TypePropertyFlags.None)}, null);
            CustomRegistryCredentials = new NamedObjectType("CustomRegistryCredentials", new ITypeProperty[]{new LazyTypeProperty("userName", () => SecretObject, TypePropertyFlags.None), new LazyTypeProperty("password", () => SecretObject, TypePropertyFlags.None), new TypeProperty("identity", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SecretObject = new NamedObjectType("SecretObject", new ITypeProperty[]{new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("type", UnionType.Create(new StringLiteralType("'Opaque'"), new StringLiteralType("'Vaultsecret'")), TypePropertyFlags.None)}, null);
            FileTaskRunRequest = new NamedObjectType("FileTaskRunRequest", new ITypeProperty[]{new TypeProperty("taskFilePath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("valuesFilePath", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("values", () => new TypedArrayType(SetValue), TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("platform", () => PlatformProperties, TypePropertyFlags.Required), new LazyTypeProperty("agentConfiguration", () => AgentProperties, TypePropertyFlags.None), new TypeProperty("sourceLocation", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("credentials", () => Credentials, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'FileTaskRunRequest'"), TypePropertyFlags.Required), new TypeProperty("isArchiveEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            SetValue = new NamedObjectType("SetValue", new ITypeProperty[]{new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("value", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("isSecret", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            TaskRunRequest = new NamedObjectType("TaskRunRequest", new ITypeProperty[]{new TypeProperty("taskId", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("overrideTaskStepProperties", () => OverrideTaskStepProperties, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'TaskRunRequest'"), TypePropertyFlags.Required), new TypeProperty("isArchiveEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            OverrideTaskStepProperties = new NamedObjectType("OverrideTaskStepProperties", new ITypeProperty[]{new TypeProperty("contextPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("file", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("arguments", () => new TypedArrayType(Argument), TypePropertyFlags.None), new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("values", () => new TypedArrayType(SetValue), TypePropertyFlags.None), new TypeProperty("updateTriggerToken", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EncodedTaskRunRequest = new NamedObjectType("EncodedTaskRunRequest", new ITypeProperty[]{new TypeProperty("encodedTaskContent", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("encodedValuesContent", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("values", () => new TypedArrayType(SetValue), TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("platform", () => PlatformProperties, TypePropertyFlags.Required), new LazyTypeProperty("agentConfiguration", () => AgentProperties, TypePropertyFlags.None), new TypeProperty("sourceLocation", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("credentials", () => Credentials, TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'EncodedTaskRunRequest'"), TypePropertyFlags.Required), new TypeProperty("isArchiveEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None)}, null);
            Run = new NamedObjectType("Run", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => RunProperties, TypePropertyFlags.None)}, null);
            RunProperties = new NamedObjectType("RunProperties", new ITypeProperty[]{new TypeProperty("runId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Queued'"), new StringLiteralType("'Started'"), new StringLiteralType("'Running'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'"), new StringLiteralType("'Error'"), new StringLiteralType("'Timeout'")), TypePropertyFlags.None), new TypeProperty("lastUpdatedTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("runType", UnionType.Create(new StringLiteralType("'QuickBuild'"), new StringLiteralType("'QuickRun'"), new StringLiteralType("'AutoBuild'"), new StringLiteralType("'AutoRun'")), TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("createTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("startTime", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("finishTime", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("outputImages", () => new TypedArrayType(ImageDescriptor), TypePropertyFlags.None), new TypeProperty("task", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("imageUpdateTrigger", () => ImageUpdateTrigger, TypePropertyFlags.None), new LazyTypeProperty("sourceTrigger", () => SourceTriggerDescriptor, TypePropertyFlags.None), new LazyTypeProperty("timerTrigger", () => TimerTriggerDescriptor, TypePropertyFlags.None), new LazyTypeProperty("platform", () => PlatformProperties, TypePropertyFlags.None), new LazyTypeProperty("agentConfiguration", () => AgentProperties, TypePropertyFlags.None), new TypeProperty("sourceRegistryAuth", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("customRegistries", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("runErrorMessage", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("updateTriggerToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'")), TypePropertyFlags.None), new TypeProperty("isArchiveEnabled", LanguageConstants.Bool, TypePropertyFlags.None)}, null);
            ImageDescriptor = new NamedObjectType("ImageDescriptor", new ITypeProperty[]{new TypeProperty("registry", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("repository", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("digest", LanguageConstants.String, TypePropertyFlags.None)}, null);
            ImageUpdateTrigger = new NamedObjectType("ImageUpdateTrigger", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("timestamp", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("images", () => new TypedArrayType(ImageDescriptor), TypePropertyFlags.None)}, null);
            SourceTriggerDescriptor = new NamedObjectType("SourceTriggerDescriptor", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("eventType", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("commitId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("pullRequestId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("repositoryUrl", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("branchName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("providerType", LanguageConstants.String, TypePropertyFlags.None)}, null);
            TimerTriggerDescriptor = new NamedObjectType("TimerTriggerDescriptor", new ITypeProperty[]{new TypeProperty("timerTriggerName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scheduleOccurrence", LanguageConstants.String, TypePropertyFlags.None)}, null);
            TaskProperties = new NamedObjectType("TaskProperties", new ITypeProperty[]{new TypeProperty("provisioningState", UnionType.Create(new StringLiteralType("'Creating'"), new StringLiteralType("'Updating'"), new StringLiteralType("'Deleting'"), new StringLiteralType("'Succeeded'"), new StringLiteralType("'Failed'"), new StringLiteralType("'Canceled'")), TypePropertyFlags.ReadOnly), new TypeProperty("creationDate", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new LazyTypeProperty("platform", () => PlatformProperties, TypePropertyFlags.Required), new LazyTypeProperty("agentConfiguration", () => AgentProperties, TypePropertyFlags.None), new TypeProperty("agentPoolName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("timeout", LanguageConstants.Int, TypePropertyFlags.None), new LazyTypeProperty("step", () => TaskStepProperties, TypePropertyFlags.Required), new LazyTypeProperty("trigger", () => TriggerProperties, TypePropertyFlags.None), new LazyTypeProperty("credentials", () => Credentials, TypePropertyFlags.None)}, null);
            TaskStepProperties = new DiscriminatedObjectType("TaskStepProperties", "type", new ITypeProperty[]{new LazyTypeProperty("TaskStepProperties", () => DockerBuildStep, TypePropertyFlags.None), new LazyTypeProperty("TaskStepProperties", () => FileTaskStep, TypePropertyFlags.None), new LazyTypeProperty("TaskStepProperties", () => EncodedTaskStep, TypePropertyFlags.None)});
            BaseImageDependency = new NamedObjectType("BaseImageDependency", new ITypeProperty[]{new TypeProperty("type", UnionType.Create(new StringLiteralType("'BuildTime'"), new StringLiteralType("'RunTime'")), TypePropertyFlags.None), new TypeProperty("registry", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("repository", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("tag", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("digest", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DockerBuildStep = new NamedObjectType("DockerBuildStep", new ITypeProperty[]{new TypeProperty("imageNames", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("isPushEnabled", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("noCache", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("dockerFilePath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("target", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("arguments", () => new TypedArrayType(Argument), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Docker'"), TypePropertyFlags.Required), new LazyTypeProperty("baseImageDependencies", () => new TypedArrayType(BaseImageDependency), TypePropertyFlags.ReadOnly), new TypeProperty("contextPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contextAccessToken", LanguageConstants.String, TypePropertyFlags.None)}, null);
            FileTaskStep = new NamedObjectType("FileTaskStep", new ITypeProperty[]{new TypeProperty("taskFilePath", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("valuesFilePath", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("values", () => new TypedArrayType(SetValue), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'FileTask'"), TypePropertyFlags.Required), new LazyTypeProperty("baseImageDependencies", () => new TypedArrayType(BaseImageDependency), TypePropertyFlags.ReadOnly), new TypeProperty("contextPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contextAccessToken", LanguageConstants.String, TypePropertyFlags.None)}, null);
            EncodedTaskStep = new NamedObjectType("EncodedTaskStep", new ITypeProperty[]{new TypeProperty("encodedTaskContent", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("encodedValuesContent", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("values", () => new TypedArrayType(SetValue), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'EncodedTask'"), TypePropertyFlags.Required), new LazyTypeProperty("baseImageDependencies", () => new TypedArrayType(BaseImageDependency), TypePropertyFlags.ReadOnly), new TypeProperty("contextPath", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("contextAccessToken", LanguageConstants.String, TypePropertyFlags.None)}, null);
            TriggerProperties = new NamedObjectType("TriggerProperties", new ITypeProperty[]{new LazyTypeProperty("timerTriggers", () => new TypedArrayType(TimerTrigger), TypePropertyFlags.None), new LazyTypeProperty("sourceTriggers", () => new TypedArrayType(SourceTrigger), TypePropertyFlags.None), new LazyTypeProperty("baseImageTrigger", () => BaseImageTrigger, TypePropertyFlags.None)}, null);
            TimerTrigger = new NamedObjectType("TimerTrigger", new ITypeProperty[]{new TypeProperty("schedule", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            SourceTrigger = new NamedObjectType("SourceTrigger", new ITypeProperty[]{new LazyTypeProperty("sourceRepository", () => SourceProperties, TypePropertyFlags.Required), new TypeProperty("sourceTriggerEvents", new TypedArrayType(UnionType.Create(new StringLiteralType("'commit'"), new StringLiteralType("'pullrequest'"))), TypePropertyFlags.Required), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            SourceProperties = new NamedObjectType("SourceProperties", new ITypeProperty[]{new TypeProperty("sourceControlType", UnionType.Create(new StringLiteralType("'Github'"), new StringLiteralType("'VisualStudioTeamService'")), TypePropertyFlags.Required), new TypeProperty("repositoryUrl", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("branch", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("sourceControlAuthProperties", () => AuthInfo, TypePropertyFlags.None)}, null);
            AuthInfo = new NamedObjectType("AuthInfo", new ITypeProperty[]{new TypeProperty("tokenType", UnionType.Create(new StringLiteralType("'PAT'"), new StringLiteralType("'OAuth'")), TypePropertyFlags.Required), new TypeProperty("token", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("refreshToken", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("scope", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("expiresIn", LanguageConstants.Int, TypePropertyFlags.None)}, null);
            BaseImageTrigger = new NamedObjectType("BaseImageTrigger", new ITypeProperty[]{new TypeProperty("baseImageTriggerType", UnionType.Create(new StringLiteralType("'All'"), new StringLiteralType("'Runtime'")), TypePropertyFlags.Required), new TypeProperty("updateTriggerEndpoint", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("updateTriggerPayloadType", UnionType.Create(new StringLiteralType("'Default'"), new StringLiteralType("'Token'")), TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'Disabled'"), new StringLiteralType("'Enabled'")), TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            ResourceType_registries_agentPools = new ResourceType("Microsoft.ContainerRegistry/registries/agentPools", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ContainerRegistry/registries/agentPools'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("properties", () => AgentPoolProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_registries_agentPools);
            ResourceType_registries_taskRuns = new ResourceType("Microsoft.ContainerRegistry/registries/taskRuns", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ContainerRegistry/registries/taskRuns'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new LazyTypeProperty("identity", () => IdentityProperties, TypePropertyFlags.None), new LazyTypeProperty("properties", () => TaskRunProperties, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_registries_taskRuns);
            ResourceType_registries_tasks = new ResourceType("Microsoft.ContainerRegistry/registries/tasks", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new TypeProperty("type", new StringLiteralType("'Microsoft.ContainerRegistry/registries/tasks'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new LazyTypeProperty("identity", () => IdentityProperties, TypePropertyFlags.None), new LazyTypeProperty("properties", () => TaskProperties, TypePropertyFlags.Required), new TypeProperty("apiVersion", new StringLiteralType("'2019-06-01-preview'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_registries_tasks);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_registries_agentPools, () => InstanceLazy.Value.ResourceType_registries_agentPools);
            registrar.RegisterType(ResourceTypeReference_registries_taskRuns, () => InstanceLazy.Value.ResourceType_registries_taskRuns);
            registrar.RegisterType(ResourceTypeReference_registries_tasks, () => InstanceLazy.Value.ResourceType_registries_tasks);
        }
        private readonly ResourceType ResourceType_registries_agentPools;
        private readonly ResourceType ResourceType_registries_taskRuns;
        private readonly ResourceType ResourceType_registries_tasks;
        private readonly TypeSymbol AgentPoolProperties;
        private readonly TypeSymbol IdentityProperties;
        private readonly TypeSymbol UserIdentityProperties;
        private readonly TypeSymbol TaskRunProperties;
        private readonly TypeSymbol RunRequest;
        private readonly TypeSymbol DockerBuildRequest;
        private readonly TypeSymbol Argument;
        private readonly TypeSymbol PlatformProperties;
        private readonly TypeSymbol AgentProperties;
        private readonly TypeSymbol Credentials;
        private readonly TypeSymbol SourceRegistryCredentials;
        private readonly TypeSymbol CustomRegistryCredentials;
        private readonly TypeSymbol SecretObject;
        private readonly TypeSymbol FileTaskRunRequest;
        private readonly TypeSymbol SetValue;
        private readonly TypeSymbol TaskRunRequest;
        private readonly TypeSymbol OverrideTaskStepProperties;
        private readonly TypeSymbol EncodedTaskRunRequest;
        private readonly TypeSymbol Run;
        private readonly TypeSymbol RunProperties;
        private readonly TypeSymbol ImageDescriptor;
        private readonly TypeSymbol ImageUpdateTrigger;
        private readonly TypeSymbol SourceTriggerDescriptor;
        private readonly TypeSymbol TimerTriggerDescriptor;
        private readonly TypeSymbol TaskProperties;
        private readonly TypeSymbol TaskStepProperties;
        private readonly TypeSymbol BaseImageDependency;
        private readonly TypeSymbol DockerBuildStep;
        private readonly TypeSymbol FileTaskStep;
        private readonly TypeSymbol EncodedTaskStep;
        private readonly TypeSymbol TriggerProperties;
        private readonly TypeSymbol TimerTrigger;
        private readonly TypeSymbol SourceTrigger;
        private readonly TypeSymbol SourceProperties;
        private readonly TypeSymbol AuthInfo;
        private readonly TypeSymbol BaseImageTrigger;
    }
}
