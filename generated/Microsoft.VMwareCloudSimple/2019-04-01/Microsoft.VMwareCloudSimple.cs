// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
using System;
using Bicep.Core;
using Bicep.Core.Resources;
using Bicep.Core.TypeSystem;
namespace Bicep.Resources.Types
{
    [ResourceTypeRegisterableAttribute]
    public class Microsoft_VMwareCloudSimple_2019_04_01
    {
        private const string ProviderNamespace = "Microsoft.VMwareCloudSimple";
        private const string ApiVersion = "2019-04-01";
        private static readonly ResourceTypeReference ResourceTypeReference_dedicatedCloudNodes = new ResourceTypeReference(ProviderNamespace, new[]{"dedicatedCloudNodes"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_dedicatedCloudServices = new ResourceTypeReference(ProviderNamespace, new[]{"dedicatedCloudServices"}, ApiVersion);
        private static readonly ResourceTypeReference ResourceTypeReference_virtualMachines = new ResourceTypeReference(ProviderNamespace, new[]{"virtualMachines"}, ApiVersion);
        private static Lazy<Microsoft_VMwareCloudSimple_2019_04_01> InstanceLazy = new Lazy<Microsoft_VMwareCloudSimple_2019_04_01>(() => new Microsoft_VMwareCloudSimple_2019_04_01());
        private Microsoft_VMwareCloudSimple_2019_04_01()
        {
            DedicatedCloudNodeProperties = new NamedObjectType("DedicatedCloudNodeProperties", new ITypeProperty[]{new TypeProperty("availabilityZoneId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("availabilityZoneName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("cloudRackName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("created", LanguageConstants.Any, TypePropertyFlags.ReadOnly), new TypeProperty("nodesCount", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("placementGroupId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("placementGroupName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("privateCloudId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("privateCloudName", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("purchaseId", LanguageConstants.String, TypePropertyFlags.Required), new LazyTypeProperty("skuDescription", () => SkuDescription, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'unused'"), new StringLiteralType("'used'")), TypePropertyFlags.ReadOnly), new TypeProperty("vmwareClusterName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            SkuDescription = new NamedObjectType("SkuDescription", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required)}, null);
            Sku = new NamedObjectType("Sku", new ITypeProperty[]{new TypeProperty("capacity", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("description", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("family", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("tier", LanguageConstants.String, TypePropertyFlags.None)}, null);
            DedicatedCloudServiceProperties = new NamedObjectType("DedicatedCloudServiceProperties", new ITypeProperty[]{new TypeProperty("gatewaySubnet", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("isAccountOnboarded", UnionType.Create(new StringLiteralType("'notOnBoarded'"), new StringLiteralType("'onBoarded'"), new StringLiteralType("'onBoardingFailed'"), new StringLiteralType("'onBoarding'")), TypePropertyFlags.ReadOnly), new TypeProperty("nodes", LanguageConstants.Int, TypePropertyFlags.ReadOnly), new TypeProperty("serviceURL", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualMachineProperties = new NamedObjectType("VirtualMachineProperties", new ITypeProperty[]{new TypeProperty("amountOfRam", LanguageConstants.Int, TypePropertyFlags.Required), new LazyTypeProperty("controllers", () => new TypedArrayType(VirtualDiskController), TypePropertyFlags.ReadOnly), new LazyTypeProperty("customization", () => GuestOSCustomization, TypePropertyFlags.None), new LazyTypeProperty("disks", () => new TypedArrayType(VirtualDisk), TypePropertyFlags.None), new TypeProperty("dnsname", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("exposeToGuestVM", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("folder", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("guestOS", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("guestOSType", UnionType.Create(new StringLiteralType("'linux'"), new StringLiteralType("'windows'"), new StringLiteralType("'other'")), TypePropertyFlags.ReadOnly), new LazyTypeProperty("nics", () => new TypedArrayType(VirtualNic), TypePropertyFlags.None), new TypeProperty("numberOfCores", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("privateCloudId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("provisioningState", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("publicIP", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("resourcePool", () => ResourcePool, TypePropertyFlags.None), new TypeProperty("status", UnionType.Create(new StringLiteralType("'running'"), new StringLiteralType("'suspended'"), new StringLiteralType("'poweredoff'"), new StringLiteralType("'updating'"), new StringLiteralType("'deallocating'"), new StringLiteralType("'deleting'")), TypePropertyFlags.ReadOnly), new TypeProperty("templateId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("vSphereNetworks", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("vmId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("vmwaretools", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualDiskController = new NamedObjectType("VirtualDiskController", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("subType", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            GuestOSCustomization = new NamedObjectType("GuestOSCustomization", new ITypeProperty[]{new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("hostName", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("password", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("policyId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("username", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualDisk = new NamedObjectType("VirtualDisk", new ITypeProperty[]{new TypeProperty("controllerId", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("independenceMode", UnionType.Create(new StringLiteralType("'persistent'"), new StringLiteralType("'independent_persistent'"), new StringLiteralType("'independent_nonpersistent'")), TypePropertyFlags.Required), new TypeProperty("totalSize", LanguageConstants.Int, TypePropertyFlags.Required), new TypeProperty("virtualDiskId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualDiskName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNic = new NamedObjectType("VirtualNic", new ITypeProperty[]{new LazyTypeProperty("customization", () => GuestOSNICCustomization, TypePropertyFlags.None), new TypeProperty("ipAddresses", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("macAddress", LanguageConstants.String, TypePropertyFlags.None), new LazyTypeProperty("network", () => VirtualNetwork, TypePropertyFlags.Required), new TypeProperty("nicType", UnionType.Create(new StringLiteralType("'E1000'"), new StringLiteralType("'E1000E'"), new StringLiteralType("'PCNET32'"), new StringLiteralType("'VMXNET'"), new StringLiteralType("'VMXNET2'"), new StringLiteralType("'VMXNET3'")), TypePropertyFlags.Required), new TypeProperty("powerOnBoot", LanguageConstants.Bool, TypePropertyFlags.None), new TypeProperty("virtualNicId", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("virtualNicName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            GuestOSNICCustomization = new NamedObjectType("GuestOSNICCustomization", new ITypeProperty[]{new TypeProperty("allocation", UnionType.Create(new StringLiteralType("'static'"), new StringLiteralType("'dynamic'")), TypePropertyFlags.None), new TypeProperty("dnsServers", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("gateway", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.None), new TypeProperty("ipAddress", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("mask", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("primaryWinsServer", LanguageConstants.String, TypePropertyFlags.None), new TypeProperty("secondaryWinsServer", LanguageConstants.String, TypePropertyFlags.None)}, null);
            VirtualNetwork = new NamedObjectType("VirtualNetwork", new ITypeProperty[]{new TypeProperty("assignable", LanguageConstants.Bool, TypePropertyFlags.ReadOnly), new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => VirtualNetworkProperties, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            VirtualNetworkProperties = new NamedObjectType("VirtualNetworkProperties", new ITypeProperty[]{new TypeProperty("privateCloudId", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourcePool = new NamedObjectType("ResourcePool", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.ReadOnly), new TypeProperty("privateCloudId", LanguageConstants.String, TypePropertyFlags.ReadOnly), new LazyTypeProperty("properties", () => ResourcePoolProperties, TypePropertyFlags.None), new TypeProperty("type", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourcePoolProperties = new NamedObjectType("ResourcePoolProperties", new ITypeProperty[]{new TypeProperty("fullName", LanguageConstants.String, TypePropertyFlags.ReadOnly)}, null);
            ResourceType_dedicatedCloudNodes = new ResourceType("Microsoft.VMwareCloudSimple/dedicatedCloudNodes", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => DedicatedCloudNodeProperties, TypePropertyFlags.Required), new LazyTypeProperty("sku", () => Sku, TypePropertyFlags.None), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.VMwareCloudSimple/dedicatedCloudNodes'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_dedicatedCloudNodes);
            ResourceType_dedicatedCloudServices = new ResourceType("Microsoft.VMwareCloudSimple/dedicatedCloudServices", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => DedicatedCloudServiceProperties, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.VMwareCloudSimple/dedicatedCloudServices'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_dedicatedCloudServices);
            ResourceType_virtualMachines = new ResourceType("Microsoft.VMwareCloudSimple/virtualMachines", new ITypeProperty[]{new TypeProperty("id", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("location", LanguageConstants.String, TypePropertyFlags.Required), new TypeProperty("name", LanguageConstants.String, TypePropertyFlags.SkipInlining | TypePropertyFlags.Required), new LazyTypeProperty("properties", () => VirtualMachineProperties, TypePropertyFlags.Required), new TypeProperty("tags", new NamedObjectType("tags", new ITypeProperty[]{}, new TypeProperty("additionalProperties", LanguageConstants.String, TypePropertyFlags.None)), TypePropertyFlags.None), new TypeProperty("type", new StringLiteralType("'Microsoft.VMwareCloudSimple/virtualMachines'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("apiVersion", new StringLiteralType("'2019-04-01'"), TypePropertyFlags.SkipInlining | TypePropertyFlags.ReadOnly), new TypeProperty("dependsOn", new TypedArrayType(LanguageConstants.String), TypePropertyFlags.WriteOnly)}, null, ResourceTypeReference_virtualMachines);
        }
        public static void Register(IResourceTypeRegistrar registrar)
        {
            registrar.RegisterType(ResourceTypeReference_dedicatedCloudNodes, () => InstanceLazy.Value.ResourceType_dedicatedCloudNodes);
            registrar.RegisterType(ResourceTypeReference_dedicatedCloudServices, () => InstanceLazy.Value.ResourceType_dedicatedCloudServices);
            registrar.RegisterType(ResourceTypeReference_virtualMachines, () => InstanceLazy.Value.ResourceType_virtualMachines);
        }
        private readonly ResourceType ResourceType_dedicatedCloudNodes;
        private readonly ResourceType ResourceType_dedicatedCloudServices;
        private readonly ResourceType ResourceType_virtualMachines;
        private readonly TypeSymbol DedicatedCloudNodeProperties;
        private readonly TypeSymbol SkuDescription;
        private readonly TypeSymbol Sku;
        private readonly TypeSymbol DedicatedCloudServiceProperties;
        private readonly TypeSymbol VirtualMachineProperties;
        private readonly TypeSymbol VirtualDiskController;
        private readonly TypeSymbol GuestOSCustomization;
        private readonly TypeSymbol VirtualDisk;
        private readonly TypeSymbol VirtualNic;
        private readonly TypeSymbol GuestOSNICCustomization;
        private readonly TypeSymbol VirtualNetwork;
        private readonly TypeSymbol VirtualNetworkProperties;
        private readonly TypeSymbol ResourcePool;
        private readonly TypeSymbol ResourcePoolProperties;
    }
}
